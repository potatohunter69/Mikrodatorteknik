
lab4klocka.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003fd4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  08004174  08004174  00014174  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080041d0  080041d0  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  080041d0  080041d0  000141d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080041d8  080041d8  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080041d8  080041d8  000141d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080041dc  080041dc  000141dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  080041e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000029c  20000060  08004240  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002fc  08004240  000202fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f75d  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001f91  00000000  00000000  0002f830  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ef0  00000000  00000000  000317c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000bda  00000000  00000000  000326b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001616e  00000000  00000000  00033292  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000111d9  00000000  00000000  00049400  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008e917  00000000  00000000  0005a5d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004548  00000000  00000000  000e8ef0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  000ed438  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000060 	.word	0x20000060
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800415c 	.word	0x0800415c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000064 	.word	0x20000064
 80001dc:	0800415c 	.word	0x0800415c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <My_Delay>:
/*
 * my = mu = micro
 * Holds for an amount of microseconds.
 */
void My_Delay(uint32_t microseconds )
{
 800057c:	b480      	push	{r7}
 800057e:	b085      	sub	sp, #20
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
	TIM_TypeDef *timer = TIM2;
 8000584:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000588:	60fb      	str	r3, [r7, #12]

	timer->CR1 &= ~(0x01);
 800058a:	68fb      	ldr	r3, [r7, #12]
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	f023 0201 	bic.w	r2, r3, #1
 8000592:	68fb      	ldr	r3, [r7, #12]
 8000594:	601a      	str	r2, [r3, #0]

	timer->CNT = 0;
 8000596:	68fb      	ldr	r3, [r7, #12]
 8000598:	2200      	movs	r2, #0
 800059a:	625a      	str	r2, [r3, #36]	; 0x24
	timer->CR1 |= 0x01;
 800059c:	68fb      	ldr	r3, [r7, #12]
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	f043 0201 	orr.w	r2, r3, #1
 80005a4:	68fb      	ldr	r3, [r7, #12]
 80005a6:	601a      	str	r2, [r3, #0]

	while(timer->CNT <= microseconds){}
 80005a8:	bf00      	nop
 80005aa:	68fb      	ldr	r3, [r7, #12]
 80005ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80005ae:	687a      	ldr	r2, [r7, #4]
 80005b0:	429a      	cmp	r2, r3
 80005b2:	d2fa      	bcs.n	80005aa <My_Delay+0x2e>

}
 80005b4:	bf00      	nop
 80005b6:	bf00      	nop
 80005b8:	3714      	adds	r7, #20
 80005ba:	46bd      	mov	sp, r7
 80005bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c0:	4770      	bx	lr

080005c2 <TextLCD_SendNibbleWithPulseOnE>:
 *
 *  When sending a byte, use this twice, sending D7-D4 the first time
 *  and D3-D0 the second time.
 ****************************************************************************/
void TextLCD_SendNibbleWithPulseOnE(TextLCDType * hlcd, uint8_t data)
{
 80005c2:	b580      	push	{r7, lr}
 80005c4:	b084      	sub	sp, #16
 80005c6:	af02      	add	r7, sp, #8
 80005c8:	6078      	str	r0, [r7, #4]
 80005ca:	460b      	mov	r3, r1
 80005cc:	70fb      	strb	r3, [r7, #3]
	/***** Put nibble when E is low *****/
	data = data & INV_E;
 80005ce:	78fb      	ldrb	r3, [r7, #3]
 80005d0:	f023 0304 	bic.w	r3, r3, #4
 80005d4:	b2db      	uxtb	r3, r3
 80005d6:	70fb      	strb	r3, [r7, #3]
	HAL_I2C_Master_Transmit(hlcd->hi2c, hlcd->device_address, &data, 1, 1000);
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	6818      	ldr	r0, [r3, #0]
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	791b      	ldrb	r3, [r3, #4]
 80005e0:	b299      	uxth	r1, r3
 80005e2:	1cfa      	adds	r2, r7, #3
 80005e4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005e8:	9300      	str	r3, [sp, #0]
 80005ea:	2301      	movs	r3, #1
 80005ec:	f001 fa56 	bl	8001a9c <HAL_I2C_Master_Transmit>
	My_Delay(2000);
 80005f0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80005f4:	f7ff ffc2 	bl	800057c <My_Delay>

	/***** Now set E to high *****/
	data = data | BIT_E;
 80005f8:	78fb      	ldrb	r3, [r7, #3]
 80005fa:	f043 0304 	orr.w	r3, r3, #4
 80005fe:	b2db      	uxtb	r3, r3
 8000600:	70fb      	strb	r3, [r7, #3]
	HAL_I2C_Master_Transmit(hlcd->hi2c, hlcd->device_address, &data, 1, 1000);
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	6818      	ldr	r0, [r3, #0]
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	791b      	ldrb	r3, [r3, #4]
 800060a:	b299      	uxth	r1, r3
 800060c:	1cfa      	adds	r2, r7, #3
 800060e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000612:	9300      	str	r3, [sp, #0]
 8000614:	2301      	movs	r3, #1
 8000616:	f001 fa41 	bl	8001a9c <HAL_I2C_Master_Transmit>
	My_Delay(2000);
 800061a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800061e:	f7ff ffad 	bl	800057c <My_Delay>

	/***** Then go low again *****/
	data = data & INV_E;
 8000622:	78fb      	ldrb	r3, [r7, #3]
 8000624:	f023 0304 	bic.w	r3, r3, #4
 8000628:	b2db      	uxtb	r3, r3
 800062a:	70fb      	strb	r3, [r7, #3]
	HAL_I2C_Master_Transmit(hlcd->hi2c, hlcd->device_address, &data, 1, 1000);
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	6818      	ldr	r0, [r3, #0]
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	791b      	ldrb	r3, [r3, #4]
 8000634:	b299      	uxth	r1, r3
 8000636:	1cfa      	adds	r2, r7, #3
 8000638:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800063c:	9300      	str	r3, [sp, #0]
 800063e:	2301      	movs	r3, #1
 8000640:	f001 fa2c 	bl	8001a9c <HAL_I2C_Master_Transmit>
}
 8000644:	bf00      	nop
 8000646:	3708      	adds	r7, #8
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}

0800064c <TextLCD_SendByte>:

void TextLCD_SendByte(
		TextLCDType   * hlcd,
		uint8_t         data,
		GPIO_PinState   RS)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b084      	sub	sp, #16
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
 8000654:	460b      	mov	r3, r1
 8000656:	70fb      	strb	r3, [r7, #3]
 8000658:	4613      	mov	r3, r2
 800065a:	70bb      	strb	r3, [r7, #2]
	// Place the data bits in the top four bits. The lowest four will
	// be for control.
	uint8_t d_lo = (data & 0x0F) << 4;
 800065c:	78fb      	ldrb	r3, [r7, #3]
 800065e:	011b      	lsls	r3, r3, #4
 8000660:	73fb      	strb	r3, [r7, #15]
	uint8_t d_hi = (data & 0xF0);
 8000662:	78fb      	ldrb	r3, [r7, #3]
 8000664:	f023 030f 	bic.w	r3, r3, #15
 8000668:	73bb      	strb	r3, [r7, #14]

	// Set the control bits for the message.
	uint8_t ctrl = 0x00;
 800066a:	2300      	movs	r3, #0
 800066c:	737b      	strb	r3, [r7, #13]
	ctrl = (BT == GPIO_PIN_SET) ? (ctrl | BIT_BT) : (ctrl & INV_BT);
 800066e:	4b1e      	ldr	r3, [pc, #120]	; (80006e8 <TextLCD_SendByte+0x9c>)
 8000670:	781b      	ldrb	r3, [r3, #0]
 8000672:	2b01      	cmp	r3, #1
 8000674:	d104      	bne.n	8000680 <TextLCD_SendByte+0x34>
 8000676:	7b7b      	ldrb	r3, [r7, #13]
 8000678:	f043 0308 	orr.w	r3, r3, #8
 800067c:	b2db      	uxtb	r3, r3
 800067e:	e003      	b.n	8000688 <TextLCD_SendByte+0x3c>
 8000680:	7b7b      	ldrb	r3, [r7, #13]
 8000682:	f023 0308 	bic.w	r3, r3, #8
 8000686:	b2db      	uxtb	r3, r3
 8000688:	737b      	strb	r3, [r7, #13]
	ctrl = (RS == GPIO_PIN_SET) ? (ctrl | BIT_RS) : (ctrl & INV_RS);
 800068a:	78bb      	ldrb	r3, [r7, #2]
 800068c:	2b01      	cmp	r3, #1
 800068e:	d104      	bne.n	800069a <TextLCD_SendByte+0x4e>
 8000690:	7b7b      	ldrb	r3, [r7, #13]
 8000692:	f043 0301 	orr.w	r3, r3, #1
 8000696:	b2db      	uxtb	r3, r3
 8000698:	e003      	b.n	80006a2 <TextLCD_SendByte+0x56>
 800069a:	7b7b      	ldrb	r3, [r7, #13]
 800069c:	f023 0301 	bic.w	r3, r3, #1
 80006a0:	b2db      	uxtb	r3, r3
 80006a2:	737b      	strb	r3, [r7, #13]
	ctrl = (RW == GPIO_PIN_SET) ? (ctrl | BIT_RW) : (ctrl & INV_RW);
 80006a4:	4b11      	ldr	r3, [pc, #68]	; (80006ec <TextLCD_SendByte+0xa0>)
 80006a6:	781b      	ldrb	r3, [r3, #0]
 80006a8:	2b01      	cmp	r3, #1
 80006aa:	d104      	bne.n	80006b6 <TextLCD_SendByte+0x6a>
 80006ac:	7b7b      	ldrb	r3, [r7, #13]
 80006ae:	f043 0302 	orr.w	r3, r3, #2
 80006b2:	b2db      	uxtb	r3, r3
 80006b4:	e003      	b.n	80006be <TextLCD_SendByte+0x72>
 80006b6:	7b7b      	ldrb	r3, [r7, #13]
 80006b8:	f023 0302 	bic.w	r3, r3, #2
 80006bc:	b2db      	uxtb	r3, r3
 80006be:	737b      	strb	r3, [r7, #13]

	TextLCD_SendNibbleWithPulseOnE( hlcd, (d_hi | ctrl) );
 80006c0:	7bba      	ldrb	r2, [r7, #14]
 80006c2:	7b7b      	ldrb	r3, [r7, #13]
 80006c4:	4313      	orrs	r3, r2
 80006c6:	b2db      	uxtb	r3, r3
 80006c8:	4619      	mov	r1, r3
 80006ca:	6878      	ldr	r0, [r7, #4]
 80006cc:	f7ff ff79 	bl	80005c2 <TextLCD_SendNibbleWithPulseOnE>
	TextLCD_SendNibbleWithPulseOnE( hlcd, (d_lo | ctrl) );
 80006d0:	7bfa      	ldrb	r2, [r7, #15]
 80006d2:	7b7b      	ldrb	r3, [r7, #13]
 80006d4:	4313      	orrs	r3, r2
 80006d6:	b2db      	uxtb	r3, r3
 80006d8:	4619      	mov	r1, r3
 80006da:	6878      	ldr	r0, [r7, #4]
 80006dc:	f7ff ff71 	bl	80005c2 <TextLCD_SendNibbleWithPulseOnE>
}
 80006e0:	bf00      	nop
 80006e2:	3710      	adds	r7, #16
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	20000000 	.word	0x20000000
 80006ec:	2000007c 	.word	0x2000007c

080006f0 <TextLCD_Init>:

void TextLCD_Init(
		TextLCDType         *   hlcd,
		I2C_HandleTypeDef   *   hi2c,
		uint8_t                 device_address)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b086      	sub	sp, #24
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	60f8      	str	r0, [r7, #12]
 80006f8:	60b9      	str	r1, [r7, #8]
 80006fa:	4613      	mov	r3, r2
 80006fc:	71fb      	strb	r3, [r7, #7]
	uint32_t dly = 5 * 1000 * 1000; // 5 seconds
 80006fe:	4b2a      	ldr	r3, [pc, #168]	; (80007a8 <TextLCD_Init+0xb8>)
 8000700:	617b      	str	r3, [r7, #20]
	My_Delay(dly);
 8000702:	6978      	ldr	r0, [r7, #20]
 8000704:	f7ff ff3a 	bl	800057c <My_Delay>

	hlcd->hi2c           = hi2c;
 8000708:	68fb      	ldr	r3, [r7, #12]
 800070a:	68ba      	ldr	r2, [r7, #8]
 800070c:	601a      	str	r2, [r3, #0]
	hlcd->device_address = device_address;
 800070e:	68fb      	ldr	r3, [r7, #12]
 8000710:	79fa      	ldrb	r2, [r7, #7]
 8000712:	711a      	strb	r2, [r3, #4]

	uint8_t data = 0x30; // b# 0011 1000
 8000714:	2330      	movs	r3, #48	; 0x30
 8000716:	74fb      	strb	r3, [r7, #19]
	uint8_t ctrl = 0x08;
 8000718:	2308      	movs	r3, #8
 800071a:	74bb      	strb	r3, [r7, #18]

	My_Delay(70000);
 800071c:	4823      	ldr	r0, [pc, #140]	; (80007ac <TextLCD_Init+0xbc>)
 800071e:	f7ff ff2d 	bl	800057c <My_Delay>

	TextLCD_SendNibbleWithPulseOnE(hlcd, (data|ctrl) );
 8000722:	7cfa      	ldrb	r2, [r7, #19]
 8000724:	7cbb      	ldrb	r3, [r7, #18]
 8000726:	4313      	orrs	r3, r2
 8000728:	b2db      	uxtb	r3, r3
 800072a:	4619      	mov	r1, r3
 800072c:	68f8      	ldr	r0, [r7, #12]
 800072e:	f7ff ff48 	bl	80005c2 <TextLCD_SendNibbleWithPulseOnE>
	TextLCD_SendNibbleWithPulseOnE(hlcd, (data|ctrl) );
 8000732:	7cfa      	ldrb	r2, [r7, #19]
 8000734:	7cbb      	ldrb	r3, [r7, #18]
 8000736:	4313      	orrs	r3, r2
 8000738:	b2db      	uxtb	r3, r3
 800073a:	4619      	mov	r1, r3
 800073c:	68f8      	ldr	r0, [r7, #12]
 800073e:	f7ff ff40 	bl	80005c2 <TextLCD_SendNibbleWithPulseOnE>
	TextLCD_SendNibbleWithPulseOnE(hlcd, (data|ctrl) );
 8000742:	7cfa      	ldrb	r2, [r7, #19]
 8000744:	7cbb      	ldrb	r3, [r7, #18]
 8000746:	4313      	orrs	r3, r2
 8000748:	b2db      	uxtb	r3, r3
 800074a:	4619      	mov	r1, r3
 800074c:	68f8      	ldr	r0, [r7, #12]
 800074e:	f7ff ff38 	bl	80005c2 <TextLCD_SendNibbleWithPulseOnE>

	data = 0x20;
 8000752:	2320      	movs	r3, #32
 8000754:	74fb      	strb	r3, [r7, #19]
	TextLCD_SendNibbleWithPulseOnE(hlcd, (data|ctrl) );
 8000756:	7cfa      	ldrb	r2, [r7, #19]
 8000758:	7cbb      	ldrb	r3, [r7, #18]
 800075a:	4313      	orrs	r3, r2
 800075c:	b2db      	uxtb	r3, r3
 800075e:	4619      	mov	r1, r3
 8000760:	68f8      	ldr	r0, [r7, #12]
 8000762:	f7ff ff2e 	bl	80005c2 <TextLCD_SendNibbleWithPulseOnE>

	// Finished setting up 4-bit mode. Let's configure display

	// hlcd, data, rs, rw
	TextLCD_SendByte(hlcd, 0x28, 0); //N=1 (2 line), F=0 (5x8)
 8000766:	2200      	movs	r2, #0
 8000768:	2128      	movs	r1, #40	; 0x28
 800076a:	68f8      	ldr	r0, [r7, #12]
 800076c:	f7ff ff6e 	bl	800064c <TextLCD_SendByte>

	TextLCD_SendByte(hlcd, 0x0F, 0); //Display off, Cursor Off, Blink off
 8000770:	2200      	movs	r2, #0
 8000772:	210f      	movs	r1, #15
 8000774:	68f8      	ldr	r0, [r7, #12]
 8000776:	f7ff ff69 	bl	800064c <TextLCD_SendByte>
	TextLCD_SendByte(hlcd, 0x01, 0);
 800077a:	2200      	movs	r2, #0
 800077c:	2101      	movs	r1, #1
 800077e:	68f8      	ldr	r0, [r7, #12]
 8000780:	f7ff ff64 	bl	800064c <TextLCD_SendByte>
	My_Delay(5000);
 8000784:	f241 3088 	movw	r0, #5000	; 0x1388
 8000788:	f7ff fef8 	bl	800057c <My_Delay>

	TextLCD_SendByte(hlcd, 0x06, 0);
 800078c:	2200      	movs	r2, #0
 800078e:	2106      	movs	r1, #6
 8000790:	68f8      	ldr	r0, [r7, #12]
 8000792:	f7ff ff5b 	bl	800064c <TextLCD_SendByte>
	TextLCD_SendByte(hlcd, 0x0C, 0);
 8000796:	2200      	movs	r2, #0
 8000798:	210c      	movs	r1, #12
 800079a:	68f8      	ldr	r0, [r7, #12]
 800079c:	f7ff ff56 	bl	800064c <TextLCD_SendByte>
}
 80007a0:	bf00      	nop
 80007a2:	3718      	adds	r7, #24
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	004c4b40 	.word	0x004c4b40
 80007ac:	00011170 	.word	0x00011170

080007b0 <TextLCD_SetDDRAMAdr>:
	 My_Delay(2000);

}

void TextLCD_SetDDRAMAdr(TextLCDType * hlcd, uint8_t adr)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b082      	sub	sp, #8
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
 80007b8:	460b      	mov	r3, r1
 80007ba:	70fb      	strb	r3, [r7, #3]
	TextLCD_SendByte(hlcd, 0x80 | adr, GPIO_PIN_RESET); // RS = 0 for command
 80007bc:	78fb      	ldrb	r3, [r7, #3]
 80007be:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80007c2:	b2db      	uxtb	r3, r3
 80007c4:	2200      	movs	r2, #0
 80007c6:	4619      	mov	r1, r3
 80007c8:	6878      	ldr	r0, [r7, #4]
 80007ca:	f7ff ff3f 	bl	800064c <TextLCD_SendByte>
	 My_Delay(2000);
 80007ce:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80007d2:	f7ff fed3 	bl	800057c <My_Delay>

}
 80007d6:	bf00      	nop
 80007d8:	3708      	adds	r7, #8
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}

080007de <TextLCD_SetPos>:

void TextLCD_SetPos(TextLCDType *hlcd, int col, int row) {
 80007de:	b580      	push	{r7, lr}
 80007e0:	b086      	sub	sp, #24
 80007e2:	af00      	add	r7, sp, #0
 80007e4:	60f8      	str	r0, [r7, #12]
 80007e6:	60b9      	str	r1, [r7, #8]
 80007e8:	607a      	str	r2, [r7, #4]
    // Calculate the DDRAM address based on the specified column and row
    uint8_t adr;
    if (row == 0) {
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d102      	bne.n	80007f6 <TextLCD_SetPos+0x18>
        adr = col;
 80007f0:	68bb      	ldr	r3, [r7, #8]
 80007f2:	75fb      	strb	r3, [r7, #23]
 80007f4:	e003      	b.n	80007fe <TextLCD_SetPos+0x20>
    } else {
        adr = col + 0x40; // Move to the second line
 80007f6:	68bb      	ldr	r3, [r7, #8]
 80007f8:	b2db      	uxtb	r3, r3
 80007fa:	3340      	adds	r3, #64	; 0x40
 80007fc:	75fb      	strb	r3, [r7, #23]
    }
    // Set the DDRAM address for cursor positioning
    TextLCD_SetDDRAMAdr(hlcd, adr);
 80007fe:	7dfb      	ldrb	r3, [r7, #23]
 8000800:	4619      	mov	r1, r3
 8000802:	68f8      	ldr	r0, [r7, #12]
 8000804:	f7ff ffd4 	bl	80007b0 <TextLCD_SetDDRAMAdr>
}
 8000808:	bf00      	nop
 800080a:	3718      	adds	r7, #24
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}

08000810 <TextLCD_PutChar>:
	TextLCD_SetDDRAMAdr(hlcd, adr);

}

void TextLCD_PutChar(TextLCDType * hlcd, char c)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b082      	sub	sp, #8
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
 8000818:	460b      	mov	r3, r1
 800081a:	70fb      	strb	r3, [r7, #3]
	TextLCD_SendByte(hlcd, c, GPIO_PIN_SET);
 800081c:	78fb      	ldrb	r3, [r7, #3]
 800081e:	2201      	movs	r2, #1
 8000820:	4619      	mov	r1, r3
 8000822:	6878      	ldr	r0, [r7, #4]
 8000824:	f7ff ff12 	bl	800064c <TextLCD_SendByte>

}
 8000828:	bf00      	nop
 800082a:	3708      	adds	r7, #8
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}

08000830 <TextLCD_PutStr>:


void TextLCD_PutStr(TextLCDType * hlcd, char * str)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b082      	sub	sp, #8
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
 8000838:	6039      	str	r1, [r7, #0]
	while (*str) {
 800083a:	e008      	b.n	800084e <TextLCD_PutStr+0x1e>
		TextLCD_PutChar(hlcd, *str);
 800083c:	683b      	ldr	r3, [r7, #0]
 800083e:	781b      	ldrb	r3, [r3, #0]
 8000840:	4619      	mov	r1, r3
 8000842:	6878      	ldr	r0, [r7, #4]
 8000844:	f7ff ffe4 	bl	8000810 <TextLCD_PutChar>
		str++;
 8000848:	683b      	ldr	r3, [r7, #0]
 800084a:	3301      	adds	r3, #1
 800084c:	603b      	str	r3, [r7, #0]
	while (*str) {
 800084e:	683b      	ldr	r3, [r7, #0]
 8000850:	781b      	ldrb	r3, [r3, #0]
 8000852:	2b00      	cmp	r3, #0
 8000854:	d1f2      	bne.n	800083c <TextLCD_PutStr+0xc>
	}

}
 8000856:	bf00      	nop
 8000858:	bf00      	nop
 800085a:	3708      	adds	r7, #8
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}

08000860 <DisplayTimeOnLCD>:

void DisplayTimeOnLCD(TextLCDType *hlcd, struct clock_data *pcd) {
 8000860:	b580      	push	{r7, lr}
 8000862:	b08a      	sub	sp, #40	; 0x28
 8000864:	af02      	add	r7, sp, #8
 8000866:	6078      	str	r0, [r7, #4]
 8000868:	6039      	str	r1, [r7, #0]
    // Calculate the DDRAM address for positioning at the lower row and rightmost column

    TextLCD_SetPos(hlcd, 8, 1);
 800086a:	2201      	movs	r2, #1
 800086c:	2108      	movs	r1, #8
 800086e:	6878      	ldr	r0, [r7, #4]
 8000870:	f7ff ffb5 	bl	80007de <TextLCD_SetPos>
    int hours = pcd->hour;
 8000874:	683b      	ldr	r3, [r7, #0]
 8000876:	795b      	ldrb	r3, [r3, #5]
 8000878:	61fb      	str	r3, [r7, #28]
    int minutess =pcd->minutes;
 800087a:	683b      	ldr	r3, [r7, #0]
 800087c:	791b      	ldrb	r3, [r3, #4]
 800087e:	61bb      	str	r3, [r7, #24]
    int secondss =pcd->seconds;
 8000880:	683b      	ldr	r3, [r7, #0]
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	617b      	str	r3, [r7, #20]

    // Display the time in the format HH:MM:SS
    char timeStr[9]; // HH:MM:SS + '\0'
    snprintf(timeStr, sizeof(timeStr), "%02u:%02u:%02u", hours, minutess, secondss);
 8000886:	f107 0008 	add.w	r0, r7, #8
 800088a:	697b      	ldr	r3, [r7, #20]
 800088c:	9301      	str	r3, [sp, #4]
 800088e:	69bb      	ldr	r3, [r7, #24]
 8000890:	9300      	str	r3, [sp, #0]
 8000892:	69fb      	ldr	r3, [r7, #28]
 8000894:	4a06      	ldr	r2, [pc, #24]	; (80008b0 <DisplayTimeOnLCD+0x50>)
 8000896:	2109      	movs	r1, #9
 8000898:	f002 ffa8 	bl	80037ec <sniprintf>

    TextLCD_PutStr(hlcd, timeStr);
 800089c:	f107 0308 	add.w	r3, r7, #8
 80008a0:	4619      	mov	r1, r3
 80008a2:	6878      	ldr	r0, [r7, #4]
 80008a4:	f7ff ffc4 	bl	8000830 <TextLCD_PutStr>
}
 80008a8:	bf00      	nop
 80008aa:	3720      	adds	r7, #32
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	08004174 	.word	0x08004174

080008b4 <handleTime>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void handleTime(struct clock_data *pcd) {
 80008b4:	b480      	push	{r7}
 80008b6:	b083      	sub	sp, #12
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]


	if (pcd->seconds >= 60) {
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	2b3b      	cmp	r3, #59	; 0x3b
 80008c2:	d91c      	bls.n	80008fe <handleTime+0x4a>
		pcd->seconds = 0;
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	2200      	movs	r2, #0
 80008c8:	601a      	str	r2, [r3, #0]
		pcd->minutes++;
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	791b      	ldrb	r3, [r3, #4]
 80008ce:	3301      	adds	r3, #1
 80008d0:	b2da      	uxtb	r2, r3
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	711a      	strb	r2, [r3, #4]

		if (pcd->minutes >= 60) {
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	791b      	ldrb	r3, [r3, #4]
 80008da:	2b3b      	cmp	r3, #59	; 0x3b
 80008dc:	d90f      	bls.n	80008fe <handleTime+0x4a>
			pcd->minutes = 0;
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	2200      	movs	r2, #0
 80008e2:	711a      	strb	r2, [r3, #4]
			pcd->hour++;
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	795b      	ldrb	r3, [r3, #5]
 80008e8:	3301      	adds	r3, #1
 80008ea:	b2da      	uxtb	r2, r3
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	715a      	strb	r2, [r3, #5]

			if (pcd->hour >= 24) {
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	795b      	ldrb	r3, [r3, #5]
 80008f4:	2b17      	cmp	r3, #23
 80008f6:	d902      	bls.n	80008fe <handleTime+0x4a>
				pcd->hour = 0;
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	2200      	movs	r2, #0
 80008fc:	715a      	strb	r2, [r3, #5]
			}

		}
	}
}
 80008fe:	bf00      	nop
 8000900:	370c      	adds	r7, #12
 8000902:	46bd      	mov	sp, r7
 8000904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000908:	4770      	bx	lr
	...

0800090c <HAL_TIM_PeriodElapsedCallback>:





void HAL_TIM_PeriodElapsedCallback( TIM_HandleTypeDef *htim ){
 800090c:	b580      	push	{r7, lr}
 800090e:	b082      	sub	sp, #8
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]



	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000914:	2120      	movs	r1, #32
 8000916:	4805      	ldr	r0, [pc, #20]	; (800092c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000918:	f000 ff61 	bl	80017de <HAL_GPIO_TogglePin>
	flag =1 ;
 800091c:	4b04      	ldr	r3, [pc, #16]	; (8000930 <HAL_TIM_PeriodElapsedCallback+0x24>)
 800091e:	2201      	movs	r2, #1
 8000920:	601a      	str	r2, [r3, #0]


	//UpdateTime();

}
 8000922:	bf00      	nop
 8000924:	3708      	adds	r7, #8
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	40020000 	.word	0x40020000
 8000930:	200001a8 	.word	0x200001a8

08000934 <cd_set>:

void cd_set(struct clock_data * pcd,
		uint8_t hrs,
		uint8_t min,
		uint8_t sec){
 8000934:	b480      	push	{r7}
 8000936:	b083      	sub	sp, #12
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
 800093c:	4608      	mov	r0, r1
 800093e:	4611      	mov	r1, r2
 8000940:	461a      	mov	r2, r3
 8000942:	4603      	mov	r3, r0
 8000944:	70fb      	strb	r3, [r7, #3]
 8000946:	460b      	mov	r3, r1
 8000948:	70bb      	strb	r3, [r7, #2]
 800094a:	4613      	mov	r3, r2
 800094c:	707b      	strb	r3, [r7, #1]
	pcd->hour =hrs;
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	78fa      	ldrb	r2, [r7, #3]
 8000952:	715a      	strb	r2, [r3, #5]
	pcd->minutes =min;
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	78ba      	ldrb	r2, [r7, #2]
 8000958:	711a      	strb	r2, [r3, #4]
	pcd->seconds =sec;
 800095a:	787a      	ldrb	r2, [r7, #1]
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	601a      	str	r2, [r3, #0]
}
 8000960:	bf00      	nop
 8000962:	370c      	adds	r7, #12
 8000964:	46bd      	mov	sp, r7
 8000966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096a:	4770      	bx	lr

0800096c <cd_tick>:

void cd_tick(struct clock_data * pcd){
 800096c:	b480      	push	{r7}
 800096e:	b083      	sub	sp, #12
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
	pcd->seconds++;
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	1c5a      	adds	r2, r3, #1
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	601a      	str	r2, [r3, #0]
}
 800097e:	bf00      	nop
 8000980:	370c      	adds	r7, #12
 8000982:	46bd      	mov	sp, r7
 8000984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000988:	4770      	bx	lr
	...

0800098c <wait_for_button_press>:


void wait_for_button_press(){
 800098c:	b580      	push	{r7, lr}
 800098e:	b082      	sub	sp, #8
 8000990:	af00      	add	r7, sp, #0

	int b1_pressed;

	while(b1_pressed){
 8000992:	e00b      	b.n	80009ac <wait_for_button_press+0x20>
		b1_pressed =GPIO_PIN_RESET
				== HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin);
 8000994:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000998:	4808      	ldr	r0, [pc, #32]	; (80009bc <wait_for_button_press+0x30>)
 800099a:	f000 feef 	bl	800177c <HAL_GPIO_ReadPin>
 800099e:	4603      	mov	r3, r0
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	bf0c      	ite	eq
 80009a4:	2301      	moveq	r3, #1
 80009a6:	2300      	movne	r3, #0
 80009a8:	b2db      	uxtb	r3, r3
		b1_pressed =GPIO_PIN_RESET
 80009aa:	607b      	str	r3, [r7, #4]
	while(b1_pressed){
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d1f0      	bne.n	8000994 <wait_for_button_press+0x8>
	}
}
 80009b2:	bf00      	nop
 80009b4:	bf00      	nop
 80009b6:	3708      	adds	r7, #8
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	40020800 	.word	0x40020800

080009c0 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b084      	sub	sp, #16
 80009c4:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80009c6:	f000 fbd1 	bl	800116c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80009ca:	f000 f841 	bl	8000a50 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80009ce:	f000 f99b 	bl	8000d08 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 80009d2:	f000 f96f 	bl	8000cb4 <MX_USART2_UART_Init>
	MX_TIM3_Init();
 80009d6:	f000 f91f 	bl	8000c18 <MX_TIM3_Init>
	MX_I2C1_Init();
 80009da:	f000 f8a3 	bl	8000b24 <MX_I2C1_Init>
	MX_TIM2_Init();
 80009de:	f000 f8cf 	bl	8000b80 <MX_TIM2_Init>
	/* USER CODE BEGIN 2 */

	struct clock_data my_clock; // reserves the memory needed
	cd_set(&my_clock, 23, 59, 45);
 80009e2:	f107 0008 	add.w	r0, r7, #8
 80009e6:	232d      	movs	r3, #45	; 0x2d
 80009e8:	223b      	movs	r2, #59	; 0x3b
 80009ea:	2117      	movs	r1, #23
 80009ec:	f7ff ffa2 	bl	8000934 <cd_set>

	TextLCDType hlcd;


	TextLCD_Init(&hlcd, &hi2c1, 0x4E);
 80009f0:	463b      	mov	r3, r7
 80009f2:	224e      	movs	r2, #78	; 0x4e
 80009f4:	4912      	ldr	r1, [pc, #72]	; (8000a40 <main+0x80>)
 80009f6:	4618      	mov	r0, r3
 80009f8:	f7ff fe7a 	bl	80006f0 <TextLCD_Init>
	HAL_TIM_Base_Start_IT(&htim3);
 80009fc:	4811      	ldr	r0, [pc, #68]	; (8000a44 <main+0x84>)
 80009fe:	f002 f83d 	bl	8002a7c <HAL_TIM_Base_Start_IT>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		wait_for_button_press();
 8000a02:	f7ff ffc3 	bl	800098c <wait_for_button_press>
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000a06:	2120      	movs	r1, #32
 8000a08:	480f      	ldr	r0, [pc, #60]	; (8000a48 <main+0x88>)
 8000a0a:	f000 fee8 	bl	80017de <HAL_GPIO_TogglePin>

		if(flag == 1){
 8000a0e:	4b0f      	ldr	r3, [pc, #60]	; (8000a4c <main+0x8c>)
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	2b01      	cmp	r3, #1
 8000a14:	d10c      	bne.n	8000a30 <main+0x70>
			cd_tick(&my_clock);
 8000a16:	f107 0308 	add.w	r3, r7, #8
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	f7ff ffa6 	bl	800096c <cd_tick>
			handleTime(&my_clock);
 8000a20:	f107 0308 	add.w	r3, r7, #8
 8000a24:	4618      	mov	r0, r3
 8000a26:	f7ff ff45 	bl	80008b4 <handleTime>
			flag =0;
 8000a2a:	4b08      	ldr	r3, [pc, #32]	; (8000a4c <main+0x8c>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	601a      	str	r2, [r3, #0]
		}
		DisplayTimeOnLCD(&hlcd, &my_clock);
 8000a30:	f107 0208 	add.w	r2, r7, #8
 8000a34:	463b      	mov	r3, r7
 8000a36:	4611      	mov	r1, r2
 8000a38:	4618      	mov	r0, r3
 8000a3a:	f7ff ff11 	bl	8000860 <DisplayTimeOnLCD>
	{
 8000a3e:	e7e0      	b.n	8000a02 <main+0x42>
 8000a40:	20000080 	.word	0x20000080
 8000a44:	2000011c 	.word	0x2000011c
 8000a48:	40020000 	.word	0x40020000
 8000a4c:	200001a8 	.word	0x200001a8

08000a50 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b094      	sub	sp, #80	; 0x50
 8000a54:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a56:	f107 0320 	add.w	r3, r7, #32
 8000a5a:	2230      	movs	r2, #48	; 0x30
 8000a5c:	2100      	movs	r1, #0
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f002 fef8 	bl	8003854 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a64:	f107 030c 	add.w	r3, r7, #12
 8000a68:	2200      	movs	r2, #0
 8000a6a:	601a      	str	r2, [r3, #0]
 8000a6c:	605a      	str	r2, [r3, #4]
 8000a6e:	609a      	str	r2, [r3, #8]
 8000a70:	60da      	str	r2, [r3, #12]
 8000a72:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000a74:	2300      	movs	r3, #0
 8000a76:	60bb      	str	r3, [r7, #8]
 8000a78:	4b28      	ldr	r3, [pc, #160]	; (8000b1c <SystemClock_Config+0xcc>)
 8000a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a7c:	4a27      	ldr	r2, [pc, #156]	; (8000b1c <SystemClock_Config+0xcc>)
 8000a7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a82:	6413      	str	r3, [r2, #64]	; 0x40
 8000a84:	4b25      	ldr	r3, [pc, #148]	; (8000b1c <SystemClock_Config+0xcc>)
 8000a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a8c:	60bb      	str	r3, [r7, #8]
 8000a8e:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a90:	2300      	movs	r3, #0
 8000a92:	607b      	str	r3, [r7, #4]
 8000a94:	4b22      	ldr	r3, [pc, #136]	; (8000b20 <SystemClock_Config+0xd0>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	4a21      	ldr	r2, [pc, #132]	; (8000b20 <SystemClock_Config+0xd0>)
 8000a9a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000a9e:	6013      	str	r3, [r2, #0]
 8000aa0:	4b1f      	ldr	r3, [pc, #124]	; (8000b20 <SystemClock_Config+0xd0>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000aa8:	607b      	str	r3, [r7, #4]
 8000aaa:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000aac:	2302      	movs	r3, #2
 8000aae:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ab0:	2301      	movs	r3, #1
 8000ab2:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ab4:	2310      	movs	r3, #16
 8000ab6:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ab8:	2302      	movs	r3, #2
 8000aba:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000abc:	2300      	movs	r3, #0
 8000abe:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 16;
 8000ac0:	2310      	movs	r3, #16
 8000ac2:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 336;
 8000ac4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000ac8:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000aca:	2304      	movs	r3, #4
 8000acc:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8000ace:	2304      	movs	r3, #4
 8000ad0:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ad2:	f107 0320 	add.w	r3, r7, #32
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f001 fae8 	bl	80020ac <HAL_RCC_OscConfig>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d001      	beq.n	8000ae6 <SystemClock_Config+0x96>
	{
		Error_Handler();
 8000ae2:	f000 f991 	bl	8000e08 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ae6:	230f      	movs	r3, #15
 8000ae8:	60fb      	str	r3, [r7, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000aea:	2302      	movs	r3, #2
 8000aec:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000aee:	2300      	movs	r3, #0
 8000af0:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000af2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000af6:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000af8:	2300      	movs	r3, #0
 8000afa:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000afc:	f107 030c 	add.w	r3, r7, #12
 8000b00:	2102      	movs	r1, #2
 8000b02:	4618      	mov	r0, r3
 8000b04:	f001 fd4a 	bl	800259c <HAL_RCC_ClockConfig>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d001      	beq.n	8000b12 <SystemClock_Config+0xc2>
	{
		Error_Handler();
 8000b0e:	f000 f97b 	bl	8000e08 <Error_Handler>
	}
}
 8000b12:	bf00      	nop
 8000b14:	3750      	adds	r7, #80	; 0x50
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	40023800 	.word	0x40023800
 8000b20:	40007000 	.word	0x40007000

08000b24 <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8000b28:	4b12      	ldr	r3, [pc, #72]	; (8000b74 <MX_I2C1_Init+0x50>)
 8000b2a:	4a13      	ldr	r2, [pc, #76]	; (8000b78 <MX_I2C1_Init+0x54>)
 8000b2c:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 8000b2e:	4b11      	ldr	r3, [pc, #68]	; (8000b74 <MX_I2C1_Init+0x50>)
 8000b30:	4a12      	ldr	r2, [pc, #72]	; (8000b7c <MX_I2C1_Init+0x58>)
 8000b32:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b34:	4b0f      	ldr	r3, [pc, #60]	; (8000b74 <MX_I2C1_Init+0x50>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8000b3a:	4b0e      	ldr	r3, [pc, #56]	; (8000b74 <MX_I2C1_Init+0x50>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b40:	4b0c      	ldr	r3, [pc, #48]	; (8000b74 <MX_I2C1_Init+0x50>)
 8000b42:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b46:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b48:	4b0a      	ldr	r3, [pc, #40]	; (8000b74 <MX_I2C1_Init+0x50>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8000b4e:	4b09      	ldr	r3, [pc, #36]	; (8000b74 <MX_I2C1_Init+0x50>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b54:	4b07      	ldr	r3, [pc, #28]	; (8000b74 <MX_I2C1_Init+0x50>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b5a:	4b06      	ldr	r3, [pc, #24]	; (8000b74 <MX_I2C1_Init+0x50>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b60:	4804      	ldr	r0, [pc, #16]	; (8000b74 <MX_I2C1_Init+0x50>)
 8000b62:	f000 fe57 	bl	8001814 <HAL_I2C_Init>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d001      	beq.n	8000b70 <MX_I2C1_Init+0x4c>
	{
		Error_Handler();
 8000b6c:	f000 f94c 	bl	8000e08 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8000b70:	bf00      	nop
 8000b72:	bd80      	pop	{r7, pc}
 8000b74:	20000080 	.word	0x20000080
 8000b78:	40005400 	.word	0x40005400
 8000b7c:	000186a0 	.word	0x000186a0

08000b80 <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b086      	sub	sp, #24
 8000b84:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b86:	f107 0308 	add.w	r3, r7, #8
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	601a      	str	r2, [r3, #0]
 8000b8e:	605a      	str	r2, [r3, #4]
 8000b90:	609a      	str	r2, [r3, #8]
 8000b92:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b94:	463b      	mov	r3, r7
 8000b96:	2200      	movs	r2, #0
 8000b98:	601a      	str	r2, [r3, #0]
 8000b9a:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8000b9c:	4b1d      	ldr	r3, [pc, #116]	; (8000c14 <MX_TIM2_Init+0x94>)
 8000b9e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ba2:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 83;
 8000ba4:	4b1b      	ldr	r3, [pc, #108]	; (8000c14 <MX_TIM2_Init+0x94>)
 8000ba6:	2253      	movs	r2, #83	; 0x53
 8000ba8:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000baa:	4b1a      	ldr	r3, [pc, #104]	; (8000c14 <MX_TIM2_Init+0x94>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 4294967296-1;
 8000bb0:	4b18      	ldr	r3, [pc, #96]	; (8000c14 <MX_TIM2_Init+0x94>)
 8000bb2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000bb6:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bb8:	4b16      	ldr	r3, [pc, #88]	; (8000c14 <MX_TIM2_Init+0x94>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bbe:	4b15      	ldr	r3, [pc, #84]	; (8000c14 <MX_TIM2_Init+0x94>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000bc4:	4813      	ldr	r0, [pc, #76]	; (8000c14 <MX_TIM2_Init+0x94>)
 8000bc6:	f001 ff09 	bl	80029dc <HAL_TIM_Base_Init>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d001      	beq.n	8000bd4 <MX_TIM2_Init+0x54>
	{
		Error_Handler();
 8000bd0:	f000 f91a 	bl	8000e08 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bd4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bd8:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000bda:	f107 0308 	add.w	r3, r7, #8
 8000bde:	4619      	mov	r1, r3
 8000be0:	480c      	ldr	r0, [pc, #48]	; (8000c14 <MX_TIM2_Init+0x94>)
 8000be2:	f002 f8b5 	bl	8002d50 <HAL_TIM_ConfigClockSource>
 8000be6:	4603      	mov	r3, r0
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d001      	beq.n	8000bf0 <MX_TIM2_Init+0x70>
	{
		Error_Handler();
 8000bec:	f000 f90c 	bl	8000e08 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000bf8:	463b      	mov	r3, r7
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	4805      	ldr	r0, [pc, #20]	; (8000c14 <MX_TIM2_Init+0x94>)
 8000bfe:	f002 fab1 	bl	8003164 <HAL_TIMEx_MasterConfigSynchronization>
 8000c02:	4603      	mov	r3, r0
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d001      	beq.n	8000c0c <MX_TIM2_Init+0x8c>
	{
		Error_Handler();
 8000c08:	f000 f8fe 	bl	8000e08 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8000c0c:	bf00      	nop
 8000c0e:	3718      	adds	r7, #24
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}
 8000c14:	200000d4 	.word	0x200000d4

08000c18 <MX_TIM3_Init>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b086      	sub	sp, #24
 8000c1c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c1e:	f107 0308 	add.w	r3, r7, #8
 8000c22:	2200      	movs	r2, #0
 8000c24:	601a      	str	r2, [r3, #0]
 8000c26:	605a      	str	r2, [r3, #4]
 8000c28:	609a      	str	r2, [r3, #8]
 8000c2a:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c2c:	463b      	mov	r3, r7
 8000c2e:	2200      	movs	r2, #0
 8000c30:	601a      	str	r2, [r3, #0]
 8000c32:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8000c34:	4b1d      	ldr	r3, [pc, #116]	; (8000cac <MX_TIM3_Init+0x94>)
 8000c36:	4a1e      	ldr	r2, [pc, #120]	; (8000cb0 <MX_TIM3_Init+0x98>)
 8000c38:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 4000-1;
 8000c3a:	4b1c      	ldr	r3, [pc, #112]	; (8000cac <MX_TIM3_Init+0x94>)
 8000c3c:	f640 729f 	movw	r2, #3999	; 0xf9f
 8000c40:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c42:	4b1a      	ldr	r3, [pc, #104]	; (8000cac <MX_TIM3_Init+0x94>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 20999;
 8000c48:	4b18      	ldr	r3, [pc, #96]	; (8000cac <MX_TIM3_Init+0x94>)
 8000c4a:	f245 2207 	movw	r2, #20999	; 0x5207
 8000c4e:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c50:	4b16      	ldr	r3, [pc, #88]	; (8000cac <MX_TIM3_Init+0x94>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c56:	4b15      	ldr	r3, [pc, #84]	; (8000cac <MX_TIM3_Init+0x94>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000c5c:	4813      	ldr	r0, [pc, #76]	; (8000cac <MX_TIM3_Init+0x94>)
 8000c5e:	f001 febd 	bl	80029dc <HAL_TIM_Base_Init>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d001      	beq.n	8000c6c <MX_TIM3_Init+0x54>
	{
		Error_Handler();
 8000c68:	f000 f8ce 	bl	8000e08 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c6c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c70:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000c72:	f107 0308 	add.w	r3, r7, #8
 8000c76:	4619      	mov	r1, r3
 8000c78:	480c      	ldr	r0, [pc, #48]	; (8000cac <MX_TIM3_Init+0x94>)
 8000c7a:	f002 f869 	bl	8002d50 <HAL_TIM_ConfigClockSource>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d001      	beq.n	8000c88 <MX_TIM3_Init+0x70>
	{
		Error_Handler();
 8000c84:	f000 f8c0 	bl	8000e08 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000c90:	463b      	mov	r3, r7
 8000c92:	4619      	mov	r1, r3
 8000c94:	4805      	ldr	r0, [pc, #20]	; (8000cac <MX_TIM3_Init+0x94>)
 8000c96:	f002 fa65 	bl	8003164 <HAL_TIMEx_MasterConfigSynchronization>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d001      	beq.n	8000ca4 <MX_TIM3_Init+0x8c>
	{
		Error_Handler();
 8000ca0:	f000 f8b2 	bl	8000e08 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 8000ca4:	bf00      	nop
 8000ca6:	3718      	adds	r7, #24
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd80      	pop	{r7, pc}
 8000cac:	2000011c 	.word	0x2000011c
 8000cb0:	40000400 	.word	0x40000400

08000cb4 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8000cb8:	4b11      	ldr	r3, [pc, #68]	; (8000d00 <MX_USART2_UART_Init+0x4c>)
 8000cba:	4a12      	ldr	r2, [pc, #72]	; (8000d04 <MX_USART2_UART_Init+0x50>)
 8000cbc:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8000cbe:	4b10      	ldr	r3, [pc, #64]	; (8000d00 <MX_USART2_UART_Init+0x4c>)
 8000cc0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000cc4:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000cc6:	4b0e      	ldr	r3, [pc, #56]	; (8000d00 <MX_USART2_UART_Init+0x4c>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000ccc:	4b0c      	ldr	r3, [pc, #48]	; (8000d00 <MX_USART2_UART_Init+0x4c>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000cd2:	4b0b      	ldr	r3, [pc, #44]	; (8000d00 <MX_USART2_UART_Init+0x4c>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000cd8:	4b09      	ldr	r3, [pc, #36]	; (8000d00 <MX_USART2_UART_Init+0x4c>)
 8000cda:	220c      	movs	r2, #12
 8000cdc:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cde:	4b08      	ldr	r3, [pc, #32]	; (8000d00 <MX_USART2_UART_Init+0x4c>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ce4:	4b06      	ldr	r3, [pc, #24]	; (8000d00 <MX_USART2_UART_Init+0x4c>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK)
 8000cea:	4805      	ldr	r0, [pc, #20]	; (8000d00 <MX_USART2_UART_Init+0x4c>)
 8000cec:	f002 fabc 	bl	8003268 <HAL_UART_Init>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d001      	beq.n	8000cfa <MX_USART2_UART_Init+0x46>
	{
		Error_Handler();
 8000cf6:	f000 f887 	bl	8000e08 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8000cfa:	bf00      	nop
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	20000164 	.word	0x20000164
 8000d04:	40004400 	.word	0x40004400

08000d08 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b08a      	sub	sp, #40	; 0x28
 8000d0c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d0e:	f107 0314 	add.w	r3, r7, #20
 8000d12:	2200      	movs	r2, #0
 8000d14:	601a      	str	r2, [r3, #0]
 8000d16:	605a      	str	r2, [r3, #4]
 8000d18:	609a      	str	r2, [r3, #8]
 8000d1a:	60da      	str	r2, [r3, #12]
 8000d1c:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000d1e:	2300      	movs	r3, #0
 8000d20:	613b      	str	r3, [r7, #16]
 8000d22:	4b36      	ldr	r3, [pc, #216]	; (8000dfc <MX_GPIO_Init+0xf4>)
 8000d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d26:	4a35      	ldr	r2, [pc, #212]	; (8000dfc <MX_GPIO_Init+0xf4>)
 8000d28:	f043 0304 	orr.w	r3, r3, #4
 8000d2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d2e:	4b33      	ldr	r3, [pc, #204]	; (8000dfc <MX_GPIO_Init+0xf4>)
 8000d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d32:	f003 0304 	and.w	r3, r3, #4
 8000d36:	613b      	str	r3, [r7, #16]
 8000d38:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	60fb      	str	r3, [r7, #12]
 8000d3e:	4b2f      	ldr	r3, [pc, #188]	; (8000dfc <MX_GPIO_Init+0xf4>)
 8000d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d42:	4a2e      	ldr	r2, [pc, #184]	; (8000dfc <MX_GPIO_Init+0xf4>)
 8000d44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d48:	6313      	str	r3, [r2, #48]	; 0x30
 8000d4a:	4b2c      	ldr	r3, [pc, #176]	; (8000dfc <MX_GPIO_Init+0xf4>)
 8000d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d52:	60fb      	str	r3, [r7, #12]
 8000d54:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000d56:	2300      	movs	r3, #0
 8000d58:	60bb      	str	r3, [r7, #8]
 8000d5a:	4b28      	ldr	r3, [pc, #160]	; (8000dfc <MX_GPIO_Init+0xf4>)
 8000d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5e:	4a27      	ldr	r2, [pc, #156]	; (8000dfc <MX_GPIO_Init+0xf4>)
 8000d60:	f043 0301 	orr.w	r3, r3, #1
 8000d64:	6313      	str	r3, [r2, #48]	; 0x30
 8000d66:	4b25      	ldr	r3, [pc, #148]	; (8000dfc <MX_GPIO_Init+0xf4>)
 8000d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6a:	f003 0301 	and.w	r3, r3, #1
 8000d6e:	60bb      	str	r3, [r7, #8]
 8000d70:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000d72:	2300      	movs	r3, #0
 8000d74:	607b      	str	r3, [r7, #4]
 8000d76:	4b21      	ldr	r3, [pc, #132]	; (8000dfc <MX_GPIO_Init+0xf4>)
 8000d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7a:	4a20      	ldr	r2, [pc, #128]	; (8000dfc <MX_GPIO_Init+0xf4>)
 8000d7c:	f043 0302 	orr.w	r3, r3, #2
 8000d80:	6313      	str	r3, [r2, #48]	; 0x30
 8000d82:	4b1e      	ldr	r3, [pc, #120]	; (8000dfc <MX_GPIO_Init+0xf4>)
 8000d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d86:	f003 0302 	and.w	r3, r3, #2
 8000d8a:	607b      	str	r3, [r7, #4]
 8000d8c:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, LD2_Pin|SEG_CLK_Pin|SEG_DIO_Pin, GPIO_PIN_RESET);
 8000d8e:	2200      	movs	r2, #0
 8000d90:	f44f 51c1 	mov.w	r1, #6176	; 0x1820
 8000d94:	481a      	ldr	r0, [pc, #104]	; (8000e00 <MX_GPIO_Init+0xf8>)
 8000d96:	f000 fd09 	bl	80017ac <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8000d9a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d9e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000da0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000da4:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da6:	2300      	movs	r3, #0
 8000da8:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000daa:	f107 0314 	add.w	r3, r7, #20
 8000dae:	4619      	mov	r1, r3
 8000db0:	4814      	ldr	r0, [pc, #80]	; (8000e04 <MX_GPIO_Init+0xfc>)
 8000db2:	f000 fb5f 	bl	8001474 <HAL_GPIO_Init>

	/*Configure GPIO pins : LD2_Pin SEG_CLK_Pin */
	GPIO_InitStruct.Pin = LD2_Pin|SEG_CLK_Pin;
 8000db6:	f44f 6302 	mov.w	r3, #2080	; 0x820
 8000dba:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dbc:	2301      	movs	r3, #1
 8000dbe:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dc8:	f107 0314 	add.w	r3, r7, #20
 8000dcc:	4619      	mov	r1, r3
 8000dce:	480c      	ldr	r0, [pc, #48]	; (8000e00 <MX_GPIO_Init+0xf8>)
 8000dd0:	f000 fb50 	bl	8001474 <HAL_GPIO_Init>

	/*Configure GPIO pin : SEG_DIO_Pin */
	GPIO_InitStruct.Pin = SEG_DIO_Pin;
 8000dd4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dd8:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000dda:	2311      	movs	r3, #17
 8000ddc:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dde:	2300      	movs	r3, #0
 8000de0:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de2:	2300      	movs	r3, #0
 8000de4:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(SEG_DIO_GPIO_Port, &GPIO_InitStruct);
 8000de6:	f107 0314 	add.w	r3, r7, #20
 8000dea:	4619      	mov	r1, r3
 8000dec:	4804      	ldr	r0, [pc, #16]	; (8000e00 <MX_GPIO_Init+0xf8>)
 8000dee:	f000 fb41 	bl	8001474 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000df2:	bf00      	nop
 8000df4:	3728      	adds	r7, #40	; 0x28
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	40023800 	.word	0x40023800
 8000e00:	40020000 	.word	0x40020000
 8000e04:	40020800 	.word	0x40020800

08000e08 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e0c:	b672      	cpsid	i
}
 8000e0e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000e10:	e7fe      	b.n	8000e10 <Error_Handler+0x8>
	...

08000e14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b082      	sub	sp, #8
 8000e18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	607b      	str	r3, [r7, #4]
 8000e1e:	4b10      	ldr	r3, [pc, #64]	; (8000e60 <HAL_MspInit+0x4c>)
 8000e20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e22:	4a0f      	ldr	r2, [pc, #60]	; (8000e60 <HAL_MspInit+0x4c>)
 8000e24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e28:	6453      	str	r3, [r2, #68]	; 0x44
 8000e2a:	4b0d      	ldr	r3, [pc, #52]	; (8000e60 <HAL_MspInit+0x4c>)
 8000e2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e32:	607b      	str	r3, [r7, #4]
 8000e34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e36:	2300      	movs	r3, #0
 8000e38:	603b      	str	r3, [r7, #0]
 8000e3a:	4b09      	ldr	r3, [pc, #36]	; (8000e60 <HAL_MspInit+0x4c>)
 8000e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e3e:	4a08      	ldr	r2, [pc, #32]	; (8000e60 <HAL_MspInit+0x4c>)
 8000e40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e44:	6413      	str	r3, [r2, #64]	; 0x40
 8000e46:	4b06      	ldr	r3, [pc, #24]	; (8000e60 <HAL_MspInit+0x4c>)
 8000e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e4e:	603b      	str	r3, [r7, #0]
 8000e50:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000e52:	2007      	movs	r0, #7
 8000e54:	f000 facc 	bl	80013f0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e58:	bf00      	nop
 8000e5a:	3708      	adds	r7, #8
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bd80      	pop	{r7, pc}
 8000e60:	40023800 	.word	0x40023800

08000e64 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b08a      	sub	sp, #40	; 0x28
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e6c:	f107 0314 	add.w	r3, r7, #20
 8000e70:	2200      	movs	r2, #0
 8000e72:	601a      	str	r2, [r3, #0]
 8000e74:	605a      	str	r2, [r3, #4]
 8000e76:	609a      	str	r2, [r3, #8]
 8000e78:	60da      	str	r2, [r3, #12]
 8000e7a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	4a19      	ldr	r2, [pc, #100]	; (8000ee8 <HAL_I2C_MspInit+0x84>)
 8000e82:	4293      	cmp	r3, r2
 8000e84:	d12c      	bne.n	8000ee0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e86:	2300      	movs	r3, #0
 8000e88:	613b      	str	r3, [r7, #16]
 8000e8a:	4b18      	ldr	r3, [pc, #96]	; (8000eec <HAL_I2C_MspInit+0x88>)
 8000e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8e:	4a17      	ldr	r2, [pc, #92]	; (8000eec <HAL_I2C_MspInit+0x88>)
 8000e90:	f043 0302 	orr.w	r3, r3, #2
 8000e94:	6313      	str	r3, [r2, #48]	; 0x30
 8000e96:	4b15      	ldr	r3, [pc, #84]	; (8000eec <HAL_I2C_MspInit+0x88>)
 8000e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9a:	f003 0302 	and.w	r3, r3, #2
 8000e9e:	613b      	str	r3, [r7, #16]
 8000ea0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000ea2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000ea6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ea8:	2312      	movs	r3, #18
 8000eaa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eac:	2300      	movs	r3, #0
 8000eae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eb0:	2303      	movs	r3, #3
 8000eb2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000eb4:	2304      	movs	r3, #4
 8000eb6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eb8:	f107 0314 	add.w	r3, r7, #20
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	480c      	ldr	r0, [pc, #48]	; (8000ef0 <HAL_I2C_MspInit+0x8c>)
 8000ec0:	f000 fad8 	bl	8001474 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	60fb      	str	r3, [r7, #12]
 8000ec8:	4b08      	ldr	r3, [pc, #32]	; (8000eec <HAL_I2C_MspInit+0x88>)
 8000eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ecc:	4a07      	ldr	r2, [pc, #28]	; (8000eec <HAL_I2C_MspInit+0x88>)
 8000ece:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ed2:	6413      	str	r3, [r2, #64]	; 0x40
 8000ed4:	4b05      	ldr	r3, [pc, #20]	; (8000eec <HAL_I2C_MspInit+0x88>)
 8000ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ed8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000edc:	60fb      	str	r3, [r7, #12]
 8000ede:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000ee0:	bf00      	nop
 8000ee2:	3728      	adds	r7, #40	; 0x28
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	40005400 	.word	0x40005400
 8000eec:	40023800 	.word	0x40023800
 8000ef0:	40020400 	.word	0x40020400

08000ef4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b084      	sub	sp, #16
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f04:	d116      	bne.n	8000f34 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f06:	2300      	movs	r3, #0
 8000f08:	60fb      	str	r3, [r7, #12]
 8000f0a:	4b1a      	ldr	r3, [pc, #104]	; (8000f74 <HAL_TIM_Base_MspInit+0x80>)
 8000f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f0e:	4a19      	ldr	r2, [pc, #100]	; (8000f74 <HAL_TIM_Base_MspInit+0x80>)
 8000f10:	f043 0301 	orr.w	r3, r3, #1
 8000f14:	6413      	str	r3, [r2, #64]	; 0x40
 8000f16:	4b17      	ldr	r3, [pc, #92]	; (8000f74 <HAL_TIM_Base_MspInit+0x80>)
 8000f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f1a:	f003 0301 	and.w	r3, r3, #1
 8000f1e:	60fb      	str	r3, [r7, #12]
 8000f20:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000f22:	2200      	movs	r2, #0
 8000f24:	2100      	movs	r1, #0
 8000f26:	201c      	movs	r0, #28
 8000f28:	f000 fa6d 	bl	8001406 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000f2c:	201c      	movs	r0, #28
 8000f2e:	f000 fa86 	bl	800143e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000f32:	e01a      	b.n	8000f6a <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM3)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	4a0f      	ldr	r2, [pc, #60]	; (8000f78 <HAL_TIM_Base_MspInit+0x84>)
 8000f3a:	4293      	cmp	r3, r2
 8000f3c:	d115      	bne.n	8000f6a <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000f3e:	2300      	movs	r3, #0
 8000f40:	60bb      	str	r3, [r7, #8]
 8000f42:	4b0c      	ldr	r3, [pc, #48]	; (8000f74 <HAL_TIM_Base_MspInit+0x80>)
 8000f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f46:	4a0b      	ldr	r2, [pc, #44]	; (8000f74 <HAL_TIM_Base_MspInit+0x80>)
 8000f48:	f043 0302 	orr.w	r3, r3, #2
 8000f4c:	6413      	str	r3, [r2, #64]	; 0x40
 8000f4e:	4b09      	ldr	r3, [pc, #36]	; (8000f74 <HAL_TIM_Base_MspInit+0x80>)
 8000f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f52:	f003 0302 	and.w	r3, r3, #2
 8000f56:	60bb      	str	r3, [r7, #8]
 8000f58:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	2100      	movs	r1, #0
 8000f5e:	201d      	movs	r0, #29
 8000f60:	f000 fa51 	bl	8001406 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000f64:	201d      	movs	r0, #29
 8000f66:	f000 fa6a 	bl	800143e <HAL_NVIC_EnableIRQ>
}
 8000f6a:	bf00      	nop
 8000f6c:	3710      	adds	r7, #16
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	40023800 	.word	0x40023800
 8000f78:	40000400 	.word	0x40000400

08000f7c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b08a      	sub	sp, #40	; 0x28
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f84:	f107 0314 	add.w	r3, r7, #20
 8000f88:	2200      	movs	r2, #0
 8000f8a:	601a      	str	r2, [r3, #0]
 8000f8c:	605a      	str	r2, [r3, #4]
 8000f8e:	609a      	str	r2, [r3, #8]
 8000f90:	60da      	str	r2, [r3, #12]
 8000f92:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	4a19      	ldr	r2, [pc, #100]	; (8001000 <HAL_UART_MspInit+0x84>)
 8000f9a:	4293      	cmp	r3, r2
 8000f9c:	d12b      	bne.n	8000ff6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	613b      	str	r3, [r7, #16]
 8000fa2:	4b18      	ldr	r3, [pc, #96]	; (8001004 <HAL_UART_MspInit+0x88>)
 8000fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fa6:	4a17      	ldr	r2, [pc, #92]	; (8001004 <HAL_UART_MspInit+0x88>)
 8000fa8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fac:	6413      	str	r3, [r2, #64]	; 0x40
 8000fae:	4b15      	ldr	r3, [pc, #84]	; (8001004 <HAL_UART_MspInit+0x88>)
 8000fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fb6:	613b      	str	r3, [r7, #16]
 8000fb8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fba:	2300      	movs	r3, #0
 8000fbc:	60fb      	str	r3, [r7, #12]
 8000fbe:	4b11      	ldr	r3, [pc, #68]	; (8001004 <HAL_UART_MspInit+0x88>)
 8000fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc2:	4a10      	ldr	r2, [pc, #64]	; (8001004 <HAL_UART_MspInit+0x88>)
 8000fc4:	f043 0301 	orr.w	r3, r3, #1
 8000fc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fca:	4b0e      	ldr	r3, [pc, #56]	; (8001004 <HAL_UART_MspInit+0x88>)
 8000fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fce:	f003 0301 	and.w	r3, r3, #1
 8000fd2:	60fb      	str	r3, [r7, #12]
 8000fd4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000fd6:	230c      	movs	r3, #12
 8000fd8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fda:	2302      	movs	r3, #2
 8000fdc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fe2:	2303      	movs	r3, #3
 8000fe4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000fe6:	2307      	movs	r3, #7
 8000fe8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fea:	f107 0314 	add.w	r3, r7, #20
 8000fee:	4619      	mov	r1, r3
 8000ff0:	4805      	ldr	r0, [pc, #20]	; (8001008 <HAL_UART_MspInit+0x8c>)
 8000ff2:	f000 fa3f 	bl	8001474 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000ff6:	bf00      	nop
 8000ff8:	3728      	adds	r7, #40	; 0x28
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	40004400 	.word	0x40004400
 8001004:	40023800 	.word	0x40023800
 8001008:	40020000 	.word	0x40020000

0800100c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001010:	e7fe      	b.n	8001010 <NMI_Handler+0x4>

08001012 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001012:	b480      	push	{r7}
 8001014:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001016:	e7fe      	b.n	8001016 <HardFault_Handler+0x4>

08001018 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800101c:	e7fe      	b.n	800101c <MemManage_Handler+0x4>

0800101e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800101e:	b480      	push	{r7}
 8001020:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001022:	e7fe      	b.n	8001022 <BusFault_Handler+0x4>

08001024 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001028:	e7fe      	b.n	8001028 <UsageFault_Handler+0x4>

0800102a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800102a:	b480      	push	{r7}
 800102c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800102e:	bf00      	nop
 8001030:	46bd      	mov	sp, r7
 8001032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001036:	4770      	bx	lr

08001038 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800103c:	bf00      	nop
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr

08001046 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001046:	b480      	push	{r7}
 8001048:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800104a:	bf00      	nop
 800104c:	46bd      	mov	sp, r7
 800104e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001052:	4770      	bx	lr

08001054 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001058:	f000 f8da 	bl	8001210 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800105c:	bf00      	nop
 800105e:	bd80      	pop	{r7, pc}

08001060 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001064:	4802      	ldr	r0, [pc, #8]	; (8001070 <TIM2_IRQHandler+0x10>)
 8001066:	f001 fd6b 	bl	8002b40 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800106a:	bf00      	nop
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	200000d4 	.word	0x200000d4

08001074 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001078:	4802      	ldr	r0, [pc, #8]	; (8001084 <TIM3_IRQHandler+0x10>)
 800107a:	f001 fd61 	bl	8002b40 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800107e:	bf00      	nop
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	2000011c 	.word	0x2000011c

08001088 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b086      	sub	sp, #24
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001090:	4a14      	ldr	r2, [pc, #80]	; (80010e4 <_sbrk+0x5c>)
 8001092:	4b15      	ldr	r3, [pc, #84]	; (80010e8 <_sbrk+0x60>)
 8001094:	1ad3      	subs	r3, r2, r3
 8001096:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001098:	697b      	ldr	r3, [r7, #20]
 800109a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800109c:	4b13      	ldr	r3, [pc, #76]	; (80010ec <_sbrk+0x64>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d102      	bne.n	80010aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010a4:	4b11      	ldr	r3, [pc, #68]	; (80010ec <_sbrk+0x64>)
 80010a6:	4a12      	ldr	r2, [pc, #72]	; (80010f0 <_sbrk+0x68>)
 80010a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010aa:	4b10      	ldr	r3, [pc, #64]	; (80010ec <_sbrk+0x64>)
 80010ac:	681a      	ldr	r2, [r3, #0]
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	4413      	add	r3, r2
 80010b2:	693a      	ldr	r2, [r7, #16]
 80010b4:	429a      	cmp	r2, r3
 80010b6:	d207      	bcs.n	80010c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010b8:	f002 fbd4 	bl	8003864 <__errno>
 80010bc:	4603      	mov	r3, r0
 80010be:	220c      	movs	r2, #12
 80010c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80010c6:	e009      	b.n	80010dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010c8:	4b08      	ldr	r3, [pc, #32]	; (80010ec <_sbrk+0x64>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010ce:	4b07      	ldr	r3, [pc, #28]	; (80010ec <_sbrk+0x64>)
 80010d0:	681a      	ldr	r2, [r3, #0]
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	4413      	add	r3, r2
 80010d6:	4a05      	ldr	r2, [pc, #20]	; (80010ec <_sbrk+0x64>)
 80010d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010da:	68fb      	ldr	r3, [r7, #12]
}
 80010dc:	4618      	mov	r0, r3
 80010de:	3718      	adds	r7, #24
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	20020000 	.word	0x20020000
 80010e8:	00000400 	.word	0x00000400
 80010ec:	200001ac 	.word	0x200001ac
 80010f0:	20000300 	.word	0x20000300

080010f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010f8:	4b06      	ldr	r3, [pc, #24]	; (8001114 <SystemInit+0x20>)
 80010fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010fe:	4a05      	ldr	r2, [pc, #20]	; (8001114 <SystemInit+0x20>)
 8001100:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001104:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001108:	bf00      	nop
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr
 8001112:	bf00      	nop
 8001114:	e000ed00 	.word	0xe000ed00

08001118 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001118:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001150 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800111c:	480d      	ldr	r0, [pc, #52]	; (8001154 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800111e:	490e      	ldr	r1, [pc, #56]	; (8001158 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001120:	4a0e      	ldr	r2, [pc, #56]	; (800115c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001122:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001124:	e002      	b.n	800112c <LoopCopyDataInit>

08001126 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001126:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001128:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800112a:	3304      	adds	r3, #4

0800112c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800112c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800112e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001130:	d3f9      	bcc.n	8001126 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001132:	4a0b      	ldr	r2, [pc, #44]	; (8001160 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001134:	4c0b      	ldr	r4, [pc, #44]	; (8001164 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001136:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001138:	e001      	b.n	800113e <LoopFillZerobss>

0800113a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800113a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800113c:	3204      	adds	r2, #4

0800113e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800113e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001140:	d3fb      	bcc.n	800113a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001142:	f7ff ffd7 	bl	80010f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001146:	f002 fb93 	bl	8003870 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800114a:	f7ff fc39 	bl	80009c0 <main>
  bx  lr    
 800114e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001150:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001154:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001158:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 800115c:	080041e0 	.word	0x080041e0
  ldr r2, =_sbss
 8001160:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001164:	200002fc 	.word	0x200002fc

08001168 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001168:	e7fe      	b.n	8001168 <ADC_IRQHandler>
	...

0800116c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001170:	4b0e      	ldr	r3, [pc, #56]	; (80011ac <HAL_Init+0x40>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	4a0d      	ldr	r2, [pc, #52]	; (80011ac <HAL_Init+0x40>)
 8001176:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800117a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800117c:	4b0b      	ldr	r3, [pc, #44]	; (80011ac <HAL_Init+0x40>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	4a0a      	ldr	r2, [pc, #40]	; (80011ac <HAL_Init+0x40>)
 8001182:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001186:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001188:	4b08      	ldr	r3, [pc, #32]	; (80011ac <HAL_Init+0x40>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4a07      	ldr	r2, [pc, #28]	; (80011ac <HAL_Init+0x40>)
 800118e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001192:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001194:	2003      	movs	r0, #3
 8001196:	f000 f92b 	bl	80013f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800119a:	2000      	movs	r0, #0
 800119c:	f000 f808 	bl	80011b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011a0:	f7ff fe38 	bl	8000e14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011a4:	2300      	movs	r3, #0
}
 80011a6:	4618      	mov	r0, r3
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	40023c00 	.word	0x40023c00

080011b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011b8:	4b12      	ldr	r3, [pc, #72]	; (8001204 <HAL_InitTick+0x54>)
 80011ba:	681a      	ldr	r2, [r3, #0]
 80011bc:	4b12      	ldr	r3, [pc, #72]	; (8001208 <HAL_InitTick+0x58>)
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	4619      	mov	r1, r3
 80011c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80011ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80011ce:	4618      	mov	r0, r3
 80011d0:	f000 f943 	bl	800145a <HAL_SYSTICK_Config>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d001      	beq.n	80011de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011da:	2301      	movs	r3, #1
 80011dc:	e00e      	b.n	80011fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	2b0f      	cmp	r3, #15
 80011e2:	d80a      	bhi.n	80011fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011e4:	2200      	movs	r2, #0
 80011e6:	6879      	ldr	r1, [r7, #4]
 80011e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80011ec:	f000 f90b 	bl	8001406 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011f0:	4a06      	ldr	r2, [pc, #24]	; (800120c <HAL_InitTick+0x5c>)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011f6:	2300      	movs	r3, #0
 80011f8:	e000      	b.n	80011fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011fa:	2301      	movs	r3, #1
}
 80011fc:	4618      	mov	r0, r3
 80011fe:	3708      	adds	r7, #8
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	20000004 	.word	0x20000004
 8001208:	2000000c 	.word	0x2000000c
 800120c:	20000008 	.word	0x20000008

08001210 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001214:	4b06      	ldr	r3, [pc, #24]	; (8001230 <HAL_IncTick+0x20>)
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	461a      	mov	r2, r3
 800121a:	4b06      	ldr	r3, [pc, #24]	; (8001234 <HAL_IncTick+0x24>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	4413      	add	r3, r2
 8001220:	4a04      	ldr	r2, [pc, #16]	; (8001234 <HAL_IncTick+0x24>)
 8001222:	6013      	str	r3, [r2, #0]
}
 8001224:	bf00      	nop
 8001226:	46bd      	mov	sp, r7
 8001228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122c:	4770      	bx	lr
 800122e:	bf00      	nop
 8001230:	2000000c 	.word	0x2000000c
 8001234:	200001b0 	.word	0x200001b0

08001238 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0
  return uwTick;
 800123c:	4b03      	ldr	r3, [pc, #12]	; (800124c <HAL_GetTick+0x14>)
 800123e:	681b      	ldr	r3, [r3, #0]
}
 8001240:	4618      	mov	r0, r3
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr
 800124a:	bf00      	nop
 800124c:	200001b0 	.word	0x200001b0

08001250 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001250:	b480      	push	{r7}
 8001252:	b085      	sub	sp, #20
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	f003 0307 	and.w	r3, r3, #7
 800125e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001260:	4b0c      	ldr	r3, [pc, #48]	; (8001294 <__NVIC_SetPriorityGrouping+0x44>)
 8001262:	68db      	ldr	r3, [r3, #12]
 8001264:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001266:	68ba      	ldr	r2, [r7, #8]
 8001268:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800126c:	4013      	ands	r3, r2
 800126e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001274:	68bb      	ldr	r3, [r7, #8]
 8001276:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001278:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800127c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001280:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001282:	4a04      	ldr	r2, [pc, #16]	; (8001294 <__NVIC_SetPriorityGrouping+0x44>)
 8001284:	68bb      	ldr	r3, [r7, #8]
 8001286:	60d3      	str	r3, [r2, #12]
}
 8001288:	bf00      	nop
 800128a:	3714      	adds	r7, #20
 800128c:	46bd      	mov	sp, r7
 800128e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001292:	4770      	bx	lr
 8001294:	e000ed00 	.word	0xe000ed00

08001298 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800129c:	4b04      	ldr	r3, [pc, #16]	; (80012b0 <__NVIC_GetPriorityGrouping+0x18>)
 800129e:	68db      	ldr	r3, [r3, #12]
 80012a0:	0a1b      	lsrs	r3, r3, #8
 80012a2:	f003 0307 	and.w	r3, r3, #7
}
 80012a6:	4618      	mov	r0, r3
 80012a8:	46bd      	mov	sp, r7
 80012aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ae:	4770      	bx	lr
 80012b0:	e000ed00 	.word	0xe000ed00

080012b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012b4:	b480      	push	{r7}
 80012b6:	b083      	sub	sp, #12
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	4603      	mov	r3, r0
 80012bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	db0b      	blt.n	80012de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012c6:	79fb      	ldrb	r3, [r7, #7]
 80012c8:	f003 021f 	and.w	r2, r3, #31
 80012cc:	4907      	ldr	r1, [pc, #28]	; (80012ec <__NVIC_EnableIRQ+0x38>)
 80012ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012d2:	095b      	lsrs	r3, r3, #5
 80012d4:	2001      	movs	r0, #1
 80012d6:	fa00 f202 	lsl.w	r2, r0, r2
 80012da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80012de:	bf00      	nop
 80012e0:	370c      	adds	r7, #12
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr
 80012ea:	bf00      	nop
 80012ec:	e000e100 	.word	0xe000e100

080012f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b083      	sub	sp, #12
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	4603      	mov	r3, r0
 80012f8:	6039      	str	r1, [r7, #0]
 80012fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001300:	2b00      	cmp	r3, #0
 8001302:	db0a      	blt.n	800131a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	b2da      	uxtb	r2, r3
 8001308:	490c      	ldr	r1, [pc, #48]	; (800133c <__NVIC_SetPriority+0x4c>)
 800130a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800130e:	0112      	lsls	r2, r2, #4
 8001310:	b2d2      	uxtb	r2, r2
 8001312:	440b      	add	r3, r1
 8001314:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001318:	e00a      	b.n	8001330 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	b2da      	uxtb	r2, r3
 800131e:	4908      	ldr	r1, [pc, #32]	; (8001340 <__NVIC_SetPriority+0x50>)
 8001320:	79fb      	ldrb	r3, [r7, #7]
 8001322:	f003 030f 	and.w	r3, r3, #15
 8001326:	3b04      	subs	r3, #4
 8001328:	0112      	lsls	r2, r2, #4
 800132a:	b2d2      	uxtb	r2, r2
 800132c:	440b      	add	r3, r1
 800132e:	761a      	strb	r2, [r3, #24]
}
 8001330:	bf00      	nop
 8001332:	370c      	adds	r7, #12
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr
 800133c:	e000e100 	.word	0xe000e100
 8001340:	e000ed00 	.word	0xe000ed00

08001344 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001344:	b480      	push	{r7}
 8001346:	b089      	sub	sp, #36	; 0x24
 8001348:	af00      	add	r7, sp, #0
 800134a:	60f8      	str	r0, [r7, #12]
 800134c:	60b9      	str	r1, [r7, #8]
 800134e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	f003 0307 	and.w	r3, r3, #7
 8001356:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001358:	69fb      	ldr	r3, [r7, #28]
 800135a:	f1c3 0307 	rsb	r3, r3, #7
 800135e:	2b04      	cmp	r3, #4
 8001360:	bf28      	it	cs
 8001362:	2304      	movcs	r3, #4
 8001364:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001366:	69fb      	ldr	r3, [r7, #28]
 8001368:	3304      	adds	r3, #4
 800136a:	2b06      	cmp	r3, #6
 800136c:	d902      	bls.n	8001374 <NVIC_EncodePriority+0x30>
 800136e:	69fb      	ldr	r3, [r7, #28]
 8001370:	3b03      	subs	r3, #3
 8001372:	e000      	b.n	8001376 <NVIC_EncodePriority+0x32>
 8001374:	2300      	movs	r3, #0
 8001376:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001378:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800137c:	69bb      	ldr	r3, [r7, #24]
 800137e:	fa02 f303 	lsl.w	r3, r2, r3
 8001382:	43da      	mvns	r2, r3
 8001384:	68bb      	ldr	r3, [r7, #8]
 8001386:	401a      	ands	r2, r3
 8001388:	697b      	ldr	r3, [r7, #20]
 800138a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800138c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001390:	697b      	ldr	r3, [r7, #20]
 8001392:	fa01 f303 	lsl.w	r3, r1, r3
 8001396:	43d9      	mvns	r1, r3
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800139c:	4313      	orrs	r3, r2
         );
}
 800139e:	4618      	mov	r0, r3
 80013a0:	3724      	adds	r7, #36	; 0x24
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr
	...

080013ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b082      	sub	sp, #8
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	3b01      	subs	r3, #1
 80013b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013bc:	d301      	bcc.n	80013c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013be:	2301      	movs	r3, #1
 80013c0:	e00f      	b.n	80013e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013c2:	4a0a      	ldr	r2, [pc, #40]	; (80013ec <SysTick_Config+0x40>)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	3b01      	subs	r3, #1
 80013c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013ca:	210f      	movs	r1, #15
 80013cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80013d0:	f7ff ff8e 	bl	80012f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013d4:	4b05      	ldr	r3, [pc, #20]	; (80013ec <SysTick_Config+0x40>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013da:	4b04      	ldr	r3, [pc, #16]	; (80013ec <SysTick_Config+0x40>)
 80013dc:	2207      	movs	r2, #7
 80013de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013e0:	2300      	movs	r3, #0
}
 80013e2:	4618      	mov	r0, r3
 80013e4:	3708      	adds	r7, #8
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	e000e010 	.word	0xe000e010

080013f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b082      	sub	sp, #8
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013f8:	6878      	ldr	r0, [r7, #4]
 80013fa:	f7ff ff29 	bl	8001250 <__NVIC_SetPriorityGrouping>
}
 80013fe:	bf00      	nop
 8001400:	3708      	adds	r7, #8
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}

08001406 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001406:	b580      	push	{r7, lr}
 8001408:	b086      	sub	sp, #24
 800140a:	af00      	add	r7, sp, #0
 800140c:	4603      	mov	r3, r0
 800140e:	60b9      	str	r1, [r7, #8]
 8001410:	607a      	str	r2, [r7, #4]
 8001412:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001414:	2300      	movs	r3, #0
 8001416:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001418:	f7ff ff3e 	bl	8001298 <__NVIC_GetPriorityGrouping>
 800141c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800141e:	687a      	ldr	r2, [r7, #4]
 8001420:	68b9      	ldr	r1, [r7, #8]
 8001422:	6978      	ldr	r0, [r7, #20]
 8001424:	f7ff ff8e 	bl	8001344 <NVIC_EncodePriority>
 8001428:	4602      	mov	r2, r0
 800142a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800142e:	4611      	mov	r1, r2
 8001430:	4618      	mov	r0, r3
 8001432:	f7ff ff5d 	bl	80012f0 <__NVIC_SetPriority>
}
 8001436:	bf00      	nop
 8001438:	3718      	adds	r7, #24
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}

0800143e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800143e:	b580      	push	{r7, lr}
 8001440:	b082      	sub	sp, #8
 8001442:	af00      	add	r7, sp, #0
 8001444:	4603      	mov	r3, r0
 8001446:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001448:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800144c:	4618      	mov	r0, r3
 800144e:	f7ff ff31 	bl	80012b4 <__NVIC_EnableIRQ>
}
 8001452:	bf00      	nop
 8001454:	3708      	adds	r7, #8
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}

0800145a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800145a:	b580      	push	{r7, lr}
 800145c:	b082      	sub	sp, #8
 800145e:	af00      	add	r7, sp, #0
 8001460:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001462:	6878      	ldr	r0, [r7, #4]
 8001464:	f7ff ffa2 	bl	80013ac <SysTick_Config>
 8001468:	4603      	mov	r3, r0
}
 800146a:	4618      	mov	r0, r3
 800146c:	3708      	adds	r7, #8
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
	...

08001474 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001474:	b480      	push	{r7}
 8001476:	b089      	sub	sp, #36	; 0x24
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
 800147c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800147e:	2300      	movs	r3, #0
 8001480:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001482:	2300      	movs	r3, #0
 8001484:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001486:	2300      	movs	r3, #0
 8001488:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800148a:	2300      	movs	r3, #0
 800148c:	61fb      	str	r3, [r7, #28]
 800148e:	e159      	b.n	8001744 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001490:	2201      	movs	r2, #1
 8001492:	69fb      	ldr	r3, [r7, #28]
 8001494:	fa02 f303 	lsl.w	r3, r2, r3
 8001498:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	697a      	ldr	r2, [r7, #20]
 80014a0:	4013      	ands	r3, r2
 80014a2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80014a4:	693a      	ldr	r2, [r7, #16]
 80014a6:	697b      	ldr	r3, [r7, #20]
 80014a8:	429a      	cmp	r2, r3
 80014aa:	f040 8148 	bne.w	800173e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	f003 0303 	and.w	r3, r3, #3
 80014b6:	2b01      	cmp	r3, #1
 80014b8:	d005      	beq.n	80014c6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80014c2:	2b02      	cmp	r3, #2
 80014c4:	d130      	bne.n	8001528 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	689b      	ldr	r3, [r3, #8]
 80014ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80014cc:	69fb      	ldr	r3, [r7, #28]
 80014ce:	005b      	lsls	r3, r3, #1
 80014d0:	2203      	movs	r2, #3
 80014d2:	fa02 f303 	lsl.w	r3, r2, r3
 80014d6:	43db      	mvns	r3, r3
 80014d8:	69ba      	ldr	r2, [r7, #24]
 80014da:	4013      	ands	r3, r2
 80014dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	68da      	ldr	r2, [r3, #12]
 80014e2:	69fb      	ldr	r3, [r7, #28]
 80014e4:	005b      	lsls	r3, r3, #1
 80014e6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ea:	69ba      	ldr	r2, [r7, #24]
 80014ec:	4313      	orrs	r3, r2
 80014ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	69ba      	ldr	r2, [r7, #24]
 80014f4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80014fc:	2201      	movs	r2, #1
 80014fe:	69fb      	ldr	r3, [r7, #28]
 8001500:	fa02 f303 	lsl.w	r3, r2, r3
 8001504:	43db      	mvns	r3, r3
 8001506:	69ba      	ldr	r2, [r7, #24]
 8001508:	4013      	ands	r3, r2
 800150a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	091b      	lsrs	r3, r3, #4
 8001512:	f003 0201 	and.w	r2, r3, #1
 8001516:	69fb      	ldr	r3, [r7, #28]
 8001518:	fa02 f303 	lsl.w	r3, r2, r3
 800151c:	69ba      	ldr	r2, [r7, #24]
 800151e:	4313      	orrs	r3, r2
 8001520:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	69ba      	ldr	r2, [r7, #24]
 8001526:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	f003 0303 	and.w	r3, r3, #3
 8001530:	2b03      	cmp	r3, #3
 8001532:	d017      	beq.n	8001564 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	68db      	ldr	r3, [r3, #12]
 8001538:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800153a:	69fb      	ldr	r3, [r7, #28]
 800153c:	005b      	lsls	r3, r3, #1
 800153e:	2203      	movs	r2, #3
 8001540:	fa02 f303 	lsl.w	r3, r2, r3
 8001544:	43db      	mvns	r3, r3
 8001546:	69ba      	ldr	r2, [r7, #24]
 8001548:	4013      	ands	r3, r2
 800154a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	689a      	ldr	r2, [r3, #8]
 8001550:	69fb      	ldr	r3, [r7, #28]
 8001552:	005b      	lsls	r3, r3, #1
 8001554:	fa02 f303 	lsl.w	r3, r2, r3
 8001558:	69ba      	ldr	r2, [r7, #24]
 800155a:	4313      	orrs	r3, r2
 800155c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	69ba      	ldr	r2, [r7, #24]
 8001562:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	f003 0303 	and.w	r3, r3, #3
 800156c:	2b02      	cmp	r3, #2
 800156e:	d123      	bne.n	80015b8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001570:	69fb      	ldr	r3, [r7, #28]
 8001572:	08da      	lsrs	r2, r3, #3
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	3208      	adds	r2, #8
 8001578:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800157c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800157e:	69fb      	ldr	r3, [r7, #28]
 8001580:	f003 0307 	and.w	r3, r3, #7
 8001584:	009b      	lsls	r3, r3, #2
 8001586:	220f      	movs	r2, #15
 8001588:	fa02 f303 	lsl.w	r3, r2, r3
 800158c:	43db      	mvns	r3, r3
 800158e:	69ba      	ldr	r2, [r7, #24]
 8001590:	4013      	ands	r3, r2
 8001592:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	691a      	ldr	r2, [r3, #16]
 8001598:	69fb      	ldr	r3, [r7, #28]
 800159a:	f003 0307 	and.w	r3, r3, #7
 800159e:	009b      	lsls	r3, r3, #2
 80015a0:	fa02 f303 	lsl.w	r3, r2, r3
 80015a4:	69ba      	ldr	r2, [r7, #24]
 80015a6:	4313      	orrs	r3, r2
 80015a8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80015aa:	69fb      	ldr	r3, [r7, #28]
 80015ac:	08da      	lsrs	r2, r3, #3
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	3208      	adds	r2, #8
 80015b2:	69b9      	ldr	r1, [r7, #24]
 80015b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80015be:	69fb      	ldr	r3, [r7, #28]
 80015c0:	005b      	lsls	r3, r3, #1
 80015c2:	2203      	movs	r2, #3
 80015c4:	fa02 f303 	lsl.w	r3, r2, r3
 80015c8:	43db      	mvns	r3, r3
 80015ca:	69ba      	ldr	r2, [r7, #24]
 80015cc:	4013      	ands	r3, r2
 80015ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	f003 0203 	and.w	r2, r3, #3
 80015d8:	69fb      	ldr	r3, [r7, #28]
 80015da:	005b      	lsls	r3, r3, #1
 80015dc:	fa02 f303 	lsl.w	r3, r2, r3
 80015e0:	69ba      	ldr	r2, [r7, #24]
 80015e2:	4313      	orrs	r3, r2
 80015e4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	69ba      	ldr	r2, [r7, #24]
 80015ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	f000 80a2 	beq.w	800173e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015fa:	2300      	movs	r3, #0
 80015fc:	60fb      	str	r3, [r7, #12]
 80015fe:	4b57      	ldr	r3, [pc, #348]	; (800175c <HAL_GPIO_Init+0x2e8>)
 8001600:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001602:	4a56      	ldr	r2, [pc, #344]	; (800175c <HAL_GPIO_Init+0x2e8>)
 8001604:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001608:	6453      	str	r3, [r2, #68]	; 0x44
 800160a:	4b54      	ldr	r3, [pc, #336]	; (800175c <HAL_GPIO_Init+0x2e8>)
 800160c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800160e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001612:	60fb      	str	r3, [r7, #12]
 8001614:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001616:	4a52      	ldr	r2, [pc, #328]	; (8001760 <HAL_GPIO_Init+0x2ec>)
 8001618:	69fb      	ldr	r3, [r7, #28]
 800161a:	089b      	lsrs	r3, r3, #2
 800161c:	3302      	adds	r3, #2
 800161e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001622:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001624:	69fb      	ldr	r3, [r7, #28]
 8001626:	f003 0303 	and.w	r3, r3, #3
 800162a:	009b      	lsls	r3, r3, #2
 800162c:	220f      	movs	r2, #15
 800162e:	fa02 f303 	lsl.w	r3, r2, r3
 8001632:	43db      	mvns	r3, r3
 8001634:	69ba      	ldr	r2, [r7, #24]
 8001636:	4013      	ands	r3, r2
 8001638:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	4a49      	ldr	r2, [pc, #292]	; (8001764 <HAL_GPIO_Init+0x2f0>)
 800163e:	4293      	cmp	r3, r2
 8001640:	d019      	beq.n	8001676 <HAL_GPIO_Init+0x202>
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	4a48      	ldr	r2, [pc, #288]	; (8001768 <HAL_GPIO_Init+0x2f4>)
 8001646:	4293      	cmp	r3, r2
 8001648:	d013      	beq.n	8001672 <HAL_GPIO_Init+0x1fe>
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	4a47      	ldr	r2, [pc, #284]	; (800176c <HAL_GPIO_Init+0x2f8>)
 800164e:	4293      	cmp	r3, r2
 8001650:	d00d      	beq.n	800166e <HAL_GPIO_Init+0x1fa>
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	4a46      	ldr	r2, [pc, #280]	; (8001770 <HAL_GPIO_Init+0x2fc>)
 8001656:	4293      	cmp	r3, r2
 8001658:	d007      	beq.n	800166a <HAL_GPIO_Init+0x1f6>
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	4a45      	ldr	r2, [pc, #276]	; (8001774 <HAL_GPIO_Init+0x300>)
 800165e:	4293      	cmp	r3, r2
 8001660:	d101      	bne.n	8001666 <HAL_GPIO_Init+0x1f2>
 8001662:	2304      	movs	r3, #4
 8001664:	e008      	b.n	8001678 <HAL_GPIO_Init+0x204>
 8001666:	2307      	movs	r3, #7
 8001668:	e006      	b.n	8001678 <HAL_GPIO_Init+0x204>
 800166a:	2303      	movs	r3, #3
 800166c:	e004      	b.n	8001678 <HAL_GPIO_Init+0x204>
 800166e:	2302      	movs	r3, #2
 8001670:	e002      	b.n	8001678 <HAL_GPIO_Init+0x204>
 8001672:	2301      	movs	r3, #1
 8001674:	e000      	b.n	8001678 <HAL_GPIO_Init+0x204>
 8001676:	2300      	movs	r3, #0
 8001678:	69fa      	ldr	r2, [r7, #28]
 800167a:	f002 0203 	and.w	r2, r2, #3
 800167e:	0092      	lsls	r2, r2, #2
 8001680:	4093      	lsls	r3, r2
 8001682:	69ba      	ldr	r2, [r7, #24]
 8001684:	4313      	orrs	r3, r2
 8001686:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001688:	4935      	ldr	r1, [pc, #212]	; (8001760 <HAL_GPIO_Init+0x2ec>)
 800168a:	69fb      	ldr	r3, [r7, #28]
 800168c:	089b      	lsrs	r3, r3, #2
 800168e:	3302      	adds	r3, #2
 8001690:	69ba      	ldr	r2, [r7, #24]
 8001692:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001696:	4b38      	ldr	r3, [pc, #224]	; (8001778 <HAL_GPIO_Init+0x304>)
 8001698:	689b      	ldr	r3, [r3, #8]
 800169a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800169c:	693b      	ldr	r3, [r7, #16]
 800169e:	43db      	mvns	r3, r3
 80016a0:	69ba      	ldr	r2, [r7, #24]
 80016a2:	4013      	ands	r3, r2
 80016a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d003      	beq.n	80016ba <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80016b2:	69ba      	ldr	r2, [r7, #24]
 80016b4:	693b      	ldr	r3, [r7, #16]
 80016b6:	4313      	orrs	r3, r2
 80016b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80016ba:	4a2f      	ldr	r2, [pc, #188]	; (8001778 <HAL_GPIO_Init+0x304>)
 80016bc:	69bb      	ldr	r3, [r7, #24]
 80016be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80016c0:	4b2d      	ldr	r3, [pc, #180]	; (8001778 <HAL_GPIO_Init+0x304>)
 80016c2:	68db      	ldr	r3, [r3, #12]
 80016c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016c6:	693b      	ldr	r3, [r7, #16]
 80016c8:	43db      	mvns	r3, r3
 80016ca:	69ba      	ldr	r2, [r7, #24]
 80016cc:	4013      	ands	r3, r2
 80016ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d003      	beq.n	80016e4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80016dc:	69ba      	ldr	r2, [r7, #24]
 80016de:	693b      	ldr	r3, [r7, #16]
 80016e0:	4313      	orrs	r3, r2
 80016e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80016e4:	4a24      	ldr	r2, [pc, #144]	; (8001778 <HAL_GPIO_Init+0x304>)
 80016e6:	69bb      	ldr	r3, [r7, #24]
 80016e8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80016ea:	4b23      	ldr	r3, [pc, #140]	; (8001778 <HAL_GPIO_Init+0x304>)
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016f0:	693b      	ldr	r3, [r7, #16]
 80016f2:	43db      	mvns	r3, r3
 80016f4:	69ba      	ldr	r2, [r7, #24]
 80016f6:	4013      	ands	r3, r2
 80016f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001702:	2b00      	cmp	r3, #0
 8001704:	d003      	beq.n	800170e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001706:	69ba      	ldr	r2, [r7, #24]
 8001708:	693b      	ldr	r3, [r7, #16]
 800170a:	4313      	orrs	r3, r2
 800170c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800170e:	4a1a      	ldr	r2, [pc, #104]	; (8001778 <HAL_GPIO_Init+0x304>)
 8001710:	69bb      	ldr	r3, [r7, #24]
 8001712:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001714:	4b18      	ldr	r3, [pc, #96]	; (8001778 <HAL_GPIO_Init+0x304>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800171a:	693b      	ldr	r3, [r7, #16]
 800171c:	43db      	mvns	r3, r3
 800171e:	69ba      	ldr	r2, [r7, #24]
 8001720:	4013      	ands	r3, r2
 8001722:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800172c:	2b00      	cmp	r3, #0
 800172e:	d003      	beq.n	8001738 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001730:	69ba      	ldr	r2, [r7, #24]
 8001732:	693b      	ldr	r3, [r7, #16]
 8001734:	4313      	orrs	r3, r2
 8001736:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001738:	4a0f      	ldr	r2, [pc, #60]	; (8001778 <HAL_GPIO_Init+0x304>)
 800173a:	69bb      	ldr	r3, [r7, #24]
 800173c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800173e:	69fb      	ldr	r3, [r7, #28]
 8001740:	3301      	adds	r3, #1
 8001742:	61fb      	str	r3, [r7, #28]
 8001744:	69fb      	ldr	r3, [r7, #28]
 8001746:	2b0f      	cmp	r3, #15
 8001748:	f67f aea2 	bls.w	8001490 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800174c:	bf00      	nop
 800174e:	bf00      	nop
 8001750:	3724      	adds	r7, #36	; 0x24
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr
 800175a:	bf00      	nop
 800175c:	40023800 	.word	0x40023800
 8001760:	40013800 	.word	0x40013800
 8001764:	40020000 	.word	0x40020000
 8001768:	40020400 	.word	0x40020400
 800176c:	40020800 	.word	0x40020800
 8001770:	40020c00 	.word	0x40020c00
 8001774:	40021000 	.word	0x40021000
 8001778:	40013c00 	.word	0x40013c00

0800177c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800177c:	b480      	push	{r7}
 800177e:	b085      	sub	sp, #20
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
 8001784:	460b      	mov	r3, r1
 8001786:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	691a      	ldr	r2, [r3, #16]
 800178c:	887b      	ldrh	r3, [r7, #2]
 800178e:	4013      	ands	r3, r2
 8001790:	2b00      	cmp	r3, #0
 8001792:	d002      	beq.n	800179a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001794:	2301      	movs	r3, #1
 8001796:	73fb      	strb	r3, [r7, #15]
 8001798:	e001      	b.n	800179e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800179a:	2300      	movs	r3, #0
 800179c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800179e:	7bfb      	ldrb	r3, [r7, #15]
}
 80017a0:	4618      	mov	r0, r3
 80017a2:	3714      	adds	r7, #20
 80017a4:	46bd      	mov	sp, r7
 80017a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017aa:	4770      	bx	lr

080017ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017ac:	b480      	push	{r7}
 80017ae:	b083      	sub	sp, #12
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
 80017b4:	460b      	mov	r3, r1
 80017b6:	807b      	strh	r3, [r7, #2]
 80017b8:	4613      	mov	r3, r2
 80017ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80017bc:	787b      	ldrb	r3, [r7, #1]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d003      	beq.n	80017ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80017c2:	887a      	ldrh	r2, [r7, #2]
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80017c8:	e003      	b.n	80017d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80017ca:	887b      	ldrh	r3, [r7, #2]
 80017cc:	041a      	lsls	r2, r3, #16
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	619a      	str	r2, [r3, #24]
}
 80017d2:	bf00      	nop
 80017d4:	370c      	adds	r7, #12
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr

080017de <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80017de:	b480      	push	{r7}
 80017e0:	b085      	sub	sp, #20
 80017e2:	af00      	add	r7, sp, #0
 80017e4:	6078      	str	r0, [r7, #4]
 80017e6:	460b      	mov	r3, r1
 80017e8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	695b      	ldr	r3, [r3, #20]
 80017ee:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80017f0:	887a      	ldrh	r2, [r7, #2]
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	4013      	ands	r3, r2
 80017f6:	041a      	lsls	r2, r3, #16
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	43d9      	mvns	r1, r3
 80017fc:	887b      	ldrh	r3, [r7, #2]
 80017fe:	400b      	ands	r3, r1
 8001800:	431a      	orrs	r2, r3
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	619a      	str	r2, [r3, #24]
}
 8001806:	bf00      	nop
 8001808:	3714      	adds	r7, #20
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr
	...

08001814 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b084      	sub	sp, #16
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2b00      	cmp	r3, #0
 8001820:	d101      	bne.n	8001826 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001822:	2301      	movs	r3, #1
 8001824:	e12b      	b.n	8001a7e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800182c:	b2db      	uxtb	r3, r3
 800182e:	2b00      	cmp	r3, #0
 8001830:	d106      	bne.n	8001840 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	2200      	movs	r2, #0
 8001836:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800183a:	6878      	ldr	r0, [r7, #4]
 800183c:	f7ff fb12 	bl	8000e64 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2224      	movs	r2, #36	; 0x24
 8001844:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	681a      	ldr	r2, [r3, #0]
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f022 0201 	bic.w	r2, r2, #1
 8001856:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	681a      	ldr	r2, [r3, #0]
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001866:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	681a      	ldr	r2, [r3, #0]
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001876:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001878:	f001 f888 	bl	800298c <HAL_RCC_GetPCLK1Freq>
 800187c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	4a81      	ldr	r2, [pc, #516]	; (8001a88 <HAL_I2C_Init+0x274>)
 8001884:	4293      	cmp	r3, r2
 8001886:	d807      	bhi.n	8001898 <HAL_I2C_Init+0x84>
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	4a80      	ldr	r2, [pc, #512]	; (8001a8c <HAL_I2C_Init+0x278>)
 800188c:	4293      	cmp	r3, r2
 800188e:	bf94      	ite	ls
 8001890:	2301      	movls	r3, #1
 8001892:	2300      	movhi	r3, #0
 8001894:	b2db      	uxtb	r3, r3
 8001896:	e006      	b.n	80018a6 <HAL_I2C_Init+0x92>
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	4a7d      	ldr	r2, [pc, #500]	; (8001a90 <HAL_I2C_Init+0x27c>)
 800189c:	4293      	cmp	r3, r2
 800189e:	bf94      	ite	ls
 80018a0:	2301      	movls	r3, #1
 80018a2:	2300      	movhi	r3, #0
 80018a4:	b2db      	uxtb	r3, r3
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d001      	beq.n	80018ae <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80018aa:	2301      	movs	r3, #1
 80018ac:	e0e7      	b.n	8001a7e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	4a78      	ldr	r2, [pc, #480]	; (8001a94 <HAL_I2C_Init+0x280>)
 80018b2:	fba2 2303 	umull	r2, r3, r2, r3
 80018b6:	0c9b      	lsrs	r3, r3, #18
 80018b8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	68ba      	ldr	r2, [r7, #8]
 80018ca:	430a      	orrs	r2, r1
 80018cc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	6a1b      	ldr	r3, [r3, #32]
 80018d4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	4a6a      	ldr	r2, [pc, #424]	; (8001a88 <HAL_I2C_Init+0x274>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d802      	bhi.n	80018e8 <HAL_I2C_Init+0xd4>
 80018e2:	68bb      	ldr	r3, [r7, #8]
 80018e4:	3301      	adds	r3, #1
 80018e6:	e009      	b.n	80018fc <HAL_I2C_Init+0xe8>
 80018e8:	68bb      	ldr	r3, [r7, #8]
 80018ea:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80018ee:	fb02 f303 	mul.w	r3, r2, r3
 80018f2:	4a69      	ldr	r2, [pc, #420]	; (8001a98 <HAL_I2C_Init+0x284>)
 80018f4:	fba2 2303 	umull	r2, r3, r2, r3
 80018f8:	099b      	lsrs	r3, r3, #6
 80018fa:	3301      	adds	r3, #1
 80018fc:	687a      	ldr	r2, [r7, #4]
 80018fe:	6812      	ldr	r2, [r2, #0]
 8001900:	430b      	orrs	r3, r1
 8001902:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	69db      	ldr	r3, [r3, #28]
 800190a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800190e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	495c      	ldr	r1, [pc, #368]	; (8001a88 <HAL_I2C_Init+0x274>)
 8001918:	428b      	cmp	r3, r1
 800191a:	d819      	bhi.n	8001950 <HAL_I2C_Init+0x13c>
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	1e59      	subs	r1, r3, #1
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	005b      	lsls	r3, r3, #1
 8001926:	fbb1 f3f3 	udiv	r3, r1, r3
 800192a:	1c59      	adds	r1, r3, #1
 800192c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001930:	400b      	ands	r3, r1
 8001932:	2b00      	cmp	r3, #0
 8001934:	d00a      	beq.n	800194c <HAL_I2C_Init+0x138>
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	1e59      	subs	r1, r3, #1
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	005b      	lsls	r3, r3, #1
 8001940:	fbb1 f3f3 	udiv	r3, r1, r3
 8001944:	3301      	adds	r3, #1
 8001946:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800194a:	e051      	b.n	80019f0 <HAL_I2C_Init+0x1dc>
 800194c:	2304      	movs	r3, #4
 800194e:	e04f      	b.n	80019f0 <HAL_I2C_Init+0x1dc>
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	689b      	ldr	r3, [r3, #8]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d111      	bne.n	800197c <HAL_I2C_Init+0x168>
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	1e58      	subs	r0, r3, #1
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6859      	ldr	r1, [r3, #4]
 8001960:	460b      	mov	r3, r1
 8001962:	005b      	lsls	r3, r3, #1
 8001964:	440b      	add	r3, r1
 8001966:	fbb0 f3f3 	udiv	r3, r0, r3
 800196a:	3301      	adds	r3, #1
 800196c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001970:	2b00      	cmp	r3, #0
 8001972:	bf0c      	ite	eq
 8001974:	2301      	moveq	r3, #1
 8001976:	2300      	movne	r3, #0
 8001978:	b2db      	uxtb	r3, r3
 800197a:	e012      	b.n	80019a2 <HAL_I2C_Init+0x18e>
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	1e58      	subs	r0, r3, #1
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6859      	ldr	r1, [r3, #4]
 8001984:	460b      	mov	r3, r1
 8001986:	009b      	lsls	r3, r3, #2
 8001988:	440b      	add	r3, r1
 800198a:	0099      	lsls	r1, r3, #2
 800198c:	440b      	add	r3, r1
 800198e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001992:	3301      	adds	r3, #1
 8001994:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001998:	2b00      	cmp	r3, #0
 800199a:	bf0c      	ite	eq
 800199c:	2301      	moveq	r3, #1
 800199e:	2300      	movne	r3, #0
 80019a0:	b2db      	uxtb	r3, r3
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d001      	beq.n	80019aa <HAL_I2C_Init+0x196>
 80019a6:	2301      	movs	r3, #1
 80019a8:	e022      	b.n	80019f0 <HAL_I2C_Init+0x1dc>
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	689b      	ldr	r3, [r3, #8]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d10e      	bne.n	80019d0 <HAL_I2C_Init+0x1bc>
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	1e58      	subs	r0, r3, #1
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6859      	ldr	r1, [r3, #4]
 80019ba:	460b      	mov	r3, r1
 80019bc:	005b      	lsls	r3, r3, #1
 80019be:	440b      	add	r3, r1
 80019c0:	fbb0 f3f3 	udiv	r3, r0, r3
 80019c4:	3301      	adds	r3, #1
 80019c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80019ce:	e00f      	b.n	80019f0 <HAL_I2C_Init+0x1dc>
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	1e58      	subs	r0, r3, #1
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6859      	ldr	r1, [r3, #4]
 80019d8:	460b      	mov	r3, r1
 80019da:	009b      	lsls	r3, r3, #2
 80019dc:	440b      	add	r3, r1
 80019de:	0099      	lsls	r1, r3, #2
 80019e0:	440b      	add	r3, r1
 80019e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80019e6:	3301      	adds	r3, #1
 80019e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019ec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80019f0:	6879      	ldr	r1, [r7, #4]
 80019f2:	6809      	ldr	r1, [r1, #0]
 80019f4:	4313      	orrs	r3, r2
 80019f6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	69da      	ldr	r2, [r3, #28]
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6a1b      	ldr	r3, [r3, #32]
 8001a0a:	431a      	orrs	r2, r3
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	430a      	orrs	r2, r1
 8001a12:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	689b      	ldr	r3, [r3, #8]
 8001a1a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001a1e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001a22:	687a      	ldr	r2, [r7, #4]
 8001a24:	6911      	ldr	r1, [r2, #16]
 8001a26:	687a      	ldr	r2, [r7, #4]
 8001a28:	68d2      	ldr	r2, [r2, #12]
 8001a2a:	4311      	orrs	r1, r2
 8001a2c:	687a      	ldr	r2, [r7, #4]
 8001a2e:	6812      	ldr	r2, [r2, #0]
 8001a30:	430b      	orrs	r3, r1
 8001a32:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	68db      	ldr	r3, [r3, #12]
 8001a3a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	695a      	ldr	r2, [r3, #20]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	699b      	ldr	r3, [r3, #24]
 8001a46:	431a      	orrs	r2, r3
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	430a      	orrs	r2, r1
 8001a4e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	681a      	ldr	r2, [r3, #0]
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f042 0201 	orr.w	r2, r2, #1
 8001a5e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2200      	movs	r2, #0
 8001a64:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2220      	movs	r2, #32
 8001a6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	2200      	movs	r2, #0
 8001a72:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2200      	movs	r2, #0
 8001a78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001a7c:	2300      	movs	r3, #0
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	3710      	adds	r7, #16
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop
 8001a88:	000186a0 	.word	0x000186a0
 8001a8c:	001e847f 	.word	0x001e847f
 8001a90:	003d08ff 	.word	0x003d08ff
 8001a94:	431bde83 	.word	0x431bde83
 8001a98:	10624dd3 	.word	0x10624dd3

08001a9c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b088      	sub	sp, #32
 8001aa0:	af02      	add	r7, sp, #8
 8001aa2:	60f8      	str	r0, [r7, #12]
 8001aa4:	607a      	str	r2, [r7, #4]
 8001aa6:	461a      	mov	r2, r3
 8001aa8:	460b      	mov	r3, r1
 8001aaa:	817b      	strh	r3, [r7, #10]
 8001aac:	4613      	mov	r3, r2
 8001aae:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001ab0:	f7ff fbc2 	bl	8001238 <HAL_GetTick>
 8001ab4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001abc:	b2db      	uxtb	r3, r3
 8001abe:	2b20      	cmp	r3, #32
 8001ac0:	f040 80e0 	bne.w	8001c84 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	9300      	str	r3, [sp, #0]
 8001ac8:	2319      	movs	r3, #25
 8001aca:	2201      	movs	r2, #1
 8001acc:	4970      	ldr	r1, [pc, #448]	; (8001c90 <HAL_I2C_Master_Transmit+0x1f4>)
 8001ace:	68f8      	ldr	r0, [r7, #12]
 8001ad0:	f000 f964 	bl	8001d9c <I2C_WaitOnFlagUntilTimeout>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d001      	beq.n	8001ade <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001ada:	2302      	movs	r3, #2
 8001adc:	e0d3      	b.n	8001c86 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ae4:	2b01      	cmp	r3, #1
 8001ae6:	d101      	bne.n	8001aec <HAL_I2C_Master_Transmit+0x50>
 8001ae8:	2302      	movs	r3, #2
 8001aea:	e0cc      	b.n	8001c86 <HAL_I2C_Master_Transmit+0x1ea>
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	2201      	movs	r2, #1
 8001af0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f003 0301 	and.w	r3, r3, #1
 8001afe:	2b01      	cmp	r3, #1
 8001b00:	d007      	beq.n	8001b12 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	681a      	ldr	r2, [r3, #0]
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f042 0201 	orr.w	r2, r2, #1
 8001b10:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	681a      	ldr	r2, [r3, #0]
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001b20:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	2221      	movs	r2, #33	; 0x21
 8001b26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	2210      	movs	r2, #16
 8001b2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	2200      	movs	r2, #0
 8001b36:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	687a      	ldr	r2, [r7, #4]
 8001b3c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	893a      	ldrh	r2, [r7, #8]
 8001b42:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b48:	b29a      	uxth	r2, r3
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	4a50      	ldr	r2, [pc, #320]	; (8001c94 <HAL_I2C_Master_Transmit+0x1f8>)
 8001b52:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001b54:	8979      	ldrh	r1, [r7, #10]
 8001b56:	697b      	ldr	r3, [r7, #20]
 8001b58:	6a3a      	ldr	r2, [r7, #32]
 8001b5a:	68f8      	ldr	r0, [r7, #12]
 8001b5c:	f000 f89c 	bl	8001c98 <I2C_MasterRequestWrite>
 8001b60:	4603      	mov	r3, r0
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d001      	beq.n	8001b6a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001b66:	2301      	movs	r3, #1
 8001b68:	e08d      	b.n	8001c86 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	613b      	str	r3, [r7, #16]
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	695b      	ldr	r3, [r3, #20]
 8001b74:	613b      	str	r3, [r7, #16]
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	699b      	ldr	r3, [r3, #24]
 8001b7c:	613b      	str	r3, [r7, #16]
 8001b7e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001b80:	e066      	b.n	8001c50 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b82:	697a      	ldr	r2, [r7, #20]
 8001b84:	6a39      	ldr	r1, [r7, #32]
 8001b86:	68f8      	ldr	r0, [r7, #12]
 8001b88:	f000 f9de 	bl	8001f48 <I2C_WaitOnTXEFlagUntilTimeout>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d00d      	beq.n	8001bae <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b96:	2b04      	cmp	r3, #4
 8001b98:	d107      	bne.n	8001baa <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	681a      	ldr	r2, [r3, #0]
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ba8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001baa:	2301      	movs	r3, #1
 8001bac:	e06b      	b.n	8001c86 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bb2:	781a      	ldrb	r2, [r3, #0]
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bbe:	1c5a      	adds	r2, r3, #1
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bc8:	b29b      	uxth	r3, r3
 8001bca:	3b01      	subs	r3, #1
 8001bcc:	b29a      	uxth	r2, r3
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bd6:	3b01      	subs	r3, #1
 8001bd8:	b29a      	uxth	r2, r3
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	695b      	ldr	r3, [r3, #20]
 8001be4:	f003 0304 	and.w	r3, r3, #4
 8001be8:	2b04      	cmp	r3, #4
 8001bea:	d11b      	bne.n	8001c24 <HAL_I2C_Master_Transmit+0x188>
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d017      	beq.n	8001c24 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bf8:	781a      	ldrb	r2, [r3, #0]
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c04:	1c5a      	adds	r2, r3, #1
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c0e:	b29b      	uxth	r3, r3
 8001c10:	3b01      	subs	r3, #1
 8001c12:	b29a      	uxth	r2, r3
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c1c:	3b01      	subs	r3, #1
 8001c1e:	b29a      	uxth	r2, r3
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c24:	697a      	ldr	r2, [r7, #20]
 8001c26:	6a39      	ldr	r1, [r7, #32]
 8001c28:	68f8      	ldr	r0, [r7, #12]
 8001c2a:	f000 f9ce 	bl	8001fca <I2C_WaitOnBTFFlagUntilTimeout>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d00d      	beq.n	8001c50 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c38:	2b04      	cmp	r3, #4
 8001c3a:	d107      	bne.n	8001c4c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	681a      	ldr	r2, [r3, #0]
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c4a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	e01a      	b.n	8001c86 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d194      	bne.n	8001b82 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	681a      	ldr	r2, [r3, #0]
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c66:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	2220      	movs	r2, #32
 8001c6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	2200      	movs	r2, #0
 8001c74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001c80:	2300      	movs	r3, #0
 8001c82:	e000      	b.n	8001c86 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001c84:	2302      	movs	r3, #2
  }
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	3718      	adds	r7, #24
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	00100002 	.word	0x00100002
 8001c94:	ffff0000 	.word	0xffff0000

08001c98 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b088      	sub	sp, #32
 8001c9c:	af02      	add	r7, sp, #8
 8001c9e:	60f8      	str	r0, [r7, #12]
 8001ca0:	607a      	str	r2, [r7, #4]
 8001ca2:	603b      	str	r3, [r7, #0]
 8001ca4:	460b      	mov	r3, r1
 8001ca6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cac:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001cae:	697b      	ldr	r3, [r7, #20]
 8001cb0:	2b08      	cmp	r3, #8
 8001cb2:	d006      	beq.n	8001cc2 <I2C_MasterRequestWrite+0x2a>
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	2b01      	cmp	r3, #1
 8001cb8:	d003      	beq.n	8001cc2 <I2C_MasterRequestWrite+0x2a>
 8001cba:	697b      	ldr	r3, [r7, #20]
 8001cbc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001cc0:	d108      	bne.n	8001cd4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	681a      	ldr	r2, [r3, #0]
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001cd0:	601a      	str	r2, [r3, #0]
 8001cd2:	e00b      	b.n	8001cec <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd8:	2b12      	cmp	r3, #18
 8001cda:	d107      	bne.n	8001cec <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	681a      	ldr	r2, [r3, #0]
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001cea:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	9300      	str	r3, [sp, #0]
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001cf8:	68f8      	ldr	r0, [r7, #12]
 8001cfa:	f000 f84f 	bl	8001d9c <I2C_WaitOnFlagUntilTimeout>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d00d      	beq.n	8001d20 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d12:	d103      	bne.n	8001d1c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d1a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001d1c:	2303      	movs	r3, #3
 8001d1e:	e035      	b.n	8001d8c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	691b      	ldr	r3, [r3, #16]
 8001d24:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001d28:	d108      	bne.n	8001d3c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001d2a:	897b      	ldrh	r3, [r7, #10]
 8001d2c:	b2db      	uxtb	r3, r3
 8001d2e:	461a      	mov	r2, r3
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001d38:	611a      	str	r2, [r3, #16]
 8001d3a:	e01b      	b.n	8001d74 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001d3c:	897b      	ldrh	r3, [r7, #10]
 8001d3e:	11db      	asrs	r3, r3, #7
 8001d40:	b2db      	uxtb	r3, r3
 8001d42:	f003 0306 	and.w	r3, r3, #6
 8001d46:	b2db      	uxtb	r3, r3
 8001d48:	f063 030f 	orn	r3, r3, #15
 8001d4c:	b2da      	uxtb	r2, r3
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	687a      	ldr	r2, [r7, #4]
 8001d58:	490e      	ldr	r1, [pc, #56]	; (8001d94 <I2C_MasterRequestWrite+0xfc>)
 8001d5a:	68f8      	ldr	r0, [r7, #12]
 8001d5c:	f000 f875 	bl	8001e4a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001d60:	4603      	mov	r3, r0
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d001      	beq.n	8001d6a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001d66:	2301      	movs	r3, #1
 8001d68:	e010      	b.n	8001d8c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001d6a:	897b      	ldrh	r3, [r7, #10]
 8001d6c:	b2da      	uxtb	r2, r3
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	687a      	ldr	r2, [r7, #4]
 8001d78:	4907      	ldr	r1, [pc, #28]	; (8001d98 <I2C_MasterRequestWrite+0x100>)
 8001d7a:	68f8      	ldr	r0, [r7, #12]
 8001d7c:	f000 f865 	bl	8001e4a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001d80:	4603      	mov	r3, r0
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d001      	beq.n	8001d8a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001d86:	2301      	movs	r3, #1
 8001d88:	e000      	b.n	8001d8c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001d8a:	2300      	movs	r3, #0
}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	3718      	adds	r7, #24
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd80      	pop	{r7, pc}
 8001d94:	00010008 	.word	0x00010008
 8001d98:	00010002 	.word	0x00010002

08001d9c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b084      	sub	sp, #16
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	60f8      	str	r0, [r7, #12]
 8001da4:	60b9      	str	r1, [r7, #8]
 8001da6:	603b      	str	r3, [r7, #0]
 8001da8:	4613      	mov	r3, r2
 8001daa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001dac:	e025      	b.n	8001dfa <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001db4:	d021      	beq.n	8001dfa <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001db6:	f7ff fa3f 	bl	8001238 <HAL_GetTick>
 8001dba:	4602      	mov	r2, r0
 8001dbc:	69bb      	ldr	r3, [r7, #24]
 8001dbe:	1ad3      	subs	r3, r2, r3
 8001dc0:	683a      	ldr	r2, [r7, #0]
 8001dc2:	429a      	cmp	r2, r3
 8001dc4:	d302      	bcc.n	8001dcc <I2C_WaitOnFlagUntilTimeout+0x30>
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d116      	bne.n	8001dfa <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	2200      	movs	r2, #0
 8001dd0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	2220      	movs	r2, #32
 8001dd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	2200      	movs	r2, #0
 8001dde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de6:	f043 0220 	orr.w	r2, r3, #32
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	2200      	movs	r2, #0
 8001df2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001df6:	2301      	movs	r3, #1
 8001df8:	e023      	b.n	8001e42 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001dfa:	68bb      	ldr	r3, [r7, #8]
 8001dfc:	0c1b      	lsrs	r3, r3, #16
 8001dfe:	b2db      	uxtb	r3, r3
 8001e00:	2b01      	cmp	r3, #1
 8001e02:	d10d      	bne.n	8001e20 <I2C_WaitOnFlagUntilTimeout+0x84>
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	695b      	ldr	r3, [r3, #20]
 8001e0a:	43da      	mvns	r2, r3
 8001e0c:	68bb      	ldr	r3, [r7, #8]
 8001e0e:	4013      	ands	r3, r2
 8001e10:	b29b      	uxth	r3, r3
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	bf0c      	ite	eq
 8001e16:	2301      	moveq	r3, #1
 8001e18:	2300      	movne	r3, #0
 8001e1a:	b2db      	uxtb	r3, r3
 8001e1c:	461a      	mov	r2, r3
 8001e1e:	e00c      	b.n	8001e3a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	699b      	ldr	r3, [r3, #24]
 8001e26:	43da      	mvns	r2, r3
 8001e28:	68bb      	ldr	r3, [r7, #8]
 8001e2a:	4013      	ands	r3, r2
 8001e2c:	b29b      	uxth	r3, r3
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	bf0c      	ite	eq
 8001e32:	2301      	moveq	r3, #1
 8001e34:	2300      	movne	r3, #0
 8001e36:	b2db      	uxtb	r3, r3
 8001e38:	461a      	mov	r2, r3
 8001e3a:	79fb      	ldrb	r3, [r7, #7]
 8001e3c:	429a      	cmp	r2, r3
 8001e3e:	d0b6      	beq.n	8001dae <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001e40:	2300      	movs	r3, #0
}
 8001e42:	4618      	mov	r0, r3
 8001e44:	3710      	adds	r7, #16
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}

08001e4a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001e4a:	b580      	push	{r7, lr}
 8001e4c:	b084      	sub	sp, #16
 8001e4e:	af00      	add	r7, sp, #0
 8001e50:	60f8      	str	r0, [r7, #12]
 8001e52:	60b9      	str	r1, [r7, #8]
 8001e54:	607a      	str	r2, [r7, #4]
 8001e56:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001e58:	e051      	b.n	8001efe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	695b      	ldr	r3, [r3, #20]
 8001e60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e68:	d123      	bne.n	8001eb2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	681a      	ldr	r2, [r3, #0]
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e78:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001e82:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	2200      	movs	r2, #0
 8001e88:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	2220      	movs	r2, #32
 8001e8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	2200      	movs	r2, #0
 8001e96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e9e:	f043 0204 	orr.w	r2, r3, #4
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e046      	b.n	8001f40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001eb8:	d021      	beq.n	8001efe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001eba:	f7ff f9bd 	bl	8001238 <HAL_GetTick>
 8001ebe:	4602      	mov	r2, r0
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	1ad3      	subs	r3, r2, r3
 8001ec4:	687a      	ldr	r2, [r7, #4]
 8001ec6:	429a      	cmp	r2, r3
 8001ec8:	d302      	bcc.n	8001ed0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d116      	bne.n	8001efe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	2220      	movs	r2, #32
 8001eda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eea:	f043 0220 	orr.w	r2, r3, #32
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001efa:	2301      	movs	r3, #1
 8001efc:	e020      	b.n	8001f40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001efe:	68bb      	ldr	r3, [r7, #8]
 8001f00:	0c1b      	lsrs	r3, r3, #16
 8001f02:	b2db      	uxtb	r3, r3
 8001f04:	2b01      	cmp	r3, #1
 8001f06:	d10c      	bne.n	8001f22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	695b      	ldr	r3, [r3, #20]
 8001f0e:	43da      	mvns	r2, r3
 8001f10:	68bb      	ldr	r3, [r7, #8]
 8001f12:	4013      	ands	r3, r2
 8001f14:	b29b      	uxth	r3, r3
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	bf14      	ite	ne
 8001f1a:	2301      	movne	r3, #1
 8001f1c:	2300      	moveq	r3, #0
 8001f1e:	b2db      	uxtb	r3, r3
 8001f20:	e00b      	b.n	8001f3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	699b      	ldr	r3, [r3, #24]
 8001f28:	43da      	mvns	r2, r3
 8001f2a:	68bb      	ldr	r3, [r7, #8]
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	b29b      	uxth	r3, r3
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	bf14      	ite	ne
 8001f34:	2301      	movne	r3, #1
 8001f36:	2300      	moveq	r3, #0
 8001f38:	b2db      	uxtb	r3, r3
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d18d      	bne.n	8001e5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8001f3e:	2300      	movs	r3, #0
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	3710      	adds	r7, #16
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}

08001f48 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b084      	sub	sp, #16
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	60f8      	str	r0, [r7, #12]
 8001f50:	60b9      	str	r1, [r7, #8]
 8001f52:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001f54:	e02d      	b.n	8001fb2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001f56:	68f8      	ldr	r0, [r7, #12]
 8001f58:	f000 f878 	bl	800204c <I2C_IsAcknowledgeFailed>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d001      	beq.n	8001f66 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001f62:	2301      	movs	r3, #1
 8001f64:	e02d      	b.n	8001fc2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f66:	68bb      	ldr	r3, [r7, #8]
 8001f68:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001f6c:	d021      	beq.n	8001fb2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f6e:	f7ff f963 	bl	8001238 <HAL_GetTick>
 8001f72:	4602      	mov	r2, r0
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	1ad3      	subs	r3, r2, r3
 8001f78:	68ba      	ldr	r2, [r7, #8]
 8001f7a:	429a      	cmp	r2, r3
 8001f7c:	d302      	bcc.n	8001f84 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001f7e:	68bb      	ldr	r3, [r7, #8]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d116      	bne.n	8001fb2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	2200      	movs	r2, #0
 8001f88:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	2220      	movs	r2, #32
 8001f8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	2200      	movs	r2, #0
 8001f96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f9e:	f043 0220 	orr.w	r2, r3, #32
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	2200      	movs	r2, #0
 8001faa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	e007      	b.n	8001fc2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	695b      	ldr	r3, [r3, #20]
 8001fb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fbc:	2b80      	cmp	r3, #128	; 0x80
 8001fbe:	d1ca      	bne.n	8001f56 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001fc0:	2300      	movs	r3, #0
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	3710      	adds	r7, #16
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}

08001fca <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001fca:	b580      	push	{r7, lr}
 8001fcc:	b084      	sub	sp, #16
 8001fce:	af00      	add	r7, sp, #0
 8001fd0:	60f8      	str	r0, [r7, #12]
 8001fd2:	60b9      	str	r1, [r7, #8]
 8001fd4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001fd6:	e02d      	b.n	8002034 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001fd8:	68f8      	ldr	r0, [r7, #12]
 8001fda:	f000 f837 	bl	800204c <I2C_IsAcknowledgeFailed>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d001      	beq.n	8001fe8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	e02d      	b.n	8002044 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001fe8:	68bb      	ldr	r3, [r7, #8]
 8001fea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001fee:	d021      	beq.n	8002034 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ff0:	f7ff f922 	bl	8001238 <HAL_GetTick>
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	1ad3      	subs	r3, r2, r3
 8001ffa:	68ba      	ldr	r2, [r7, #8]
 8001ffc:	429a      	cmp	r2, r3
 8001ffe:	d302      	bcc.n	8002006 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002000:	68bb      	ldr	r3, [r7, #8]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d116      	bne.n	8002034 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	2200      	movs	r2, #0
 800200a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	2220      	movs	r2, #32
 8002010:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	2200      	movs	r2, #0
 8002018:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002020:	f043 0220 	orr.w	r2, r3, #32
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	2200      	movs	r2, #0
 800202c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002030:	2301      	movs	r3, #1
 8002032:	e007      	b.n	8002044 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	695b      	ldr	r3, [r3, #20]
 800203a:	f003 0304 	and.w	r3, r3, #4
 800203e:	2b04      	cmp	r3, #4
 8002040:	d1ca      	bne.n	8001fd8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002042:	2300      	movs	r3, #0
}
 8002044:	4618      	mov	r0, r3
 8002046:	3710      	adds	r7, #16
 8002048:	46bd      	mov	sp, r7
 800204a:	bd80      	pop	{r7, pc}

0800204c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800204c:	b480      	push	{r7}
 800204e:	b083      	sub	sp, #12
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	695b      	ldr	r3, [r3, #20]
 800205a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800205e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002062:	d11b      	bne.n	800209c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800206c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2200      	movs	r2, #0
 8002072:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2220      	movs	r2, #32
 8002078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2200      	movs	r2, #0
 8002080:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002088:	f043 0204 	orr.w	r2, r3, #4
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2200      	movs	r2, #0
 8002094:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002098:	2301      	movs	r3, #1
 800209a:	e000      	b.n	800209e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800209c:	2300      	movs	r3, #0
}
 800209e:	4618      	mov	r0, r3
 80020a0:	370c      	adds	r7, #12
 80020a2:	46bd      	mov	sp, r7
 80020a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a8:	4770      	bx	lr
	...

080020ac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b086      	sub	sp, #24
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d101      	bne.n	80020be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80020ba:	2301      	movs	r3, #1
 80020bc:	e267      	b.n	800258e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f003 0301 	and.w	r3, r3, #1
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d075      	beq.n	80021b6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80020ca:	4b88      	ldr	r3, [pc, #544]	; (80022ec <HAL_RCC_OscConfig+0x240>)
 80020cc:	689b      	ldr	r3, [r3, #8]
 80020ce:	f003 030c 	and.w	r3, r3, #12
 80020d2:	2b04      	cmp	r3, #4
 80020d4:	d00c      	beq.n	80020f0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80020d6:	4b85      	ldr	r3, [pc, #532]	; (80022ec <HAL_RCC_OscConfig+0x240>)
 80020d8:	689b      	ldr	r3, [r3, #8]
 80020da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80020de:	2b08      	cmp	r3, #8
 80020e0:	d112      	bne.n	8002108 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80020e2:	4b82      	ldr	r3, [pc, #520]	; (80022ec <HAL_RCC_OscConfig+0x240>)
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80020ee:	d10b      	bne.n	8002108 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020f0:	4b7e      	ldr	r3, [pc, #504]	; (80022ec <HAL_RCC_OscConfig+0x240>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d05b      	beq.n	80021b4 <HAL_RCC_OscConfig+0x108>
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d157      	bne.n	80021b4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002104:	2301      	movs	r3, #1
 8002106:	e242      	b.n	800258e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002110:	d106      	bne.n	8002120 <HAL_RCC_OscConfig+0x74>
 8002112:	4b76      	ldr	r3, [pc, #472]	; (80022ec <HAL_RCC_OscConfig+0x240>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4a75      	ldr	r2, [pc, #468]	; (80022ec <HAL_RCC_OscConfig+0x240>)
 8002118:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800211c:	6013      	str	r3, [r2, #0]
 800211e:	e01d      	b.n	800215c <HAL_RCC_OscConfig+0xb0>
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002128:	d10c      	bne.n	8002144 <HAL_RCC_OscConfig+0x98>
 800212a:	4b70      	ldr	r3, [pc, #448]	; (80022ec <HAL_RCC_OscConfig+0x240>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a6f      	ldr	r2, [pc, #444]	; (80022ec <HAL_RCC_OscConfig+0x240>)
 8002130:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002134:	6013      	str	r3, [r2, #0]
 8002136:	4b6d      	ldr	r3, [pc, #436]	; (80022ec <HAL_RCC_OscConfig+0x240>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4a6c      	ldr	r2, [pc, #432]	; (80022ec <HAL_RCC_OscConfig+0x240>)
 800213c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002140:	6013      	str	r3, [r2, #0]
 8002142:	e00b      	b.n	800215c <HAL_RCC_OscConfig+0xb0>
 8002144:	4b69      	ldr	r3, [pc, #420]	; (80022ec <HAL_RCC_OscConfig+0x240>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a68      	ldr	r2, [pc, #416]	; (80022ec <HAL_RCC_OscConfig+0x240>)
 800214a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800214e:	6013      	str	r3, [r2, #0]
 8002150:	4b66      	ldr	r3, [pc, #408]	; (80022ec <HAL_RCC_OscConfig+0x240>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a65      	ldr	r2, [pc, #404]	; (80022ec <HAL_RCC_OscConfig+0x240>)
 8002156:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800215a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d013      	beq.n	800218c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002164:	f7ff f868 	bl	8001238 <HAL_GetTick>
 8002168:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800216a:	e008      	b.n	800217e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800216c:	f7ff f864 	bl	8001238 <HAL_GetTick>
 8002170:	4602      	mov	r2, r0
 8002172:	693b      	ldr	r3, [r7, #16]
 8002174:	1ad3      	subs	r3, r2, r3
 8002176:	2b64      	cmp	r3, #100	; 0x64
 8002178:	d901      	bls.n	800217e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800217a:	2303      	movs	r3, #3
 800217c:	e207      	b.n	800258e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800217e:	4b5b      	ldr	r3, [pc, #364]	; (80022ec <HAL_RCC_OscConfig+0x240>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002186:	2b00      	cmp	r3, #0
 8002188:	d0f0      	beq.n	800216c <HAL_RCC_OscConfig+0xc0>
 800218a:	e014      	b.n	80021b6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800218c:	f7ff f854 	bl	8001238 <HAL_GetTick>
 8002190:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002192:	e008      	b.n	80021a6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002194:	f7ff f850 	bl	8001238 <HAL_GetTick>
 8002198:	4602      	mov	r2, r0
 800219a:	693b      	ldr	r3, [r7, #16]
 800219c:	1ad3      	subs	r3, r2, r3
 800219e:	2b64      	cmp	r3, #100	; 0x64
 80021a0:	d901      	bls.n	80021a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80021a2:	2303      	movs	r3, #3
 80021a4:	e1f3      	b.n	800258e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021a6:	4b51      	ldr	r3, [pc, #324]	; (80022ec <HAL_RCC_OscConfig+0x240>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d1f0      	bne.n	8002194 <HAL_RCC_OscConfig+0xe8>
 80021b2:	e000      	b.n	80021b6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f003 0302 	and.w	r3, r3, #2
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d063      	beq.n	800228a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80021c2:	4b4a      	ldr	r3, [pc, #296]	; (80022ec <HAL_RCC_OscConfig+0x240>)
 80021c4:	689b      	ldr	r3, [r3, #8]
 80021c6:	f003 030c 	and.w	r3, r3, #12
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d00b      	beq.n	80021e6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80021ce:	4b47      	ldr	r3, [pc, #284]	; (80022ec <HAL_RCC_OscConfig+0x240>)
 80021d0:	689b      	ldr	r3, [r3, #8]
 80021d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80021d6:	2b08      	cmp	r3, #8
 80021d8:	d11c      	bne.n	8002214 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80021da:	4b44      	ldr	r3, [pc, #272]	; (80022ec <HAL_RCC_OscConfig+0x240>)
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d116      	bne.n	8002214 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021e6:	4b41      	ldr	r3, [pc, #260]	; (80022ec <HAL_RCC_OscConfig+0x240>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f003 0302 	and.w	r3, r3, #2
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d005      	beq.n	80021fe <HAL_RCC_OscConfig+0x152>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	68db      	ldr	r3, [r3, #12]
 80021f6:	2b01      	cmp	r3, #1
 80021f8:	d001      	beq.n	80021fe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80021fa:	2301      	movs	r3, #1
 80021fc:	e1c7      	b.n	800258e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021fe:	4b3b      	ldr	r3, [pc, #236]	; (80022ec <HAL_RCC_OscConfig+0x240>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	691b      	ldr	r3, [r3, #16]
 800220a:	00db      	lsls	r3, r3, #3
 800220c:	4937      	ldr	r1, [pc, #220]	; (80022ec <HAL_RCC_OscConfig+0x240>)
 800220e:	4313      	orrs	r3, r2
 8002210:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002212:	e03a      	b.n	800228a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	68db      	ldr	r3, [r3, #12]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d020      	beq.n	800225e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800221c:	4b34      	ldr	r3, [pc, #208]	; (80022f0 <HAL_RCC_OscConfig+0x244>)
 800221e:	2201      	movs	r2, #1
 8002220:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002222:	f7ff f809 	bl	8001238 <HAL_GetTick>
 8002226:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002228:	e008      	b.n	800223c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800222a:	f7ff f805 	bl	8001238 <HAL_GetTick>
 800222e:	4602      	mov	r2, r0
 8002230:	693b      	ldr	r3, [r7, #16]
 8002232:	1ad3      	subs	r3, r2, r3
 8002234:	2b02      	cmp	r3, #2
 8002236:	d901      	bls.n	800223c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002238:	2303      	movs	r3, #3
 800223a:	e1a8      	b.n	800258e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800223c:	4b2b      	ldr	r3, [pc, #172]	; (80022ec <HAL_RCC_OscConfig+0x240>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f003 0302 	and.w	r3, r3, #2
 8002244:	2b00      	cmp	r3, #0
 8002246:	d0f0      	beq.n	800222a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002248:	4b28      	ldr	r3, [pc, #160]	; (80022ec <HAL_RCC_OscConfig+0x240>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	691b      	ldr	r3, [r3, #16]
 8002254:	00db      	lsls	r3, r3, #3
 8002256:	4925      	ldr	r1, [pc, #148]	; (80022ec <HAL_RCC_OscConfig+0x240>)
 8002258:	4313      	orrs	r3, r2
 800225a:	600b      	str	r3, [r1, #0]
 800225c:	e015      	b.n	800228a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800225e:	4b24      	ldr	r3, [pc, #144]	; (80022f0 <HAL_RCC_OscConfig+0x244>)
 8002260:	2200      	movs	r2, #0
 8002262:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002264:	f7fe ffe8 	bl	8001238 <HAL_GetTick>
 8002268:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800226a:	e008      	b.n	800227e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800226c:	f7fe ffe4 	bl	8001238 <HAL_GetTick>
 8002270:	4602      	mov	r2, r0
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	1ad3      	subs	r3, r2, r3
 8002276:	2b02      	cmp	r3, #2
 8002278:	d901      	bls.n	800227e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800227a:	2303      	movs	r3, #3
 800227c:	e187      	b.n	800258e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800227e:	4b1b      	ldr	r3, [pc, #108]	; (80022ec <HAL_RCC_OscConfig+0x240>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f003 0302 	and.w	r3, r3, #2
 8002286:	2b00      	cmp	r3, #0
 8002288:	d1f0      	bne.n	800226c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f003 0308 	and.w	r3, r3, #8
 8002292:	2b00      	cmp	r3, #0
 8002294:	d036      	beq.n	8002304 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	695b      	ldr	r3, [r3, #20]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d016      	beq.n	80022cc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800229e:	4b15      	ldr	r3, [pc, #84]	; (80022f4 <HAL_RCC_OscConfig+0x248>)
 80022a0:	2201      	movs	r2, #1
 80022a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022a4:	f7fe ffc8 	bl	8001238 <HAL_GetTick>
 80022a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022aa:	e008      	b.n	80022be <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022ac:	f7fe ffc4 	bl	8001238 <HAL_GetTick>
 80022b0:	4602      	mov	r2, r0
 80022b2:	693b      	ldr	r3, [r7, #16]
 80022b4:	1ad3      	subs	r3, r2, r3
 80022b6:	2b02      	cmp	r3, #2
 80022b8:	d901      	bls.n	80022be <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80022ba:	2303      	movs	r3, #3
 80022bc:	e167      	b.n	800258e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022be:	4b0b      	ldr	r3, [pc, #44]	; (80022ec <HAL_RCC_OscConfig+0x240>)
 80022c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022c2:	f003 0302 	and.w	r3, r3, #2
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d0f0      	beq.n	80022ac <HAL_RCC_OscConfig+0x200>
 80022ca:	e01b      	b.n	8002304 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022cc:	4b09      	ldr	r3, [pc, #36]	; (80022f4 <HAL_RCC_OscConfig+0x248>)
 80022ce:	2200      	movs	r2, #0
 80022d0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022d2:	f7fe ffb1 	bl	8001238 <HAL_GetTick>
 80022d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022d8:	e00e      	b.n	80022f8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022da:	f7fe ffad 	bl	8001238 <HAL_GetTick>
 80022de:	4602      	mov	r2, r0
 80022e0:	693b      	ldr	r3, [r7, #16]
 80022e2:	1ad3      	subs	r3, r2, r3
 80022e4:	2b02      	cmp	r3, #2
 80022e6:	d907      	bls.n	80022f8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80022e8:	2303      	movs	r3, #3
 80022ea:	e150      	b.n	800258e <HAL_RCC_OscConfig+0x4e2>
 80022ec:	40023800 	.word	0x40023800
 80022f0:	42470000 	.word	0x42470000
 80022f4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022f8:	4b88      	ldr	r3, [pc, #544]	; (800251c <HAL_RCC_OscConfig+0x470>)
 80022fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022fc:	f003 0302 	and.w	r3, r3, #2
 8002300:	2b00      	cmp	r3, #0
 8002302:	d1ea      	bne.n	80022da <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f003 0304 	and.w	r3, r3, #4
 800230c:	2b00      	cmp	r3, #0
 800230e:	f000 8097 	beq.w	8002440 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002312:	2300      	movs	r3, #0
 8002314:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002316:	4b81      	ldr	r3, [pc, #516]	; (800251c <HAL_RCC_OscConfig+0x470>)
 8002318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800231a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800231e:	2b00      	cmp	r3, #0
 8002320:	d10f      	bne.n	8002342 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002322:	2300      	movs	r3, #0
 8002324:	60bb      	str	r3, [r7, #8]
 8002326:	4b7d      	ldr	r3, [pc, #500]	; (800251c <HAL_RCC_OscConfig+0x470>)
 8002328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800232a:	4a7c      	ldr	r2, [pc, #496]	; (800251c <HAL_RCC_OscConfig+0x470>)
 800232c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002330:	6413      	str	r3, [r2, #64]	; 0x40
 8002332:	4b7a      	ldr	r3, [pc, #488]	; (800251c <HAL_RCC_OscConfig+0x470>)
 8002334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002336:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800233a:	60bb      	str	r3, [r7, #8]
 800233c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800233e:	2301      	movs	r3, #1
 8002340:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002342:	4b77      	ldr	r3, [pc, #476]	; (8002520 <HAL_RCC_OscConfig+0x474>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800234a:	2b00      	cmp	r3, #0
 800234c:	d118      	bne.n	8002380 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800234e:	4b74      	ldr	r3, [pc, #464]	; (8002520 <HAL_RCC_OscConfig+0x474>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4a73      	ldr	r2, [pc, #460]	; (8002520 <HAL_RCC_OscConfig+0x474>)
 8002354:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002358:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800235a:	f7fe ff6d 	bl	8001238 <HAL_GetTick>
 800235e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002360:	e008      	b.n	8002374 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002362:	f7fe ff69 	bl	8001238 <HAL_GetTick>
 8002366:	4602      	mov	r2, r0
 8002368:	693b      	ldr	r3, [r7, #16]
 800236a:	1ad3      	subs	r3, r2, r3
 800236c:	2b02      	cmp	r3, #2
 800236e:	d901      	bls.n	8002374 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002370:	2303      	movs	r3, #3
 8002372:	e10c      	b.n	800258e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002374:	4b6a      	ldr	r3, [pc, #424]	; (8002520 <HAL_RCC_OscConfig+0x474>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800237c:	2b00      	cmp	r3, #0
 800237e:	d0f0      	beq.n	8002362 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	689b      	ldr	r3, [r3, #8]
 8002384:	2b01      	cmp	r3, #1
 8002386:	d106      	bne.n	8002396 <HAL_RCC_OscConfig+0x2ea>
 8002388:	4b64      	ldr	r3, [pc, #400]	; (800251c <HAL_RCC_OscConfig+0x470>)
 800238a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800238c:	4a63      	ldr	r2, [pc, #396]	; (800251c <HAL_RCC_OscConfig+0x470>)
 800238e:	f043 0301 	orr.w	r3, r3, #1
 8002392:	6713      	str	r3, [r2, #112]	; 0x70
 8002394:	e01c      	b.n	80023d0 <HAL_RCC_OscConfig+0x324>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	689b      	ldr	r3, [r3, #8]
 800239a:	2b05      	cmp	r3, #5
 800239c:	d10c      	bne.n	80023b8 <HAL_RCC_OscConfig+0x30c>
 800239e:	4b5f      	ldr	r3, [pc, #380]	; (800251c <HAL_RCC_OscConfig+0x470>)
 80023a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023a2:	4a5e      	ldr	r2, [pc, #376]	; (800251c <HAL_RCC_OscConfig+0x470>)
 80023a4:	f043 0304 	orr.w	r3, r3, #4
 80023a8:	6713      	str	r3, [r2, #112]	; 0x70
 80023aa:	4b5c      	ldr	r3, [pc, #368]	; (800251c <HAL_RCC_OscConfig+0x470>)
 80023ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023ae:	4a5b      	ldr	r2, [pc, #364]	; (800251c <HAL_RCC_OscConfig+0x470>)
 80023b0:	f043 0301 	orr.w	r3, r3, #1
 80023b4:	6713      	str	r3, [r2, #112]	; 0x70
 80023b6:	e00b      	b.n	80023d0 <HAL_RCC_OscConfig+0x324>
 80023b8:	4b58      	ldr	r3, [pc, #352]	; (800251c <HAL_RCC_OscConfig+0x470>)
 80023ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023bc:	4a57      	ldr	r2, [pc, #348]	; (800251c <HAL_RCC_OscConfig+0x470>)
 80023be:	f023 0301 	bic.w	r3, r3, #1
 80023c2:	6713      	str	r3, [r2, #112]	; 0x70
 80023c4:	4b55      	ldr	r3, [pc, #340]	; (800251c <HAL_RCC_OscConfig+0x470>)
 80023c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023c8:	4a54      	ldr	r2, [pc, #336]	; (800251c <HAL_RCC_OscConfig+0x470>)
 80023ca:	f023 0304 	bic.w	r3, r3, #4
 80023ce:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	689b      	ldr	r3, [r3, #8]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d015      	beq.n	8002404 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023d8:	f7fe ff2e 	bl	8001238 <HAL_GetTick>
 80023dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023de:	e00a      	b.n	80023f6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023e0:	f7fe ff2a 	bl	8001238 <HAL_GetTick>
 80023e4:	4602      	mov	r2, r0
 80023e6:	693b      	ldr	r3, [r7, #16]
 80023e8:	1ad3      	subs	r3, r2, r3
 80023ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d901      	bls.n	80023f6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80023f2:	2303      	movs	r3, #3
 80023f4:	e0cb      	b.n	800258e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023f6:	4b49      	ldr	r3, [pc, #292]	; (800251c <HAL_RCC_OscConfig+0x470>)
 80023f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023fa:	f003 0302 	and.w	r3, r3, #2
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d0ee      	beq.n	80023e0 <HAL_RCC_OscConfig+0x334>
 8002402:	e014      	b.n	800242e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002404:	f7fe ff18 	bl	8001238 <HAL_GetTick>
 8002408:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800240a:	e00a      	b.n	8002422 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800240c:	f7fe ff14 	bl	8001238 <HAL_GetTick>
 8002410:	4602      	mov	r2, r0
 8002412:	693b      	ldr	r3, [r7, #16]
 8002414:	1ad3      	subs	r3, r2, r3
 8002416:	f241 3288 	movw	r2, #5000	; 0x1388
 800241a:	4293      	cmp	r3, r2
 800241c:	d901      	bls.n	8002422 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800241e:	2303      	movs	r3, #3
 8002420:	e0b5      	b.n	800258e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002422:	4b3e      	ldr	r3, [pc, #248]	; (800251c <HAL_RCC_OscConfig+0x470>)
 8002424:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002426:	f003 0302 	and.w	r3, r3, #2
 800242a:	2b00      	cmp	r3, #0
 800242c:	d1ee      	bne.n	800240c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800242e:	7dfb      	ldrb	r3, [r7, #23]
 8002430:	2b01      	cmp	r3, #1
 8002432:	d105      	bne.n	8002440 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002434:	4b39      	ldr	r3, [pc, #228]	; (800251c <HAL_RCC_OscConfig+0x470>)
 8002436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002438:	4a38      	ldr	r2, [pc, #224]	; (800251c <HAL_RCC_OscConfig+0x470>)
 800243a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800243e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	699b      	ldr	r3, [r3, #24]
 8002444:	2b00      	cmp	r3, #0
 8002446:	f000 80a1 	beq.w	800258c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800244a:	4b34      	ldr	r3, [pc, #208]	; (800251c <HAL_RCC_OscConfig+0x470>)
 800244c:	689b      	ldr	r3, [r3, #8]
 800244e:	f003 030c 	and.w	r3, r3, #12
 8002452:	2b08      	cmp	r3, #8
 8002454:	d05c      	beq.n	8002510 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	699b      	ldr	r3, [r3, #24]
 800245a:	2b02      	cmp	r3, #2
 800245c:	d141      	bne.n	80024e2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800245e:	4b31      	ldr	r3, [pc, #196]	; (8002524 <HAL_RCC_OscConfig+0x478>)
 8002460:	2200      	movs	r2, #0
 8002462:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002464:	f7fe fee8 	bl	8001238 <HAL_GetTick>
 8002468:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800246a:	e008      	b.n	800247e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800246c:	f7fe fee4 	bl	8001238 <HAL_GetTick>
 8002470:	4602      	mov	r2, r0
 8002472:	693b      	ldr	r3, [r7, #16]
 8002474:	1ad3      	subs	r3, r2, r3
 8002476:	2b02      	cmp	r3, #2
 8002478:	d901      	bls.n	800247e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800247a:	2303      	movs	r3, #3
 800247c:	e087      	b.n	800258e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800247e:	4b27      	ldr	r3, [pc, #156]	; (800251c <HAL_RCC_OscConfig+0x470>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002486:	2b00      	cmp	r3, #0
 8002488:	d1f0      	bne.n	800246c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	69da      	ldr	r2, [r3, #28]
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6a1b      	ldr	r3, [r3, #32]
 8002492:	431a      	orrs	r2, r3
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002498:	019b      	lsls	r3, r3, #6
 800249a:	431a      	orrs	r2, r3
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024a0:	085b      	lsrs	r3, r3, #1
 80024a2:	3b01      	subs	r3, #1
 80024a4:	041b      	lsls	r3, r3, #16
 80024a6:	431a      	orrs	r2, r3
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024ac:	061b      	lsls	r3, r3, #24
 80024ae:	491b      	ldr	r1, [pc, #108]	; (800251c <HAL_RCC_OscConfig+0x470>)
 80024b0:	4313      	orrs	r3, r2
 80024b2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024b4:	4b1b      	ldr	r3, [pc, #108]	; (8002524 <HAL_RCC_OscConfig+0x478>)
 80024b6:	2201      	movs	r2, #1
 80024b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024ba:	f7fe febd 	bl	8001238 <HAL_GetTick>
 80024be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024c0:	e008      	b.n	80024d4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024c2:	f7fe feb9 	bl	8001238 <HAL_GetTick>
 80024c6:	4602      	mov	r2, r0
 80024c8:	693b      	ldr	r3, [r7, #16]
 80024ca:	1ad3      	subs	r3, r2, r3
 80024cc:	2b02      	cmp	r3, #2
 80024ce:	d901      	bls.n	80024d4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80024d0:	2303      	movs	r3, #3
 80024d2:	e05c      	b.n	800258e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024d4:	4b11      	ldr	r3, [pc, #68]	; (800251c <HAL_RCC_OscConfig+0x470>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d0f0      	beq.n	80024c2 <HAL_RCC_OscConfig+0x416>
 80024e0:	e054      	b.n	800258c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024e2:	4b10      	ldr	r3, [pc, #64]	; (8002524 <HAL_RCC_OscConfig+0x478>)
 80024e4:	2200      	movs	r2, #0
 80024e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024e8:	f7fe fea6 	bl	8001238 <HAL_GetTick>
 80024ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024ee:	e008      	b.n	8002502 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024f0:	f7fe fea2 	bl	8001238 <HAL_GetTick>
 80024f4:	4602      	mov	r2, r0
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	1ad3      	subs	r3, r2, r3
 80024fa:	2b02      	cmp	r3, #2
 80024fc:	d901      	bls.n	8002502 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80024fe:	2303      	movs	r3, #3
 8002500:	e045      	b.n	800258e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002502:	4b06      	ldr	r3, [pc, #24]	; (800251c <HAL_RCC_OscConfig+0x470>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800250a:	2b00      	cmp	r3, #0
 800250c:	d1f0      	bne.n	80024f0 <HAL_RCC_OscConfig+0x444>
 800250e:	e03d      	b.n	800258c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	699b      	ldr	r3, [r3, #24]
 8002514:	2b01      	cmp	r3, #1
 8002516:	d107      	bne.n	8002528 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002518:	2301      	movs	r3, #1
 800251a:	e038      	b.n	800258e <HAL_RCC_OscConfig+0x4e2>
 800251c:	40023800 	.word	0x40023800
 8002520:	40007000 	.word	0x40007000
 8002524:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002528:	4b1b      	ldr	r3, [pc, #108]	; (8002598 <HAL_RCC_OscConfig+0x4ec>)
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	699b      	ldr	r3, [r3, #24]
 8002532:	2b01      	cmp	r3, #1
 8002534:	d028      	beq.n	8002588 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002540:	429a      	cmp	r2, r3
 8002542:	d121      	bne.n	8002588 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800254e:	429a      	cmp	r2, r3
 8002550:	d11a      	bne.n	8002588 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002552:	68fa      	ldr	r2, [r7, #12]
 8002554:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002558:	4013      	ands	r3, r2
 800255a:	687a      	ldr	r2, [r7, #4]
 800255c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800255e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002560:	4293      	cmp	r3, r2
 8002562:	d111      	bne.n	8002588 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800256e:	085b      	lsrs	r3, r3, #1
 8002570:	3b01      	subs	r3, #1
 8002572:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002574:	429a      	cmp	r2, r3
 8002576:	d107      	bne.n	8002588 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002582:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002584:	429a      	cmp	r2, r3
 8002586:	d001      	beq.n	800258c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002588:	2301      	movs	r3, #1
 800258a:	e000      	b.n	800258e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800258c:	2300      	movs	r3, #0
}
 800258e:	4618      	mov	r0, r3
 8002590:	3718      	adds	r7, #24
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}
 8002596:	bf00      	nop
 8002598:	40023800 	.word	0x40023800

0800259c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b084      	sub	sp, #16
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
 80025a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d101      	bne.n	80025b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025ac:	2301      	movs	r3, #1
 80025ae:	e0cc      	b.n	800274a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80025b0:	4b68      	ldr	r3, [pc, #416]	; (8002754 <HAL_RCC_ClockConfig+0x1b8>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f003 0307 	and.w	r3, r3, #7
 80025b8:	683a      	ldr	r2, [r7, #0]
 80025ba:	429a      	cmp	r2, r3
 80025bc:	d90c      	bls.n	80025d8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025be:	4b65      	ldr	r3, [pc, #404]	; (8002754 <HAL_RCC_ClockConfig+0x1b8>)
 80025c0:	683a      	ldr	r2, [r7, #0]
 80025c2:	b2d2      	uxtb	r2, r2
 80025c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025c6:	4b63      	ldr	r3, [pc, #396]	; (8002754 <HAL_RCC_ClockConfig+0x1b8>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f003 0307 	and.w	r3, r3, #7
 80025ce:	683a      	ldr	r2, [r7, #0]
 80025d0:	429a      	cmp	r2, r3
 80025d2:	d001      	beq.n	80025d8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80025d4:	2301      	movs	r3, #1
 80025d6:	e0b8      	b.n	800274a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f003 0302 	and.w	r3, r3, #2
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d020      	beq.n	8002626 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f003 0304 	and.w	r3, r3, #4
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d005      	beq.n	80025fc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80025f0:	4b59      	ldr	r3, [pc, #356]	; (8002758 <HAL_RCC_ClockConfig+0x1bc>)
 80025f2:	689b      	ldr	r3, [r3, #8]
 80025f4:	4a58      	ldr	r2, [pc, #352]	; (8002758 <HAL_RCC_ClockConfig+0x1bc>)
 80025f6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80025fa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f003 0308 	and.w	r3, r3, #8
 8002604:	2b00      	cmp	r3, #0
 8002606:	d005      	beq.n	8002614 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002608:	4b53      	ldr	r3, [pc, #332]	; (8002758 <HAL_RCC_ClockConfig+0x1bc>)
 800260a:	689b      	ldr	r3, [r3, #8]
 800260c:	4a52      	ldr	r2, [pc, #328]	; (8002758 <HAL_RCC_ClockConfig+0x1bc>)
 800260e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002612:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002614:	4b50      	ldr	r3, [pc, #320]	; (8002758 <HAL_RCC_ClockConfig+0x1bc>)
 8002616:	689b      	ldr	r3, [r3, #8]
 8002618:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	689b      	ldr	r3, [r3, #8]
 8002620:	494d      	ldr	r1, [pc, #308]	; (8002758 <HAL_RCC_ClockConfig+0x1bc>)
 8002622:	4313      	orrs	r3, r2
 8002624:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f003 0301 	and.w	r3, r3, #1
 800262e:	2b00      	cmp	r3, #0
 8002630:	d044      	beq.n	80026bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	2b01      	cmp	r3, #1
 8002638:	d107      	bne.n	800264a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800263a:	4b47      	ldr	r3, [pc, #284]	; (8002758 <HAL_RCC_ClockConfig+0x1bc>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002642:	2b00      	cmp	r3, #0
 8002644:	d119      	bne.n	800267a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002646:	2301      	movs	r3, #1
 8002648:	e07f      	b.n	800274a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	2b02      	cmp	r3, #2
 8002650:	d003      	beq.n	800265a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002656:	2b03      	cmp	r3, #3
 8002658:	d107      	bne.n	800266a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800265a:	4b3f      	ldr	r3, [pc, #252]	; (8002758 <HAL_RCC_ClockConfig+0x1bc>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002662:	2b00      	cmp	r3, #0
 8002664:	d109      	bne.n	800267a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002666:	2301      	movs	r3, #1
 8002668:	e06f      	b.n	800274a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800266a:	4b3b      	ldr	r3, [pc, #236]	; (8002758 <HAL_RCC_ClockConfig+0x1bc>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f003 0302 	and.w	r3, r3, #2
 8002672:	2b00      	cmp	r3, #0
 8002674:	d101      	bne.n	800267a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002676:	2301      	movs	r3, #1
 8002678:	e067      	b.n	800274a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800267a:	4b37      	ldr	r3, [pc, #220]	; (8002758 <HAL_RCC_ClockConfig+0x1bc>)
 800267c:	689b      	ldr	r3, [r3, #8]
 800267e:	f023 0203 	bic.w	r2, r3, #3
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	4934      	ldr	r1, [pc, #208]	; (8002758 <HAL_RCC_ClockConfig+0x1bc>)
 8002688:	4313      	orrs	r3, r2
 800268a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800268c:	f7fe fdd4 	bl	8001238 <HAL_GetTick>
 8002690:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002692:	e00a      	b.n	80026aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002694:	f7fe fdd0 	bl	8001238 <HAL_GetTick>
 8002698:	4602      	mov	r2, r0
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	1ad3      	subs	r3, r2, r3
 800269e:	f241 3288 	movw	r2, #5000	; 0x1388
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d901      	bls.n	80026aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80026a6:	2303      	movs	r3, #3
 80026a8:	e04f      	b.n	800274a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026aa:	4b2b      	ldr	r3, [pc, #172]	; (8002758 <HAL_RCC_ClockConfig+0x1bc>)
 80026ac:	689b      	ldr	r3, [r3, #8]
 80026ae:	f003 020c 	and.w	r2, r3, #12
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	009b      	lsls	r3, r3, #2
 80026b8:	429a      	cmp	r2, r3
 80026ba:	d1eb      	bne.n	8002694 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80026bc:	4b25      	ldr	r3, [pc, #148]	; (8002754 <HAL_RCC_ClockConfig+0x1b8>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f003 0307 	and.w	r3, r3, #7
 80026c4:	683a      	ldr	r2, [r7, #0]
 80026c6:	429a      	cmp	r2, r3
 80026c8:	d20c      	bcs.n	80026e4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026ca:	4b22      	ldr	r3, [pc, #136]	; (8002754 <HAL_RCC_ClockConfig+0x1b8>)
 80026cc:	683a      	ldr	r2, [r7, #0]
 80026ce:	b2d2      	uxtb	r2, r2
 80026d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026d2:	4b20      	ldr	r3, [pc, #128]	; (8002754 <HAL_RCC_ClockConfig+0x1b8>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f003 0307 	and.w	r3, r3, #7
 80026da:	683a      	ldr	r2, [r7, #0]
 80026dc:	429a      	cmp	r2, r3
 80026de:	d001      	beq.n	80026e4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80026e0:	2301      	movs	r3, #1
 80026e2:	e032      	b.n	800274a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f003 0304 	and.w	r3, r3, #4
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d008      	beq.n	8002702 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026f0:	4b19      	ldr	r3, [pc, #100]	; (8002758 <HAL_RCC_ClockConfig+0x1bc>)
 80026f2:	689b      	ldr	r3, [r3, #8]
 80026f4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	68db      	ldr	r3, [r3, #12]
 80026fc:	4916      	ldr	r1, [pc, #88]	; (8002758 <HAL_RCC_ClockConfig+0x1bc>)
 80026fe:	4313      	orrs	r3, r2
 8002700:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f003 0308 	and.w	r3, r3, #8
 800270a:	2b00      	cmp	r3, #0
 800270c:	d009      	beq.n	8002722 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800270e:	4b12      	ldr	r3, [pc, #72]	; (8002758 <HAL_RCC_ClockConfig+0x1bc>)
 8002710:	689b      	ldr	r3, [r3, #8]
 8002712:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	691b      	ldr	r3, [r3, #16]
 800271a:	00db      	lsls	r3, r3, #3
 800271c:	490e      	ldr	r1, [pc, #56]	; (8002758 <HAL_RCC_ClockConfig+0x1bc>)
 800271e:	4313      	orrs	r3, r2
 8002720:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002722:	f000 f821 	bl	8002768 <HAL_RCC_GetSysClockFreq>
 8002726:	4602      	mov	r2, r0
 8002728:	4b0b      	ldr	r3, [pc, #44]	; (8002758 <HAL_RCC_ClockConfig+0x1bc>)
 800272a:	689b      	ldr	r3, [r3, #8]
 800272c:	091b      	lsrs	r3, r3, #4
 800272e:	f003 030f 	and.w	r3, r3, #15
 8002732:	490a      	ldr	r1, [pc, #40]	; (800275c <HAL_RCC_ClockConfig+0x1c0>)
 8002734:	5ccb      	ldrb	r3, [r1, r3]
 8002736:	fa22 f303 	lsr.w	r3, r2, r3
 800273a:	4a09      	ldr	r2, [pc, #36]	; (8002760 <HAL_RCC_ClockConfig+0x1c4>)
 800273c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800273e:	4b09      	ldr	r3, [pc, #36]	; (8002764 <HAL_RCC_ClockConfig+0x1c8>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4618      	mov	r0, r3
 8002744:	f7fe fd34 	bl	80011b0 <HAL_InitTick>

  return HAL_OK;
 8002748:	2300      	movs	r3, #0
}
 800274a:	4618      	mov	r0, r3
 800274c:	3710      	adds	r7, #16
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}
 8002752:	bf00      	nop
 8002754:	40023c00 	.word	0x40023c00
 8002758:	40023800 	.word	0x40023800
 800275c:	08004184 	.word	0x08004184
 8002760:	20000004 	.word	0x20000004
 8002764:	20000008 	.word	0x20000008

08002768 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002768:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800276c:	b094      	sub	sp, #80	; 0x50
 800276e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002770:	2300      	movs	r3, #0
 8002772:	647b      	str	r3, [r7, #68]	; 0x44
 8002774:	2300      	movs	r3, #0
 8002776:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002778:	2300      	movs	r3, #0
 800277a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800277c:	2300      	movs	r3, #0
 800277e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002780:	4b79      	ldr	r3, [pc, #484]	; (8002968 <HAL_RCC_GetSysClockFreq+0x200>)
 8002782:	689b      	ldr	r3, [r3, #8]
 8002784:	f003 030c 	and.w	r3, r3, #12
 8002788:	2b08      	cmp	r3, #8
 800278a:	d00d      	beq.n	80027a8 <HAL_RCC_GetSysClockFreq+0x40>
 800278c:	2b08      	cmp	r3, #8
 800278e:	f200 80e1 	bhi.w	8002954 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002792:	2b00      	cmp	r3, #0
 8002794:	d002      	beq.n	800279c <HAL_RCC_GetSysClockFreq+0x34>
 8002796:	2b04      	cmp	r3, #4
 8002798:	d003      	beq.n	80027a2 <HAL_RCC_GetSysClockFreq+0x3a>
 800279a:	e0db      	b.n	8002954 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800279c:	4b73      	ldr	r3, [pc, #460]	; (800296c <HAL_RCC_GetSysClockFreq+0x204>)
 800279e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80027a0:	e0db      	b.n	800295a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80027a2:	4b73      	ldr	r3, [pc, #460]	; (8002970 <HAL_RCC_GetSysClockFreq+0x208>)
 80027a4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80027a6:	e0d8      	b.n	800295a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80027a8:	4b6f      	ldr	r3, [pc, #444]	; (8002968 <HAL_RCC_GetSysClockFreq+0x200>)
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80027b0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80027b2:	4b6d      	ldr	r3, [pc, #436]	; (8002968 <HAL_RCC_GetSysClockFreq+0x200>)
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d063      	beq.n	8002886 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027be:	4b6a      	ldr	r3, [pc, #424]	; (8002968 <HAL_RCC_GetSysClockFreq+0x200>)
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	099b      	lsrs	r3, r3, #6
 80027c4:	2200      	movs	r2, #0
 80027c6:	63bb      	str	r3, [r7, #56]	; 0x38
 80027c8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80027ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027d0:	633b      	str	r3, [r7, #48]	; 0x30
 80027d2:	2300      	movs	r3, #0
 80027d4:	637b      	str	r3, [r7, #52]	; 0x34
 80027d6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80027da:	4622      	mov	r2, r4
 80027dc:	462b      	mov	r3, r5
 80027de:	f04f 0000 	mov.w	r0, #0
 80027e2:	f04f 0100 	mov.w	r1, #0
 80027e6:	0159      	lsls	r1, r3, #5
 80027e8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80027ec:	0150      	lsls	r0, r2, #5
 80027ee:	4602      	mov	r2, r0
 80027f0:	460b      	mov	r3, r1
 80027f2:	4621      	mov	r1, r4
 80027f4:	1a51      	subs	r1, r2, r1
 80027f6:	6139      	str	r1, [r7, #16]
 80027f8:	4629      	mov	r1, r5
 80027fa:	eb63 0301 	sbc.w	r3, r3, r1
 80027fe:	617b      	str	r3, [r7, #20]
 8002800:	f04f 0200 	mov.w	r2, #0
 8002804:	f04f 0300 	mov.w	r3, #0
 8002808:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800280c:	4659      	mov	r1, fp
 800280e:	018b      	lsls	r3, r1, #6
 8002810:	4651      	mov	r1, sl
 8002812:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002816:	4651      	mov	r1, sl
 8002818:	018a      	lsls	r2, r1, #6
 800281a:	4651      	mov	r1, sl
 800281c:	ebb2 0801 	subs.w	r8, r2, r1
 8002820:	4659      	mov	r1, fp
 8002822:	eb63 0901 	sbc.w	r9, r3, r1
 8002826:	f04f 0200 	mov.w	r2, #0
 800282a:	f04f 0300 	mov.w	r3, #0
 800282e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002832:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002836:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800283a:	4690      	mov	r8, r2
 800283c:	4699      	mov	r9, r3
 800283e:	4623      	mov	r3, r4
 8002840:	eb18 0303 	adds.w	r3, r8, r3
 8002844:	60bb      	str	r3, [r7, #8]
 8002846:	462b      	mov	r3, r5
 8002848:	eb49 0303 	adc.w	r3, r9, r3
 800284c:	60fb      	str	r3, [r7, #12]
 800284e:	f04f 0200 	mov.w	r2, #0
 8002852:	f04f 0300 	mov.w	r3, #0
 8002856:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800285a:	4629      	mov	r1, r5
 800285c:	024b      	lsls	r3, r1, #9
 800285e:	4621      	mov	r1, r4
 8002860:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002864:	4621      	mov	r1, r4
 8002866:	024a      	lsls	r2, r1, #9
 8002868:	4610      	mov	r0, r2
 800286a:	4619      	mov	r1, r3
 800286c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800286e:	2200      	movs	r2, #0
 8002870:	62bb      	str	r3, [r7, #40]	; 0x28
 8002872:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002874:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002878:	f7fd fd02 	bl	8000280 <__aeabi_uldivmod>
 800287c:	4602      	mov	r2, r0
 800287e:	460b      	mov	r3, r1
 8002880:	4613      	mov	r3, r2
 8002882:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002884:	e058      	b.n	8002938 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002886:	4b38      	ldr	r3, [pc, #224]	; (8002968 <HAL_RCC_GetSysClockFreq+0x200>)
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	099b      	lsrs	r3, r3, #6
 800288c:	2200      	movs	r2, #0
 800288e:	4618      	mov	r0, r3
 8002890:	4611      	mov	r1, r2
 8002892:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002896:	623b      	str	r3, [r7, #32]
 8002898:	2300      	movs	r3, #0
 800289a:	627b      	str	r3, [r7, #36]	; 0x24
 800289c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80028a0:	4642      	mov	r2, r8
 80028a2:	464b      	mov	r3, r9
 80028a4:	f04f 0000 	mov.w	r0, #0
 80028a8:	f04f 0100 	mov.w	r1, #0
 80028ac:	0159      	lsls	r1, r3, #5
 80028ae:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80028b2:	0150      	lsls	r0, r2, #5
 80028b4:	4602      	mov	r2, r0
 80028b6:	460b      	mov	r3, r1
 80028b8:	4641      	mov	r1, r8
 80028ba:	ebb2 0a01 	subs.w	sl, r2, r1
 80028be:	4649      	mov	r1, r9
 80028c0:	eb63 0b01 	sbc.w	fp, r3, r1
 80028c4:	f04f 0200 	mov.w	r2, #0
 80028c8:	f04f 0300 	mov.w	r3, #0
 80028cc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80028d0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80028d4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80028d8:	ebb2 040a 	subs.w	r4, r2, sl
 80028dc:	eb63 050b 	sbc.w	r5, r3, fp
 80028e0:	f04f 0200 	mov.w	r2, #0
 80028e4:	f04f 0300 	mov.w	r3, #0
 80028e8:	00eb      	lsls	r3, r5, #3
 80028ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80028ee:	00e2      	lsls	r2, r4, #3
 80028f0:	4614      	mov	r4, r2
 80028f2:	461d      	mov	r5, r3
 80028f4:	4643      	mov	r3, r8
 80028f6:	18e3      	adds	r3, r4, r3
 80028f8:	603b      	str	r3, [r7, #0]
 80028fa:	464b      	mov	r3, r9
 80028fc:	eb45 0303 	adc.w	r3, r5, r3
 8002900:	607b      	str	r3, [r7, #4]
 8002902:	f04f 0200 	mov.w	r2, #0
 8002906:	f04f 0300 	mov.w	r3, #0
 800290a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800290e:	4629      	mov	r1, r5
 8002910:	028b      	lsls	r3, r1, #10
 8002912:	4621      	mov	r1, r4
 8002914:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002918:	4621      	mov	r1, r4
 800291a:	028a      	lsls	r2, r1, #10
 800291c:	4610      	mov	r0, r2
 800291e:	4619      	mov	r1, r3
 8002920:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002922:	2200      	movs	r2, #0
 8002924:	61bb      	str	r3, [r7, #24]
 8002926:	61fa      	str	r2, [r7, #28]
 8002928:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800292c:	f7fd fca8 	bl	8000280 <__aeabi_uldivmod>
 8002930:	4602      	mov	r2, r0
 8002932:	460b      	mov	r3, r1
 8002934:	4613      	mov	r3, r2
 8002936:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002938:	4b0b      	ldr	r3, [pc, #44]	; (8002968 <HAL_RCC_GetSysClockFreq+0x200>)
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	0c1b      	lsrs	r3, r3, #16
 800293e:	f003 0303 	and.w	r3, r3, #3
 8002942:	3301      	adds	r3, #1
 8002944:	005b      	lsls	r3, r3, #1
 8002946:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002948:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800294a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800294c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002950:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002952:	e002      	b.n	800295a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002954:	4b05      	ldr	r3, [pc, #20]	; (800296c <HAL_RCC_GetSysClockFreq+0x204>)
 8002956:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002958:	bf00      	nop
    }
  }
  return sysclockfreq;
 800295a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800295c:	4618      	mov	r0, r3
 800295e:	3750      	adds	r7, #80	; 0x50
 8002960:	46bd      	mov	sp, r7
 8002962:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002966:	bf00      	nop
 8002968:	40023800 	.word	0x40023800
 800296c:	00f42400 	.word	0x00f42400
 8002970:	007a1200 	.word	0x007a1200

08002974 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002974:	b480      	push	{r7}
 8002976:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002978:	4b03      	ldr	r3, [pc, #12]	; (8002988 <HAL_RCC_GetHCLKFreq+0x14>)
 800297a:	681b      	ldr	r3, [r3, #0]
}
 800297c:	4618      	mov	r0, r3
 800297e:	46bd      	mov	sp, r7
 8002980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002984:	4770      	bx	lr
 8002986:	bf00      	nop
 8002988:	20000004 	.word	0x20000004

0800298c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002990:	f7ff fff0 	bl	8002974 <HAL_RCC_GetHCLKFreq>
 8002994:	4602      	mov	r2, r0
 8002996:	4b05      	ldr	r3, [pc, #20]	; (80029ac <HAL_RCC_GetPCLK1Freq+0x20>)
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	0a9b      	lsrs	r3, r3, #10
 800299c:	f003 0307 	and.w	r3, r3, #7
 80029a0:	4903      	ldr	r1, [pc, #12]	; (80029b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80029a2:	5ccb      	ldrb	r3, [r1, r3]
 80029a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029a8:	4618      	mov	r0, r3
 80029aa:	bd80      	pop	{r7, pc}
 80029ac:	40023800 	.word	0x40023800
 80029b0:	08004194 	.word	0x08004194

080029b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80029b8:	f7ff ffdc 	bl	8002974 <HAL_RCC_GetHCLKFreq>
 80029bc:	4602      	mov	r2, r0
 80029be:	4b05      	ldr	r3, [pc, #20]	; (80029d4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80029c0:	689b      	ldr	r3, [r3, #8]
 80029c2:	0b5b      	lsrs	r3, r3, #13
 80029c4:	f003 0307 	and.w	r3, r3, #7
 80029c8:	4903      	ldr	r1, [pc, #12]	; (80029d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80029ca:	5ccb      	ldrb	r3, [r1, r3]
 80029cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029d0:	4618      	mov	r0, r3
 80029d2:	bd80      	pop	{r7, pc}
 80029d4:	40023800 	.word	0x40023800
 80029d8:	08004194 	.word	0x08004194

080029dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b082      	sub	sp, #8
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d101      	bne.n	80029ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80029ea:	2301      	movs	r3, #1
 80029ec:	e041      	b.n	8002a72 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029f4:	b2db      	uxtb	r3, r3
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d106      	bne.n	8002a08 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2200      	movs	r2, #0
 80029fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002a02:	6878      	ldr	r0, [r7, #4]
 8002a04:	f7fe fa76 	bl	8000ef4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2202      	movs	r2, #2
 8002a0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681a      	ldr	r2, [r3, #0]
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	3304      	adds	r3, #4
 8002a18:	4619      	mov	r1, r3
 8002a1a:	4610      	mov	r0, r2
 8002a1c:	f000 fa88 	bl	8002f30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2201      	movs	r2, #1
 8002a24:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2201      	movs	r2, #1
 8002a34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2201      	movs	r2, #1
 8002a44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2201      	movs	r2, #1
 8002a4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2201      	movs	r2, #1
 8002a54:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2201      	movs	r2, #1
 8002a64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002a70:	2300      	movs	r3, #0
}
 8002a72:	4618      	mov	r0, r3
 8002a74:	3708      	adds	r7, #8
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}
	...

08002a7c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b085      	sub	sp, #20
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a8a:	b2db      	uxtb	r3, r3
 8002a8c:	2b01      	cmp	r3, #1
 8002a8e:	d001      	beq.n	8002a94 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002a90:	2301      	movs	r3, #1
 8002a92:	e044      	b.n	8002b1e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2202      	movs	r2, #2
 8002a98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	68da      	ldr	r2, [r3, #12]
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f042 0201 	orr.w	r2, r2, #1
 8002aaa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a1e      	ldr	r2, [pc, #120]	; (8002b2c <HAL_TIM_Base_Start_IT+0xb0>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d018      	beq.n	8002ae8 <HAL_TIM_Base_Start_IT+0x6c>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002abe:	d013      	beq.n	8002ae8 <HAL_TIM_Base_Start_IT+0x6c>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a1a      	ldr	r2, [pc, #104]	; (8002b30 <HAL_TIM_Base_Start_IT+0xb4>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d00e      	beq.n	8002ae8 <HAL_TIM_Base_Start_IT+0x6c>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4a19      	ldr	r2, [pc, #100]	; (8002b34 <HAL_TIM_Base_Start_IT+0xb8>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d009      	beq.n	8002ae8 <HAL_TIM_Base_Start_IT+0x6c>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a17      	ldr	r2, [pc, #92]	; (8002b38 <HAL_TIM_Base_Start_IT+0xbc>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d004      	beq.n	8002ae8 <HAL_TIM_Base_Start_IT+0x6c>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4a16      	ldr	r2, [pc, #88]	; (8002b3c <HAL_TIM_Base_Start_IT+0xc0>)
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d111      	bne.n	8002b0c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	689b      	ldr	r3, [r3, #8]
 8002aee:	f003 0307 	and.w	r3, r3, #7
 8002af2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	2b06      	cmp	r3, #6
 8002af8:	d010      	beq.n	8002b1c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	681a      	ldr	r2, [r3, #0]
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f042 0201 	orr.w	r2, r2, #1
 8002b08:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b0a:	e007      	b.n	8002b1c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	681a      	ldr	r2, [r3, #0]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f042 0201 	orr.w	r2, r2, #1
 8002b1a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002b1c:	2300      	movs	r3, #0
}
 8002b1e:	4618      	mov	r0, r3
 8002b20:	3714      	adds	r7, #20
 8002b22:	46bd      	mov	sp, r7
 8002b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b28:	4770      	bx	lr
 8002b2a:	bf00      	nop
 8002b2c:	40010000 	.word	0x40010000
 8002b30:	40000400 	.word	0x40000400
 8002b34:	40000800 	.word	0x40000800
 8002b38:	40000c00 	.word	0x40000c00
 8002b3c:	40014000 	.word	0x40014000

08002b40 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b082      	sub	sp, #8
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	691b      	ldr	r3, [r3, #16]
 8002b4e:	f003 0302 	and.w	r3, r3, #2
 8002b52:	2b02      	cmp	r3, #2
 8002b54:	d122      	bne.n	8002b9c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	68db      	ldr	r3, [r3, #12]
 8002b5c:	f003 0302 	and.w	r3, r3, #2
 8002b60:	2b02      	cmp	r3, #2
 8002b62:	d11b      	bne.n	8002b9c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f06f 0202 	mvn.w	r2, #2
 8002b6c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2201      	movs	r2, #1
 8002b72:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	699b      	ldr	r3, [r3, #24]
 8002b7a:	f003 0303 	and.w	r3, r3, #3
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d003      	beq.n	8002b8a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002b82:	6878      	ldr	r0, [r7, #4]
 8002b84:	f000 f9b5 	bl	8002ef2 <HAL_TIM_IC_CaptureCallback>
 8002b88:	e005      	b.n	8002b96 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b8a:	6878      	ldr	r0, [r7, #4]
 8002b8c:	f000 f9a7 	bl	8002ede <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b90:	6878      	ldr	r0, [r7, #4]
 8002b92:	f000 f9b8 	bl	8002f06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	691b      	ldr	r3, [r3, #16]
 8002ba2:	f003 0304 	and.w	r3, r3, #4
 8002ba6:	2b04      	cmp	r3, #4
 8002ba8:	d122      	bne.n	8002bf0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	68db      	ldr	r3, [r3, #12]
 8002bb0:	f003 0304 	and.w	r3, r3, #4
 8002bb4:	2b04      	cmp	r3, #4
 8002bb6:	d11b      	bne.n	8002bf0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f06f 0204 	mvn.w	r2, #4
 8002bc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2202      	movs	r2, #2
 8002bc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	699b      	ldr	r3, [r3, #24]
 8002bce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d003      	beq.n	8002bde <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bd6:	6878      	ldr	r0, [r7, #4]
 8002bd8:	f000 f98b 	bl	8002ef2 <HAL_TIM_IC_CaptureCallback>
 8002bdc:	e005      	b.n	8002bea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bde:	6878      	ldr	r0, [r7, #4]
 8002be0:	f000 f97d 	bl	8002ede <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002be4:	6878      	ldr	r0, [r7, #4]
 8002be6:	f000 f98e 	bl	8002f06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2200      	movs	r2, #0
 8002bee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	691b      	ldr	r3, [r3, #16]
 8002bf6:	f003 0308 	and.w	r3, r3, #8
 8002bfa:	2b08      	cmp	r3, #8
 8002bfc:	d122      	bne.n	8002c44 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	68db      	ldr	r3, [r3, #12]
 8002c04:	f003 0308 	and.w	r3, r3, #8
 8002c08:	2b08      	cmp	r3, #8
 8002c0a:	d11b      	bne.n	8002c44 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f06f 0208 	mvn.w	r2, #8
 8002c14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2204      	movs	r2, #4
 8002c1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	69db      	ldr	r3, [r3, #28]
 8002c22:	f003 0303 	and.w	r3, r3, #3
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d003      	beq.n	8002c32 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c2a:	6878      	ldr	r0, [r7, #4]
 8002c2c:	f000 f961 	bl	8002ef2 <HAL_TIM_IC_CaptureCallback>
 8002c30:	e005      	b.n	8002c3e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c32:	6878      	ldr	r0, [r7, #4]
 8002c34:	f000 f953 	bl	8002ede <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c38:	6878      	ldr	r0, [r7, #4]
 8002c3a:	f000 f964 	bl	8002f06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2200      	movs	r2, #0
 8002c42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	691b      	ldr	r3, [r3, #16]
 8002c4a:	f003 0310 	and.w	r3, r3, #16
 8002c4e:	2b10      	cmp	r3, #16
 8002c50:	d122      	bne.n	8002c98 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	68db      	ldr	r3, [r3, #12]
 8002c58:	f003 0310 	and.w	r3, r3, #16
 8002c5c:	2b10      	cmp	r3, #16
 8002c5e:	d11b      	bne.n	8002c98 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f06f 0210 	mvn.w	r2, #16
 8002c68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2208      	movs	r2, #8
 8002c6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	69db      	ldr	r3, [r3, #28]
 8002c76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d003      	beq.n	8002c86 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c7e:	6878      	ldr	r0, [r7, #4]
 8002c80:	f000 f937 	bl	8002ef2 <HAL_TIM_IC_CaptureCallback>
 8002c84:	e005      	b.n	8002c92 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c86:	6878      	ldr	r0, [r7, #4]
 8002c88:	f000 f929 	bl	8002ede <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c8c:	6878      	ldr	r0, [r7, #4]
 8002c8e:	f000 f93a 	bl	8002f06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2200      	movs	r2, #0
 8002c96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	691b      	ldr	r3, [r3, #16]
 8002c9e:	f003 0301 	and.w	r3, r3, #1
 8002ca2:	2b01      	cmp	r3, #1
 8002ca4:	d10e      	bne.n	8002cc4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	68db      	ldr	r3, [r3, #12]
 8002cac:	f003 0301 	and.w	r3, r3, #1
 8002cb0:	2b01      	cmp	r3, #1
 8002cb2:	d107      	bne.n	8002cc4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f06f 0201 	mvn.w	r2, #1
 8002cbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002cbe:	6878      	ldr	r0, [r7, #4]
 8002cc0:	f7fd fe24 	bl	800090c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	691b      	ldr	r3, [r3, #16]
 8002cca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cce:	2b80      	cmp	r3, #128	; 0x80
 8002cd0:	d10e      	bne.n	8002cf0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	68db      	ldr	r3, [r3, #12]
 8002cd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cdc:	2b80      	cmp	r3, #128	; 0x80
 8002cde:	d107      	bne.n	8002cf0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002ce8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002cea:	6878      	ldr	r0, [r7, #4]
 8002cec:	f000 fab2 	bl	8003254 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	691b      	ldr	r3, [r3, #16]
 8002cf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cfa:	2b40      	cmp	r3, #64	; 0x40
 8002cfc:	d10e      	bne.n	8002d1c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	68db      	ldr	r3, [r3, #12]
 8002d04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d08:	2b40      	cmp	r3, #64	; 0x40
 8002d0a:	d107      	bne.n	8002d1c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002d14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002d16:	6878      	ldr	r0, [r7, #4]
 8002d18:	f000 f8ff 	bl	8002f1a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	691b      	ldr	r3, [r3, #16]
 8002d22:	f003 0320 	and.w	r3, r3, #32
 8002d26:	2b20      	cmp	r3, #32
 8002d28:	d10e      	bne.n	8002d48 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	68db      	ldr	r3, [r3, #12]
 8002d30:	f003 0320 	and.w	r3, r3, #32
 8002d34:	2b20      	cmp	r3, #32
 8002d36:	d107      	bne.n	8002d48 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f06f 0220 	mvn.w	r2, #32
 8002d40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002d42:	6878      	ldr	r0, [r7, #4]
 8002d44:	f000 fa7c 	bl	8003240 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002d48:	bf00      	nop
 8002d4a:	3708      	adds	r7, #8
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bd80      	pop	{r7, pc}

08002d50 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b084      	sub	sp, #16
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
 8002d58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d64:	2b01      	cmp	r3, #1
 8002d66:	d101      	bne.n	8002d6c <HAL_TIM_ConfigClockSource+0x1c>
 8002d68:	2302      	movs	r3, #2
 8002d6a:	e0b4      	b.n	8002ed6 <HAL_TIM_ConfigClockSource+0x186>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2201      	movs	r2, #1
 8002d70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2202      	movs	r2, #2
 8002d78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	689b      	ldr	r3, [r3, #8]
 8002d82:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002d8a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d8c:	68bb      	ldr	r3, [r7, #8]
 8002d8e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002d92:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	68ba      	ldr	r2, [r7, #8]
 8002d9a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002da4:	d03e      	beq.n	8002e24 <HAL_TIM_ConfigClockSource+0xd4>
 8002da6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002daa:	f200 8087 	bhi.w	8002ebc <HAL_TIM_ConfigClockSource+0x16c>
 8002dae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002db2:	f000 8086 	beq.w	8002ec2 <HAL_TIM_ConfigClockSource+0x172>
 8002db6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002dba:	d87f      	bhi.n	8002ebc <HAL_TIM_ConfigClockSource+0x16c>
 8002dbc:	2b70      	cmp	r3, #112	; 0x70
 8002dbe:	d01a      	beq.n	8002df6 <HAL_TIM_ConfigClockSource+0xa6>
 8002dc0:	2b70      	cmp	r3, #112	; 0x70
 8002dc2:	d87b      	bhi.n	8002ebc <HAL_TIM_ConfigClockSource+0x16c>
 8002dc4:	2b60      	cmp	r3, #96	; 0x60
 8002dc6:	d050      	beq.n	8002e6a <HAL_TIM_ConfigClockSource+0x11a>
 8002dc8:	2b60      	cmp	r3, #96	; 0x60
 8002dca:	d877      	bhi.n	8002ebc <HAL_TIM_ConfigClockSource+0x16c>
 8002dcc:	2b50      	cmp	r3, #80	; 0x50
 8002dce:	d03c      	beq.n	8002e4a <HAL_TIM_ConfigClockSource+0xfa>
 8002dd0:	2b50      	cmp	r3, #80	; 0x50
 8002dd2:	d873      	bhi.n	8002ebc <HAL_TIM_ConfigClockSource+0x16c>
 8002dd4:	2b40      	cmp	r3, #64	; 0x40
 8002dd6:	d058      	beq.n	8002e8a <HAL_TIM_ConfigClockSource+0x13a>
 8002dd8:	2b40      	cmp	r3, #64	; 0x40
 8002dda:	d86f      	bhi.n	8002ebc <HAL_TIM_ConfigClockSource+0x16c>
 8002ddc:	2b30      	cmp	r3, #48	; 0x30
 8002dde:	d064      	beq.n	8002eaa <HAL_TIM_ConfigClockSource+0x15a>
 8002de0:	2b30      	cmp	r3, #48	; 0x30
 8002de2:	d86b      	bhi.n	8002ebc <HAL_TIM_ConfigClockSource+0x16c>
 8002de4:	2b20      	cmp	r3, #32
 8002de6:	d060      	beq.n	8002eaa <HAL_TIM_ConfigClockSource+0x15a>
 8002de8:	2b20      	cmp	r3, #32
 8002dea:	d867      	bhi.n	8002ebc <HAL_TIM_ConfigClockSource+0x16c>
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d05c      	beq.n	8002eaa <HAL_TIM_ConfigClockSource+0x15a>
 8002df0:	2b10      	cmp	r3, #16
 8002df2:	d05a      	beq.n	8002eaa <HAL_TIM_ConfigClockSource+0x15a>
 8002df4:	e062      	b.n	8002ebc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6818      	ldr	r0, [r3, #0]
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	6899      	ldr	r1, [r3, #8]
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	685a      	ldr	r2, [r3, #4]
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	68db      	ldr	r3, [r3, #12]
 8002e06:	f000 f98d 	bl	8003124 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	689b      	ldr	r3, [r3, #8]
 8002e10:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002e12:	68bb      	ldr	r3, [r7, #8]
 8002e14:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002e18:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	68ba      	ldr	r2, [r7, #8]
 8002e20:	609a      	str	r2, [r3, #8]
      break;
 8002e22:	e04f      	b.n	8002ec4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6818      	ldr	r0, [r3, #0]
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	6899      	ldr	r1, [r3, #8]
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	685a      	ldr	r2, [r3, #4]
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	68db      	ldr	r3, [r3, #12]
 8002e34:	f000 f976 	bl	8003124 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	689a      	ldr	r2, [r3, #8]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002e46:	609a      	str	r2, [r3, #8]
      break;
 8002e48:	e03c      	b.n	8002ec4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6818      	ldr	r0, [r3, #0]
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	6859      	ldr	r1, [r3, #4]
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	68db      	ldr	r3, [r3, #12]
 8002e56:	461a      	mov	r2, r3
 8002e58:	f000 f8ea 	bl	8003030 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	2150      	movs	r1, #80	; 0x50
 8002e62:	4618      	mov	r0, r3
 8002e64:	f000 f943 	bl	80030ee <TIM_ITRx_SetConfig>
      break;
 8002e68:	e02c      	b.n	8002ec4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6818      	ldr	r0, [r3, #0]
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	6859      	ldr	r1, [r3, #4]
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	68db      	ldr	r3, [r3, #12]
 8002e76:	461a      	mov	r2, r3
 8002e78:	f000 f909 	bl	800308e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	2160      	movs	r1, #96	; 0x60
 8002e82:	4618      	mov	r0, r3
 8002e84:	f000 f933 	bl	80030ee <TIM_ITRx_SetConfig>
      break;
 8002e88:	e01c      	b.n	8002ec4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6818      	ldr	r0, [r3, #0]
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	6859      	ldr	r1, [r3, #4]
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	68db      	ldr	r3, [r3, #12]
 8002e96:	461a      	mov	r2, r3
 8002e98:	f000 f8ca 	bl	8003030 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	2140      	movs	r1, #64	; 0x40
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	f000 f923 	bl	80030ee <TIM_ITRx_SetConfig>
      break;
 8002ea8:	e00c      	b.n	8002ec4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681a      	ldr	r2, [r3, #0]
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4619      	mov	r1, r3
 8002eb4:	4610      	mov	r0, r2
 8002eb6:	f000 f91a 	bl	80030ee <TIM_ITRx_SetConfig>
      break;
 8002eba:	e003      	b.n	8002ec4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	73fb      	strb	r3, [r7, #15]
      break;
 8002ec0:	e000      	b.n	8002ec4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002ec2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2200      	movs	r2, #0
 8002ed0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002ed4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	3710      	adds	r7, #16
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}

08002ede <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002ede:	b480      	push	{r7}
 8002ee0:	b083      	sub	sp, #12
 8002ee2:	af00      	add	r7, sp, #0
 8002ee4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002ee6:	bf00      	nop
 8002ee8:	370c      	adds	r7, #12
 8002eea:	46bd      	mov	sp, r7
 8002eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef0:	4770      	bx	lr

08002ef2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002ef2:	b480      	push	{r7}
 8002ef4:	b083      	sub	sp, #12
 8002ef6:	af00      	add	r7, sp, #0
 8002ef8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002efa:	bf00      	nop
 8002efc:	370c      	adds	r7, #12
 8002efe:	46bd      	mov	sp, r7
 8002f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f04:	4770      	bx	lr

08002f06 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002f06:	b480      	push	{r7}
 8002f08:	b083      	sub	sp, #12
 8002f0a:	af00      	add	r7, sp, #0
 8002f0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002f0e:	bf00      	nop
 8002f10:	370c      	adds	r7, #12
 8002f12:	46bd      	mov	sp, r7
 8002f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f18:	4770      	bx	lr

08002f1a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002f1a:	b480      	push	{r7}
 8002f1c:	b083      	sub	sp, #12
 8002f1e:	af00      	add	r7, sp, #0
 8002f20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002f22:	bf00      	nop
 8002f24:	370c      	adds	r7, #12
 8002f26:	46bd      	mov	sp, r7
 8002f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2c:	4770      	bx	lr
	...

08002f30 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002f30:	b480      	push	{r7}
 8002f32:	b085      	sub	sp, #20
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
 8002f38:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	4a34      	ldr	r2, [pc, #208]	; (8003014 <TIM_Base_SetConfig+0xe4>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d00f      	beq.n	8002f68 <TIM_Base_SetConfig+0x38>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f4e:	d00b      	beq.n	8002f68 <TIM_Base_SetConfig+0x38>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	4a31      	ldr	r2, [pc, #196]	; (8003018 <TIM_Base_SetConfig+0xe8>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d007      	beq.n	8002f68 <TIM_Base_SetConfig+0x38>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	4a30      	ldr	r2, [pc, #192]	; (800301c <TIM_Base_SetConfig+0xec>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d003      	beq.n	8002f68 <TIM_Base_SetConfig+0x38>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	4a2f      	ldr	r2, [pc, #188]	; (8003020 <TIM_Base_SetConfig+0xf0>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d108      	bne.n	8002f7a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f6e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	68fa      	ldr	r2, [r7, #12]
 8002f76:	4313      	orrs	r3, r2
 8002f78:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	4a25      	ldr	r2, [pc, #148]	; (8003014 <TIM_Base_SetConfig+0xe4>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d01b      	beq.n	8002fba <TIM_Base_SetConfig+0x8a>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f88:	d017      	beq.n	8002fba <TIM_Base_SetConfig+0x8a>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	4a22      	ldr	r2, [pc, #136]	; (8003018 <TIM_Base_SetConfig+0xe8>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d013      	beq.n	8002fba <TIM_Base_SetConfig+0x8a>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	4a21      	ldr	r2, [pc, #132]	; (800301c <TIM_Base_SetConfig+0xec>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d00f      	beq.n	8002fba <TIM_Base_SetConfig+0x8a>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	4a20      	ldr	r2, [pc, #128]	; (8003020 <TIM_Base_SetConfig+0xf0>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d00b      	beq.n	8002fba <TIM_Base_SetConfig+0x8a>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	4a1f      	ldr	r2, [pc, #124]	; (8003024 <TIM_Base_SetConfig+0xf4>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d007      	beq.n	8002fba <TIM_Base_SetConfig+0x8a>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	4a1e      	ldr	r2, [pc, #120]	; (8003028 <TIM_Base_SetConfig+0xf8>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d003      	beq.n	8002fba <TIM_Base_SetConfig+0x8a>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	4a1d      	ldr	r2, [pc, #116]	; (800302c <TIM_Base_SetConfig+0xfc>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d108      	bne.n	8002fcc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fc0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	68db      	ldr	r3, [r3, #12]
 8002fc6:	68fa      	ldr	r2, [r7, #12]
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	695b      	ldr	r3, [r3, #20]
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	68fa      	ldr	r2, [r7, #12]
 8002fde:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	689a      	ldr	r2, [r3, #8]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	681a      	ldr	r2, [r3, #0]
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	4a08      	ldr	r2, [pc, #32]	; (8003014 <TIM_Base_SetConfig+0xe4>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d103      	bne.n	8003000 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	691a      	ldr	r2, [r3, #16]
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2201      	movs	r2, #1
 8003004:	615a      	str	r2, [r3, #20]
}
 8003006:	bf00      	nop
 8003008:	3714      	adds	r7, #20
 800300a:	46bd      	mov	sp, r7
 800300c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003010:	4770      	bx	lr
 8003012:	bf00      	nop
 8003014:	40010000 	.word	0x40010000
 8003018:	40000400 	.word	0x40000400
 800301c:	40000800 	.word	0x40000800
 8003020:	40000c00 	.word	0x40000c00
 8003024:	40014000 	.word	0x40014000
 8003028:	40014400 	.word	0x40014400
 800302c:	40014800 	.word	0x40014800

08003030 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003030:	b480      	push	{r7}
 8003032:	b087      	sub	sp, #28
 8003034:	af00      	add	r7, sp, #0
 8003036:	60f8      	str	r0, [r7, #12]
 8003038:	60b9      	str	r1, [r7, #8]
 800303a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	6a1b      	ldr	r3, [r3, #32]
 8003040:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	6a1b      	ldr	r3, [r3, #32]
 8003046:	f023 0201 	bic.w	r2, r3, #1
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	699b      	ldr	r3, [r3, #24]
 8003052:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003054:	693b      	ldr	r3, [r7, #16]
 8003056:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800305a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	011b      	lsls	r3, r3, #4
 8003060:	693a      	ldr	r2, [r7, #16]
 8003062:	4313      	orrs	r3, r2
 8003064:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003066:	697b      	ldr	r3, [r7, #20]
 8003068:	f023 030a 	bic.w	r3, r3, #10
 800306c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800306e:	697a      	ldr	r2, [r7, #20]
 8003070:	68bb      	ldr	r3, [r7, #8]
 8003072:	4313      	orrs	r3, r2
 8003074:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	693a      	ldr	r2, [r7, #16]
 800307a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	697a      	ldr	r2, [r7, #20]
 8003080:	621a      	str	r2, [r3, #32]
}
 8003082:	bf00      	nop
 8003084:	371c      	adds	r7, #28
 8003086:	46bd      	mov	sp, r7
 8003088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308c:	4770      	bx	lr

0800308e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800308e:	b480      	push	{r7}
 8003090:	b087      	sub	sp, #28
 8003092:	af00      	add	r7, sp, #0
 8003094:	60f8      	str	r0, [r7, #12]
 8003096:	60b9      	str	r1, [r7, #8]
 8003098:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	6a1b      	ldr	r3, [r3, #32]
 800309e:	f023 0210 	bic.w	r2, r3, #16
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	699b      	ldr	r3, [r3, #24]
 80030aa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	6a1b      	ldr	r3, [r3, #32]
 80030b0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80030b2:	697b      	ldr	r3, [r7, #20]
 80030b4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80030b8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	031b      	lsls	r3, r3, #12
 80030be:	697a      	ldr	r2, [r7, #20]
 80030c0:	4313      	orrs	r3, r2
 80030c2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80030c4:	693b      	ldr	r3, [r7, #16]
 80030c6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80030ca:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80030cc:	68bb      	ldr	r3, [r7, #8]
 80030ce:	011b      	lsls	r3, r3, #4
 80030d0:	693a      	ldr	r2, [r7, #16]
 80030d2:	4313      	orrs	r3, r2
 80030d4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	697a      	ldr	r2, [r7, #20]
 80030da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	693a      	ldr	r2, [r7, #16]
 80030e0:	621a      	str	r2, [r3, #32]
}
 80030e2:	bf00      	nop
 80030e4:	371c      	adds	r7, #28
 80030e6:	46bd      	mov	sp, r7
 80030e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ec:	4770      	bx	lr

080030ee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80030ee:	b480      	push	{r7}
 80030f0:	b085      	sub	sp, #20
 80030f2:	af00      	add	r7, sp, #0
 80030f4:	6078      	str	r0, [r7, #4]
 80030f6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	689b      	ldr	r3, [r3, #8]
 80030fc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003104:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003106:	683a      	ldr	r2, [r7, #0]
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	4313      	orrs	r3, r2
 800310c:	f043 0307 	orr.w	r3, r3, #7
 8003110:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	68fa      	ldr	r2, [r7, #12]
 8003116:	609a      	str	r2, [r3, #8]
}
 8003118:	bf00      	nop
 800311a:	3714      	adds	r7, #20
 800311c:	46bd      	mov	sp, r7
 800311e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003122:	4770      	bx	lr

08003124 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003124:	b480      	push	{r7}
 8003126:	b087      	sub	sp, #28
 8003128:	af00      	add	r7, sp, #0
 800312a:	60f8      	str	r0, [r7, #12]
 800312c:	60b9      	str	r1, [r7, #8]
 800312e:	607a      	str	r2, [r7, #4]
 8003130:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	689b      	ldr	r3, [r3, #8]
 8003136:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003138:	697b      	ldr	r3, [r7, #20]
 800313a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800313e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	021a      	lsls	r2, r3, #8
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	431a      	orrs	r2, r3
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	4313      	orrs	r3, r2
 800314c:	697a      	ldr	r2, [r7, #20]
 800314e:	4313      	orrs	r3, r2
 8003150:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	697a      	ldr	r2, [r7, #20]
 8003156:	609a      	str	r2, [r3, #8]
}
 8003158:	bf00      	nop
 800315a:	371c      	adds	r7, #28
 800315c:	46bd      	mov	sp, r7
 800315e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003162:	4770      	bx	lr

08003164 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003164:	b480      	push	{r7}
 8003166:	b085      	sub	sp, #20
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
 800316c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003174:	2b01      	cmp	r3, #1
 8003176:	d101      	bne.n	800317c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003178:	2302      	movs	r3, #2
 800317a:	e050      	b.n	800321e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2201      	movs	r2, #1
 8003180:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2202      	movs	r2, #2
 8003188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	689b      	ldr	r3, [r3, #8]
 800319a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031a2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	68fa      	ldr	r2, [r7, #12]
 80031aa:	4313      	orrs	r3, r2
 80031ac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	68fa      	ldr	r2, [r7, #12]
 80031b4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a1c      	ldr	r2, [pc, #112]	; (800322c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d018      	beq.n	80031f2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031c8:	d013      	beq.n	80031f2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a18      	ldr	r2, [pc, #96]	; (8003230 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d00e      	beq.n	80031f2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a16      	ldr	r2, [pc, #88]	; (8003234 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d009      	beq.n	80031f2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4a15      	ldr	r2, [pc, #84]	; (8003238 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d004      	beq.n	80031f2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a13      	ldr	r2, [pc, #76]	; (800323c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d10c      	bne.n	800320c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80031f2:	68bb      	ldr	r3, [r7, #8]
 80031f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80031f8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	68ba      	ldr	r2, [r7, #8]
 8003200:	4313      	orrs	r3, r2
 8003202:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	68ba      	ldr	r2, [r7, #8]
 800320a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2201      	movs	r2, #1
 8003210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2200      	movs	r2, #0
 8003218:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800321c:	2300      	movs	r3, #0
}
 800321e:	4618      	mov	r0, r3
 8003220:	3714      	adds	r7, #20
 8003222:	46bd      	mov	sp, r7
 8003224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003228:	4770      	bx	lr
 800322a:	bf00      	nop
 800322c:	40010000 	.word	0x40010000
 8003230:	40000400 	.word	0x40000400
 8003234:	40000800 	.word	0x40000800
 8003238:	40000c00 	.word	0x40000c00
 800323c:	40014000 	.word	0x40014000

08003240 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003240:	b480      	push	{r7}
 8003242:	b083      	sub	sp, #12
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003248:	bf00      	nop
 800324a:	370c      	adds	r7, #12
 800324c:	46bd      	mov	sp, r7
 800324e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003252:	4770      	bx	lr

08003254 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003254:	b480      	push	{r7}
 8003256:	b083      	sub	sp, #12
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800325c:	bf00      	nop
 800325e:	370c      	adds	r7, #12
 8003260:	46bd      	mov	sp, r7
 8003262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003266:	4770      	bx	lr

08003268 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b082      	sub	sp, #8
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d101      	bne.n	800327a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003276:	2301      	movs	r3, #1
 8003278:	e03f      	b.n	80032fa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003280:	b2db      	uxtb	r3, r3
 8003282:	2b00      	cmp	r3, #0
 8003284:	d106      	bne.n	8003294 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2200      	movs	r2, #0
 800328a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800328e:	6878      	ldr	r0, [r7, #4]
 8003290:	f7fd fe74 	bl	8000f7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2224      	movs	r2, #36	; 0x24
 8003298:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	68da      	ldr	r2, [r3, #12]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80032aa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80032ac:	6878      	ldr	r0, [r7, #4]
 80032ae:	f000 f829 	bl	8003304 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	691a      	ldr	r2, [r3, #16]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80032c0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	695a      	ldr	r2, [r3, #20]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80032d0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	68da      	ldr	r2, [r3, #12]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80032e0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2200      	movs	r2, #0
 80032e6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2220      	movs	r2, #32
 80032ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2220      	movs	r2, #32
 80032f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80032f8:	2300      	movs	r3, #0
}
 80032fa:	4618      	mov	r0, r3
 80032fc:	3708      	adds	r7, #8
 80032fe:	46bd      	mov	sp, r7
 8003300:	bd80      	pop	{r7, pc}
	...

08003304 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003304:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003308:	b0c0      	sub	sp, #256	; 0x100
 800330a:	af00      	add	r7, sp, #0
 800330c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003310:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	691b      	ldr	r3, [r3, #16]
 8003318:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800331c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003320:	68d9      	ldr	r1, [r3, #12]
 8003322:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003326:	681a      	ldr	r2, [r3, #0]
 8003328:	ea40 0301 	orr.w	r3, r0, r1
 800332c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800332e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003332:	689a      	ldr	r2, [r3, #8]
 8003334:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003338:	691b      	ldr	r3, [r3, #16]
 800333a:	431a      	orrs	r2, r3
 800333c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003340:	695b      	ldr	r3, [r3, #20]
 8003342:	431a      	orrs	r2, r3
 8003344:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003348:	69db      	ldr	r3, [r3, #28]
 800334a:	4313      	orrs	r3, r2
 800334c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003350:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	68db      	ldr	r3, [r3, #12]
 8003358:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800335c:	f021 010c 	bic.w	r1, r1, #12
 8003360:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003364:	681a      	ldr	r2, [r3, #0]
 8003366:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800336a:	430b      	orrs	r3, r1
 800336c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800336e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	695b      	ldr	r3, [r3, #20]
 8003376:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800337a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800337e:	6999      	ldr	r1, [r3, #24]
 8003380:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003384:	681a      	ldr	r2, [r3, #0]
 8003386:	ea40 0301 	orr.w	r3, r0, r1
 800338a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800338c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003390:	681a      	ldr	r2, [r3, #0]
 8003392:	4b8f      	ldr	r3, [pc, #572]	; (80035d0 <UART_SetConfig+0x2cc>)
 8003394:	429a      	cmp	r2, r3
 8003396:	d005      	beq.n	80033a4 <UART_SetConfig+0xa0>
 8003398:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800339c:	681a      	ldr	r2, [r3, #0]
 800339e:	4b8d      	ldr	r3, [pc, #564]	; (80035d4 <UART_SetConfig+0x2d0>)
 80033a0:	429a      	cmp	r2, r3
 80033a2:	d104      	bne.n	80033ae <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80033a4:	f7ff fb06 	bl	80029b4 <HAL_RCC_GetPCLK2Freq>
 80033a8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80033ac:	e003      	b.n	80033b6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80033ae:	f7ff faed 	bl	800298c <HAL_RCC_GetPCLK1Freq>
 80033b2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80033b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033ba:	69db      	ldr	r3, [r3, #28]
 80033bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80033c0:	f040 810c 	bne.w	80035dc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80033c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80033c8:	2200      	movs	r2, #0
 80033ca:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80033ce:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80033d2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80033d6:	4622      	mov	r2, r4
 80033d8:	462b      	mov	r3, r5
 80033da:	1891      	adds	r1, r2, r2
 80033dc:	65b9      	str	r1, [r7, #88]	; 0x58
 80033de:	415b      	adcs	r3, r3
 80033e0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80033e2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80033e6:	4621      	mov	r1, r4
 80033e8:	eb12 0801 	adds.w	r8, r2, r1
 80033ec:	4629      	mov	r1, r5
 80033ee:	eb43 0901 	adc.w	r9, r3, r1
 80033f2:	f04f 0200 	mov.w	r2, #0
 80033f6:	f04f 0300 	mov.w	r3, #0
 80033fa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80033fe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003402:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003406:	4690      	mov	r8, r2
 8003408:	4699      	mov	r9, r3
 800340a:	4623      	mov	r3, r4
 800340c:	eb18 0303 	adds.w	r3, r8, r3
 8003410:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003414:	462b      	mov	r3, r5
 8003416:	eb49 0303 	adc.w	r3, r9, r3
 800341a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800341e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	2200      	movs	r2, #0
 8003426:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800342a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800342e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003432:	460b      	mov	r3, r1
 8003434:	18db      	adds	r3, r3, r3
 8003436:	653b      	str	r3, [r7, #80]	; 0x50
 8003438:	4613      	mov	r3, r2
 800343a:	eb42 0303 	adc.w	r3, r2, r3
 800343e:	657b      	str	r3, [r7, #84]	; 0x54
 8003440:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003444:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003448:	f7fc ff1a 	bl	8000280 <__aeabi_uldivmod>
 800344c:	4602      	mov	r2, r0
 800344e:	460b      	mov	r3, r1
 8003450:	4b61      	ldr	r3, [pc, #388]	; (80035d8 <UART_SetConfig+0x2d4>)
 8003452:	fba3 2302 	umull	r2, r3, r3, r2
 8003456:	095b      	lsrs	r3, r3, #5
 8003458:	011c      	lsls	r4, r3, #4
 800345a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800345e:	2200      	movs	r2, #0
 8003460:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003464:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003468:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800346c:	4642      	mov	r2, r8
 800346e:	464b      	mov	r3, r9
 8003470:	1891      	adds	r1, r2, r2
 8003472:	64b9      	str	r1, [r7, #72]	; 0x48
 8003474:	415b      	adcs	r3, r3
 8003476:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003478:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800347c:	4641      	mov	r1, r8
 800347e:	eb12 0a01 	adds.w	sl, r2, r1
 8003482:	4649      	mov	r1, r9
 8003484:	eb43 0b01 	adc.w	fp, r3, r1
 8003488:	f04f 0200 	mov.w	r2, #0
 800348c:	f04f 0300 	mov.w	r3, #0
 8003490:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003494:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003498:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800349c:	4692      	mov	sl, r2
 800349e:	469b      	mov	fp, r3
 80034a0:	4643      	mov	r3, r8
 80034a2:	eb1a 0303 	adds.w	r3, sl, r3
 80034a6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80034aa:	464b      	mov	r3, r9
 80034ac:	eb4b 0303 	adc.w	r3, fp, r3
 80034b0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80034b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	2200      	movs	r2, #0
 80034bc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80034c0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80034c4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80034c8:	460b      	mov	r3, r1
 80034ca:	18db      	adds	r3, r3, r3
 80034cc:	643b      	str	r3, [r7, #64]	; 0x40
 80034ce:	4613      	mov	r3, r2
 80034d0:	eb42 0303 	adc.w	r3, r2, r3
 80034d4:	647b      	str	r3, [r7, #68]	; 0x44
 80034d6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80034da:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80034de:	f7fc fecf 	bl	8000280 <__aeabi_uldivmod>
 80034e2:	4602      	mov	r2, r0
 80034e4:	460b      	mov	r3, r1
 80034e6:	4611      	mov	r1, r2
 80034e8:	4b3b      	ldr	r3, [pc, #236]	; (80035d8 <UART_SetConfig+0x2d4>)
 80034ea:	fba3 2301 	umull	r2, r3, r3, r1
 80034ee:	095b      	lsrs	r3, r3, #5
 80034f0:	2264      	movs	r2, #100	; 0x64
 80034f2:	fb02 f303 	mul.w	r3, r2, r3
 80034f6:	1acb      	subs	r3, r1, r3
 80034f8:	00db      	lsls	r3, r3, #3
 80034fa:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80034fe:	4b36      	ldr	r3, [pc, #216]	; (80035d8 <UART_SetConfig+0x2d4>)
 8003500:	fba3 2302 	umull	r2, r3, r3, r2
 8003504:	095b      	lsrs	r3, r3, #5
 8003506:	005b      	lsls	r3, r3, #1
 8003508:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800350c:	441c      	add	r4, r3
 800350e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003512:	2200      	movs	r2, #0
 8003514:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003518:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800351c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003520:	4642      	mov	r2, r8
 8003522:	464b      	mov	r3, r9
 8003524:	1891      	adds	r1, r2, r2
 8003526:	63b9      	str	r1, [r7, #56]	; 0x38
 8003528:	415b      	adcs	r3, r3
 800352a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800352c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003530:	4641      	mov	r1, r8
 8003532:	1851      	adds	r1, r2, r1
 8003534:	6339      	str	r1, [r7, #48]	; 0x30
 8003536:	4649      	mov	r1, r9
 8003538:	414b      	adcs	r3, r1
 800353a:	637b      	str	r3, [r7, #52]	; 0x34
 800353c:	f04f 0200 	mov.w	r2, #0
 8003540:	f04f 0300 	mov.w	r3, #0
 8003544:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003548:	4659      	mov	r1, fp
 800354a:	00cb      	lsls	r3, r1, #3
 800354c:	4651      	mov	r1, sl
 800354e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003552:	4651      	mov	r1, sl
 8003554:	00ca      	lsls	r2, r1, #3
 8003556:	4610      	mov	r0, r2
 8003558:	4619      	mov	r1, r3
 800355a:	4603      	mov	r3, r0
 800355c:	4642      	mov	r2, r8
 800355e:	189b      	adds	r3, r3, r2
 8003560:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003564:	464b      	mov	r3, r9
 8003566:	460a      	mov	r2, r1
 8003568:	eb42 0303 	adc.w	r3, r2, r3
 800356c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003570:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	2200      	movs	r2, #0
 8003578:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800357c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003580:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003584:	460b      	mov	r3, r1
 8003586:	18db      	adds	r3, r3, r3
 8003588:	62bb      	str	r3, [r7, #40]	; 0x28
 800358a:	4613      	mov	r3, r2
 800358c:	eb42 0303 	adc.w	r3, r2, r3
 8003590:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003592:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003596:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800359a:	f7fc fe71 	bl	8000280 <__aeabi_uldivmod>
 800359e:	4602      	mov	r2, r0
 80035a0:	460b      	mov	r3, r1
 80035a2:	4b0d      	ldr	r3, [pc, #52]	; (80035d8 <UART_SetConfig+0x2d4>)
 80035a4:	fba3 1302 	umull	r1, r3, r3, r2
 80035a8:	095b      	lsrs	r3, r3, #5
 80035aa:	2164      	movs	r1, #100	; 0x64
 80035ac:	fb01 f303 	mul.w	r3, r1, r3
 80035b0:	1ad3      	subs	r3, r2, r3
 80035b2:	00db      	lsls	r3, r3, #3
 80035b4:	3332      	adds	r3, #50	; 0x32
 80035b6:	4a08      	ldr	r2, [pc, #32]	; (80035d8 <UART_SetConfig+0x2d4>)
 80035b8:	fba2 2303 	umull	r2, r3, r2, r3
 80035bc:	095b      	lsrs	r3, r3, #5
 80035be:	f003 0207 	and.w	r2, r3, #7
 80035c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4422      	add	r2, r4
 80035ca:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80035cc:	e106      	b.n	80037dc <UART_SetConfig+0x4d8>
 80035ce:	bf00      	nop
 80035d0:	40011000 	.word	0x40011000
 80035d4:	40011400 	.word	0x40011400
 80035d8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80035dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80035e0:	2200      	movs	r2, #0
 80035e2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80035e6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80035ea:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80035ee:	4642      	mov	r2, r8
 80035f0:	464b      	mov	r3, r9
 80035f2:	1891      	adds	r1, r2, r2
 80035f4:	6239      	str	r1, [r7, #32]
 80035f6:	415b      	adcs	r3, r3
 80035f8:	627b      	str	r3, [r7, #36]	; 0x24
 80035fa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80035fe:	4641      	mov	r1, r8
 8003600:	1854      	adds	r4, r2, r1
 8003602:	4649      	mov	r1, r9
 8003604:	eb43 0501 	adc.w	r5, r3, r1
 8003608:	f04f 0200 	mov.w	r2, #0
 800360c:	f04f 0300 	mov.w	r3, #0
 8003610:	00eb      	lsls	r3, r5, #3
 8003612:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003616:	00e2      	lsls	r2, r4, #3
 8003618:	4614      	mov	r4, r2
 800361a:	461d      	mov	r5, r3
 800361c:	4643      	mov	r3, r8
 800361e:	18e3      	adds	r3, r4, r3
 8003620:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003624:	464b      	mov	r3, r9
 8003626:	eb45 0303 	adc.w	r3, r5, r3
 800362a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800362e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	2200      	movs	r2, #0
 8003636:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800363a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800363e:	f04f 0200 	mov.w	r2, #0
 8003642:	f04f 0300 	mov.w	r3, #0
 8003646:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800364a:	4629      	mov	r1, r5
 800364c:	008b      	lsls	r3, r1, #2
 800364e:	4621      	mov	r1, r4
 8003650:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003654:	4621      	mov	r1, r4
 8003656:	008a      	lsls	r2, r1, #2
 8003658:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800365c:	f7fc fe10 	bl	8000280 <__aeabi_uldivmod>
 8003660:	4602      	mov	r2, r0
 8003662:	460b      	mov	r3, r1
 8003664:	4b60      	ldr	r3, [pc, #384]	; (80037e8 <UART_SetConfig+0x4e4>)
 8003666:	fba3 2302 	umull	r2, r3, r3, r2
 800366a:	095b      	lsrs	r3, r3, #5
 800366c:	011c      	lsls	r4, r3, #4
 800366e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003672:	2200      	movs	r2, #0
 8003674:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003678:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800367c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003680:	4642      	mov	r2, r8
 8003682:	464b      	mov	r3, r9
 8003684:	1891      	adds	r1, r2, r2
 8003686:	61b9      	str	r1, [r7, #24]
 8003688:	415b      	adcs	r3, r3
 800368a:	61fb      	str	r3, [r7, #28]
 800368c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003690:	4641      	mov	r1, r8
 8003692:	1851      	adds	r1, r2, r1
 8003694:	6139      	str	r1, [r7, #16]
 8003696:	4649      	mov	r1, r9
 8003698:	414b      	adcs	r3, r1
 800369a:	617b      	str	r3, [r7, #20]
 800369c:	f04f 0200 	mov.w	r2, #0
 80036a0:	f04f 0300 	mov.w	r3, #0
 80036a4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80036a8:	4659      	mov	r1, fp
 80036aa:	00cb      	lsls	r3, r1, #3
 80036ac:	4651      	mov	r1, sl
 80036ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80036b2:	4651      	mov	r1, sl
 80036b4:	00ca      	lsls	r2, r1, #3
 80036b6:	4610      	mov	r0, r2
 80036b8:	4619      	mov	r1, r3
 80036ba:	4603      	mov	r3, r0
 80036bc:	4642      	mov	r2, r8
 80036be:	189b      	adds	r3, r3, r2
 80036c0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80036c4:	464b      	mov	r3, r9
 80036c6:	460a      	mov	r2, r1
 80036c8:	eb42 0303 	adc.w	r3, r2, r3
 80036cc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80036d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	2200      	movs	r2, #0
 80036d8:	67bb      	str	r3, [r7, #120]	; 0x78
 80036da:	67fa      	str	r2, [r7, #124]	; 0x7c
 80036dc:	f04f 0200 	mov.w	r2, #0
 80036e0:	f04f 0300 	mov.w	r3, #0
 80036e4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80036e8:	4649      	mov	r1, r9
 80036ea:	008b      	lsls	r3, r1, #2
 80036ec:	4641      	mov	r1, r8
 80036ee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80036f2:	4641      	mov	r1, r8
 80036f4:	008a      	lsls	r2, r1, #2
 80036f6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80036fa:	f7fc fdc1 	bl	8000280 <__aeabi_uldivmod>
 80036fe:	4602      	mov	r2, r0
 8003700:	460b      	mov	r3, r1
 8003702:	4611      	mov	r1, r2
 8003704:	4b38      	ldr	r3, [pc, #224]	; (80037e8 <UART_SetConfig+0x4e4>)
 8003706:	fba3 2301 	umull	r2, r3, r3, r1
 800370a:	095b      	lsrs	r3, r3, #5
 800370c:	2264      	movs	r2, #100	; 0x64
 800370e:	fb02 f303 	mul.w	r3, r2, r3
 8003712:	1acb      	subs	r3, r1, r3
 8003714:	011b      	lsls	r3, r3, #4
 8003716:	3332      	adds	r3, #50	; 0x32
 8003718:	4a33      	ldr	r2, [pc, #204]	; (80037e8 <UART_SetConfig+0x4e4>)
 800371a:	fba2 2303 	umull	r2, r3, r2, r3
 800371e:	095b      	lsrs	r3, r3, #5
 8003720:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003724:	441c      	add	r4, r3
 8003726:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800372a:	2200      	movs	r2, #0
 800372c:	673b      	str	r3, [r7, #112]	; 0x70
 800372e:	677a      	str	r2, [r7, #116]	; 0x74
 8003730:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003734:	4642      	mov	r2, r8
 8003736:	464b      	mov	r3, r9
 8003738:	1891      	adds	r1, r2, r2
 800373a:	60b9      	str	r1, [r7, #8]
 800373c:	415b      	adcs	r3, r3
 800373e:	60fb      	str	r3, [r7, #12]
 8003740:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003744:	4641      	mov	r1, r8
 8003746:	1851      	adds	r1, r2, r1
 8003748:	6039      	str	r1, [r7, #0]
 800374a:	4649      	mov	r1, r9
 800374c:	414b      	adcs	r3, r1
 800374e:	607b      	str	r3, [r7, #4]
 8003750:	f04f 0200 	mov.w	r2, #0
 8003754:	f04f 0300 	mov.w	r3, #0
 8003758:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800375c:	4659      	mov	r1, fp
 800375e:	00cb      	lsls	r3, r1, #3
 8003760:	4651      	mov	r1, sl
 8003762:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003766:	4651      	mov	r1, sl
 8003768:	00ca      	lsls	r2, r1, #3
 800376a:	4610      	mov	r0, r2
 800376c:	4619      	mov	r1, r3
 800376e:	4603      	mov	r3, r0
 8003770:	4642      	mov	r2, r8
 8003772:	189b      	adds	r3, r3, r2
 8003774:	66bb      	str	r3, [r7, #104]	; 0x68
 8003776:	464b      	mov	r3, r9
 8003778:	460a      	mov	r2, r1
 800377a:	eb42 0303 	adc.w	r3, r2, r3
 800377e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003780:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	2200      	movs	r2, #0
 8003788:	663b      	str	r3, [r7, #96]	; 0x60
 800378a:	667a      	str	r2, [r7, #100]	; 0x64
 800378c:	f04f 0200 	mov.w	r2, #0
 8003790:	f04f 0300 	mov.w	r3, #0
 8003794:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003798:	4649      	mov	r1, r9
 800379a:	008b      	lsls	r3, r1, #2
 800379c:	4641      	mov	r1, r8
 800379e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80037a2:	4641      	mov	r1, r8
 80037a4:	008a      	lsls	r2, r1, #2
 80037a6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80037aa:	f7fc fd69 	bl	8000280 <__aeabi_uldivmod>
 80037ae:	4602      	mov	r2, r0
 80037b0:	460b      	mov	r3, r1
 80037b2:	4b0d      	ldr	r3, [pc, #52]	; (80037e8 <UART_SetConfig+0x4e4>)
 80037b4:	fba3 1302 	umull	r1, r3, r3, r2
 80037b8:	095b      	lsrs	r3, r3, #5
 80037ba:	2164      	movs	r1, #100	; 0x64
 80037bc:	fb01 f303 	mul.w	r3, r1, r3
 80037c0:	1ad3      	subs	r3, r2, r3
 80037c2:	011b      	lsls	r3, r3, #4
 80037c4:	3332      	adds	r3, #50	; 0x32
 80037c6:	4a08      	ldr	r2, [pc, #32]	; (80037e8 <UART_SetConfig+0x4e4>)
 80037c8:	fba2 2303 	umull	r2, r3, r2, r3
 80037cc:	095b      	lsrs	r3, r3, #5
 80037ce:	f003 020f 	and.w	r2, r3, #15
 80037d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4422      	add	r2, r4
 80037da:	609a      	str	r2, [r3, #8]
}
 80037dc:	bf00      	nop
 80037de:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80037e2:	46bd      	mov	sp, r7
 80037e4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80037e8:	51eb851f 	.word	0x51eb851f

080037ec <sniprintf>:
 80037ec:	b40c      	push	{r2, r3}
 80037ee:	b530      	push	{r4, r5, lr}
 80037f0:	4b17      	ldr	r3, [pc, #92]	; (8003850 <sniprintf+0x64>)
 80037f2:	1e0c      	subs	r4, r1, #0
 80037f4:	681d      	ldr	r5, [r3, #0]
 80037f6:	b09d      	sub	sp, #116	; 0x74
 80037f8:	da08      	bge.n	800380c <sniprintf+0x20>
 80037fa:	238b      	movs	r3, #139	; 0x8b
 80037fc:	602b      	str	r3, [r5, #0]
 80037fe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003802:	b01d      	add	sp, #116	; 0x74
 8003804:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003808:	b002      	add	sp, #8
 800380a:	4770      	bx	lr
 800380c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8003810:	f8ad 3014 	strh.w	r3, [sp, #20]
 8003814:	bf14      	ite	ne
 8003816:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800381a:	4623      	moveq	r3, r4
 800381c:	9304      	str	r3, [sp, #16]
 800381e:	9307      	str	r3, [sp, #28]
 8003820:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003824:	9002      	str	r0, [sp, #8]
 8003826:	9006      	str	r0, [sp, #24]
 8003828:	f8ad 3016 	strh.w	r3, [sp, #22]
 800382c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800382e:	ab21      	add	r3, sp, #132	; 0x84
 8003830:	a902      	add	r1, sp, #8
 8003832:	4628      	mov	r0, r5
 8003834:	9301      	str	r3, [sp, #4]
 8003836:	f000 f89b 	bl	8003970 <_svfiprintf_r>
 800383a:	1c43      	adds	r3, r0, #1
 800383c:	bfbc      	itt	lt
 800383e:	238b      	movlt	r3, #139	; 0x8b
 8003840:	602b      	strlt	r3, [r5, #0]
 8003842:	2c00      	cmp	r4, #0
 8003844:	d0dd      	beq.n	8003802 <sniprintf+0x16>
 8003846:	9b02      	ldr	r3, [sp, #8]
 8003848:	2200      	movs	r2, #0
 800384a:	701a      	strb	r2, [r3, #0]
 800384c:	e7d9      	b.n	8003802 <sniprintf+0x16>
 800384e:	bf00      	nop
 8003850:	2000005c 	.word	0x2000005c

08003854 <memset>:
 8003854:	4402      	add	r2, r0
 8003856:	4603      	mov	r3, r0
 8003858:	4293      	cmp	r3, r2
 800385a:	d100      	bne.n	800385e <memset+0xa>
 800385c:	4770      	bx	lr
 800385e:	f803 1b01 	strb.w	r1, [r3], #1
 8003862:	e7f9      	b.n	8003858 <memset+0x4>

08003864 <__errno>:
 8003864:	4b01      	ldr	r3, [pc, #4]	; (800386c <__errno+0x8>)
 8003866:	6818      	ldr	r0, [r3, #0]
 8003868:	4770      	bx	lr
 800386a:	bf00      	nop
 800386c:	2000005c 	.word	0x2000005c

08003870 <__libc_init_array>:
 8003870:	b570      	push	{r4, r5, r6, lr}
 8003872:	4d0d      	ldr	r5, [pc, #52]	; (80038a8 <__libc_init_array+0x38>)
 8003874:	4c0d      	ldr	r4, [pc, #52]	; (80038ac <__libc_init_array+0x3c>)
 8003876:	1b64      	subs	r4, r4, r5
 8003878:	10a4      	asrs	r4, r4, #2
 800387a:	2600      	movs	r6, #0
 800387c:	42a6      	cmp	r6, r4
 800387e:	d109      	bne.n	8003894 <__libc_init_array+0x24>
 8003880:	4d0b      	ldr	r5, [pc, #44]	; (80038b0 <__libc_init_array+0x40>)
 8003882:	4c0c      	ldr	r4, [pc, #48]	; (80038b4 <__libc_init_array+0x44>)
 8003884:	f000 fc6a 	bl	800415c <_init>
 8003888:	1b64      	subs	r4, r4, r5
 800388a:	10a4      	asrs	r4, r4, #2
 800388c:	2600      	movs	r6, #0
 800388e:	42a6      	cmp	r6, r4
 8003890:	d105      	bne.n	800389e <__libc_init_array+0x2e>
 8003892:	bd70      	pop	{r4, r5, r6, pc}
 8003894:	f855 3b04 	ldr.w	r3, [r5], #4
 8003898:	4798      	blx	r3
 800389a:	3601      	adds	r6, #1
 800389c:	e7ee      	b.n	800387c <__libc_init_array+0xc>
 800389e:	f855 3b04 	ldr.w	r3, [r5], #4
 80038a2:	4798      	blx	r3
 80038a4:	3601      	adds	r6, #1
 80038a6:	e7f2      	b.n	800388e <__libc_init_array+0x1e>
 80038a8:	080041d8 	.word	0x080041d8
 80038ac:	080041d8 	.word	0x080041d8
 80038b0:	080041d8 	.word	0x080041d8
 80038b4:	080041dc 	.word	0x080041dc

080038b8 <__retarget_lock_acquire_recursive>:
 80038b8:	4770      	bx	lr

080038ba <__retarget_lock_release_recursive>:
 80038ba:	4770      	bx	lr

080038bc <__ssputs_r>:
 80038bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80038c0:	688e      	ldr	r6, [r1, #8]
 80038c2:	461f      	mov	r7, r3
 80038c4:	42be      	cmp	r6, r7
 80038c6:	680b      	ldr	r3, [r1, #0]
 80038c8:	4682      	mov	sl, r0
 80038ca:	460c      	mov	r4, r1
 80038cc:	4690      	mov	r8, r2
 80038ce:	d82c      	bhi.n	800392a <__ssputs_r+0x6e>
 80038d0:	898a      	ldrh	r2, [r1, #12]
 80038d2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80038d6:	d026      	beq.n	8003926 <__ssputs_r+0x6a>
 80038d8:	6965      	ldr	r5, [r4, #20]
 80038da:	6909      	ldr	r1, [r1, #16]
 80038dc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80038e0:	eba3 0901 	sub.w	r9, r3, r1
 80038e4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80038e8:	1c7b      	adds	r3, r7, #1
 80038ea:	444b      	add	r3, r9
 80038ec:	106d      	asrs	r5, r5, #1
 80038ee:	429d      	cmp	r5, r3
 80038f0:	bf38      	it	cc
 80038f2:	461d      	movcc	r5, r3
 80038f4:	0553      	lsls	r3, r2, #21
 80038f6:	d527      	bpl.n	8003948 <__ssputs_r+0x8c>
 80038f8:	4629      	mov	r1, r5
 80038fa:	f000 f957 	bl	8003bac <_malloc_r>
 80038fe:	4606      	mov	r6, r0
 8003900:	b360      	cbz	r0, 800395c <__ssputs_r+0xa0>
 8003902:	6921      	ldr	r1, [r4, #16]
 8003904:	464a      	mov	r2, r9
 8003906:	f000 fbc7 	bl	8004098 <memcpy>
 800390a:	89a3      	ldrh	r3, [r4, #12]
 800390c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003910:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003914:	81a3      	strh	r3, [r4, #12]
 8003916:	6126      	str	r6, [r4, #16]
 8003918:	6165      	str	r5, [r4, #20]
 800391a:	444e      	add	r6, r9
 800391c:	eba5 0509 	sub.w	r5, r5, r9
 8003920:	6026      	str	r6, [r4, #0]
 8003922:	60a5      	str	r5, [r4, #8]
 8003924:	463e      	mov	r6, r7
 8003926:	42be      	cmp	r6, r7
 8003928:	d900      	bls.n	800392c <__ssputs_r+0x70>
 800392a:	463e      	mov	r6, r7
 800392c:	6820      	ldr	r0, [r4, #0]
 800392e:	4632      	mov	r2, r6
 8003930:	4641      	mov	r1, r8
 8003932:	f000 fb86 	bl	8004042 <memmove>
 8003936:	68a3      	ldr	r3, [r4, #8]
 8003938:	1b9b      	subs	r3, r3, r6
 800393a:	60a3      	str	r3, [r4, #8]
 800393c:	6823      	ldr	r3, [r4, #0]
 800393e:	4433      	add	r3, r6
 8003940:	6023      	str	r3, [r4, #0]
 8003942:	2000      	movs	r0, #0
 8003944:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003948:	462a      	mov	r2, r5
 800394a:	f000 fb4b 	bl	8003fe4 <_realloc_r>
 800394e:	4606      	mov	r6, r0
 8003950:	2800      	cmp	r0, #0
 8003952:	d1e0      	bne.n	8003916 <__ssputs_r+0x5a>
 8003954:	6921      	ldr	r1, [r4, #16]
 8003956:	4650      	mov	r0, sl
 8003958:	f000 fbac 	bl	80040b4 <_free_r>
 800395c:	230c      	movs	r3, #12
 800395e:	f8ca 3000 	str.w	r3, [sl]
 8003962:	89a3      	ldrh	r3, [r4, #12]
 8003964:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003968:	81a3      	strh	r3, [r4, #12]
 800396a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800396e:	e7e9      	b.n	8003944 <__ssputs_r+0x88>

08003970 <_svfiprintf_r>:
 8003970:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003974:	4698      	mov	r8, r3
 8003976:	898b      	ldrh	r3, [r1, #12]
 8003978:	061b      	lsls	r3, r3, #24
 800397a:	b09d      	sub	sp, #116	; 0x74
 800397c:	4607      	mov	r7, r0
 800397e:	460d      	mov	r5, r1
 8003980:	4614      	mov	r4, r2
 8003982:	d50e      	bpl.n	80039a2 <_svfiprintf_r+0x32>
 8003984:	690b      	ldr	r3, [r1, #16]
 8003986:	b963      	cbnz	r3, 80039a2 <_svfiprintf_r+0x32>
 8003988:	2140      	movs	r1, #64	; 0x40
 800398a:	f000 f90f 	bl	8003bac <_malloc_r>
 800398e:	6028      	str	r0, [r5, #0]
 8003990:	6128      	str	r0, [r5, #16]
 8003992:	b920      	cbnz	r0, 800399e <_svfiprintf_r+0x2e>
 8003994:	230c      	movs	r3, #12
 8003996:	603b      	str	r3, [r7, #0]
 8003998:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800399c:	e0d0      	b.n	8003b40 <_svfiprintf_r+0x1d0>
 800399e:	2340      	movs	r3, #64	; 0x40
 80039a0:	616b      	str	r3, [r5, #20]
 80039a2:	2300      	movs	r3, #0
 80039a4:	9309      	str	r3, [sp, #36]	; 0x24
 80039a6:	2320      	movs	r3, #32
 80039a8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80039ac:	f8cd 800c 	str.w	r8, [sp, #12]
 80039b0:	2330      	movs	r3, #48	; 0x30
 80039b2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003b58 <_svfiprintf_r+0x1e8>
 80039b6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80039ba:	f04f 0901 	mov.w	r9, #1
 80039be:	4623      	mov	r3, r4
 80039c0:	469a      	mov	sl, r3
 80039c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80039c6:	b10a      	cbz	r2, 80039cc <_svfiprintf_r+0x5c>
 80039c8:	2a25      	cmp	r2, #37	; 0x25
 80039ca:	d1f9      	bne.n	80039c0 <_svfiprintf_r+0x50>
 80039cc:	ebba 0b04 	subs.w	fp, sl, r4
 80039d0:	d00b      	beq.n	80039ea <_svfiprintf_r+0x7a>
 80039d2:	465b      	mov	r3, fp
 80039d4:	4622      	mov	r2, r4
 80039d6:	4629      	mov	r1, r5
 80039d8:	4638      	mov	r0, r7
 80039da:	f7ff ff6f 	bl	80038bc <__ssputs_r>
 80039de:	3001      	adds	r0, #1
 80039e0:	f000 80a9 	beq.w	8003b36 <_svfiprintf_r+0x1c6>
 80039e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80039e6:	445a      	add	r2, fp
 80039e8:	9209      	str	r2, [sp, #36]	; 0x24
 80039ea:	f89a 3000 	ldrb.w	r3, [sl]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	f000 80a1 	beq.w	8003b36 <_svfiprintf_r+0x1c6>
 80039f4:	2300      	movs	r3, #0
 80039f6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80039fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80039fe:	f10a 0a01 	add.w	sl, sl, #1
 8003a02:	9304      	str	r3, [sp, #16]
 8003a04:	9307      	str	r3, [sp, #28]
 8003a06:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003a0a:	931a      	str	r3, [sp, #104]	; 0x68
 8003a0c:	4654      	mov	r4, sl
 8003a0e:	2205      	movs	r2, #5
 8003a10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003a14:	4850      	ldr	r0, [pc, #320]	; (8003b58 <_svfiprintf_r+0x1e8>)
 8003a16:	f7fc fbe3 	bl	80001e0 <memchr>
 8003a1a:	9a04      	ldr	r2, [sp, #16]
 8003a1c:	b9d8      	cbnz	r0, 8003a56 <_svfiprintf_r+0xe6>
 8003a1e:	06d0      	lsls	r0, r2, #27
 8003a20:	bf44      	itt	mi
 8003a22:	2320      	movmi	r3, #32
 8003a24:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003a28:	0711      	lsls	r1, r2, #28
 8003a2a:	bf44      	itt	mi
 8003a2c:	232b      	movmi	r3, #43	; 0x2b
 8003a2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003a32:	f89a 3000 	ldrb.w	r3, [sl]
 8003a36:	2b2a      	cmp	r3, #42	; 0x2a
 8003a38:	d015      	beq.n	8003a66 <_svfiprintf_r+0xf6>
 8003a3a:	9a07      	ldr	r2, [sp, #28]
 8003a3c:	4654      	mov	r4, sl
 8003a3e:	2000      	movs	r0, #0
 8003a40:	f04f 0c0a 	mov.w	ip, #10
 8003a44:	4621      	mov	r1, r4
 8003a46:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003a4a:	3b30      	subs	r3, #48	; 0x30
 8003a4c:	2b09      	cmp	r3, #9
 8003a4e:	d94d      	bls.n	8003aec <_svfiprintf_r+0x17c>
 8003a50:	b1b0      	cbz	r0, 8003a80 <_svfiprintf_r+0x110>
 8003a52:	9207      	str	r2, [sp, #28]
 8003a54:	e014      	b.n	8003a80 <_svfiprintf_r+0x110>
 8003a56:	eba0 0308 	sub.w	r3, r0, r8
 8003a5a:	fa09 f303 	lsl.w	r3, r9, r3
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	9304      	str	r3, [sp, #16]
 8003a62:	46a2      	mov	sl, r4
 8003a64:	e7d2      	b.n	8003a0c <_svfiprintf_r+0x9c>
 8003a66:	9b03      	ldr	r3, [sp, #12]
 8003a68:	1d19      	adds	r1, r3, #4
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	9103      	str	r1, [sp, #12]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	bfbb      	ittet	lt
 8003a72:	425b      	neglt	r3, r3
 8003a74:	f042 0202 	orrlt.w	r2, r2, #2
 8003a78:	9307      	strge	r3, [sp, #28]
 8003a7a:	9307      	strlt	r3, [sp, #28]
 8003a7c:	bfb8      	it	lt
 8003a7e:	9204      	strlt	r2, [sp, #16]
 8003a80:	7823      	ldrb	r3, [r4, #0]
 8003a82:	2b2e      	cmp	r3, #46	; 0x2e
 8003a84:	d10c      	bne.n	8003aa0 <_svfiprintf_r+0x130>
 8003a86:	7863      	ldrb	r3, [r4, #1]
 8003a88:	2b2a      	cmp	r3, #42	; 0x2a
 8003a8a:	d134      	bne.n	8003af6 <_svfiprintf_r+0x186>
 8003a8c:	9b03      	ldr	r3, [sp, #12]
 8003a8e:	1d1a      	adds	r2, r3, #4
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	9203      	str	r2, [sp, #12]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	bfb8      	it	lt
 8003a98:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8003a9c:	3402      	adds	r4, #2
 8003a9e:	9305      	str	r3, [sp, #20]
 8003aa0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8003b68 <_svfiprintf_r+0x1f8>
 8003aa4:	7821      	ldrb	r1, [r4, #0]
 8003aa6:	2203      	movs	r2, #3
 8003aa8:	4650      	mov	r0, sl
 8003aaa:	f7fc fb99 	bl	80001e0 <memchr>
 8003aae:	b138      	cbz	r0, 8003ac0 <_svfiprintf_r+0x150>
 8003ab0:	9b04      	ldr	r3, [sp, #16]
 8003ab2:	eba0 000a 	sub.w	r0, r0, sl
 8003ab6:	2240      	movs	r2, #64	; 0x40
 8003ab8:	4082      	lsls	r2, r0
 8003aba:	4313      	orrs	r3, r2
 8003abc:	3401      	adds	r4, #1
 8003abe:	9304      	str	r3, [sp, #16]
 8003ac0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003ac4:	4825      	ldr	r0, [pc, #148]	; (8003b5c <_svfiprintf_r+0x1ec>)
 8003ac6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003aca:	2206      	movs	r2, #6
 8003acc:	f7fc fb88 	bl	80001e0 <memchr>
 8003ad0:	2800      	cmp	r0, #0
 8003ad2:	d038      	beq.n	8003b46 <_svfiprintf_r+0x1d6>
 8003ad4:	4b22      	ldr	r3, [pc, #136]	; (8003b60 <_svfiprintf_r+0x1f0>)
 8003ad6:	bb1b      	cbnz	r3, 8003b20 <_svfiprintf_r+0x1b0>
 8003ad8:	9b03      	ldr	r3, [sp, #12]
 8003ada:	3307      	adds	r3, #7
 8003adc:	f023 0307 	bic.w	r3, r3, #7
 8003ae0:	3308      	adds	r3, #8
 8003ae2:	9303      	str	r3, [sp, #12]
 8003ae4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003ae6:	4433      	add	r3, r6
 8003ae8:	9309      	str	r3, [sp, #36]	; 0x24
 8003aea:	e768      	b.n	80039be <_svfiprintf_r+0x4e>
 8003aec:	fb0c 3202 	mla	r2, ip, r2, r3
 8003af0:	460c      	mov	r4, r1
 8003af2:	2001      	movs	r0, #1
 8003af4:	e7a6      	b.n	8003a44 <_svfiprintf_r+0xd4>
 8003af6:	2300      	movs	r3, #0
 8003af8:	3401      	adds	r4, #1
 8003afa:	9305      	str	r3, [sp, #20]
 8003afc:	4619      	mov	r1, r3
 8003afe:	f04f 0c0a 	mov.w	ip, #10
 8003b02:	4620      	mov	r0, r4
 8003b04:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003b08:	3a30      	subs	r2, #48	; 0x30
 8003b0a:	2a09      	cmp	r2, #9
 8003b0c:	d903      	bls.n	8003b16 <_svfiprintf_r+0x1a6>
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d0c6      	beq.n	8003aa0 <_svfiprintf_r+0x130>
 8003b12:	9105      	str	r1, [sp, #20]
 8003b14:	e7c4      	b.n	8003aa0 <_svfiprintf_r+0x130>
 8003b16:	fb0c 2101 	mla	r1, ip, r1, r2
 8003b1a:	4604      	mov	r4, r0
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	e7f0      	b.n	8003b02 <_svfiprintf_r+0x192>
 8003b20:	ab03      	add	r3, sp, #12
 8003b22:	9300      	str	r3, [sp, #0]
 8003b24:	462a      	mov	r2, r5
 8003b26:	4b0f      	ldr	r3, [pc, #60]	; (8003b64 <_svfiprintf_r+0x1f4>)
 8003b28:	a904      	add	r1, sp, #16
 8003b2a:	4638      	mov	r0, r7
 8003b2c:	f3af 8000 	nop.w
 8003b30:	1c42      	adds	r2, r0, #1
 8003b32:	4606      	mov	r6, r0
 8003b34:	d1d6      	bne.n	8003ae4 <_svfiprintf_r+0x174>
 8003b36:	89ab      	ldrh	r3, [r5, #12]
 8003b38:	065b      	lsls	r3, r3, #25
 8003b3a:	f53f af2d 	bmi.w	8003998 <_svfiprintf_r+0x28>
 8003b3e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003b40:	b01d      	add	sp, #116	; 0x74
 8003b42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b46:	ab03      	add	r3, sp, #12
 8003b48:	9300      	str	r3, [sp, #0]
 8003b4a:	462a      	mov	r2, r5
 8003b4c:	4b05      	ldr	r3, [pc, #20]	; (8003b64 <_svfiprintf_r+0x1f4>)
 8003b4e:	a904      	add	r1, sp, #16
 8003b50:	4638      	mov	r0, r7
 8003b52:	f000 f919 	bl	8003d88 <_printf_i>
 8003b56:	e7eb      	b.n	8003b30 <_svfiprintf_r+0x1c0>
 8003b58:	0800419c 	.word	0x0800419c
 8003b5c:	080041a6 	.word	0x080041a6
 8003b60:	00000000 	.word	0x00000000
 8003b64:	080038bd 	.word	0x080038bd
 8003b68:	080041a2 	.word	0x080041a2

08003b6c <sbrk_aligned>:
 8003b6c:	b570      	push	{r4, r5, r6, lr}
 8003b6e:	4e0e      	ldr	r6, [pc, #56]	; (8003ba8 <sbrk_aligned+0x3c>)
 8003b70:	460c      	mov	r4, r1
 8003b72:	6831      	ldr	r1, [r6, #0]
 8003b74:	4605      	mov	r5, r0
 8003b76:	b911      	cbnz	r1, 8003b7e <sbrk_aligned+0x12>
 8003b78:	f000 fa7e 	bl	8004078 <_sbrk_r>
 8003b7c:	6030      	str	r0, [r6, #0]
 8003b7e:	4621      	mov	r1, r4
 8003b80:	4628      	mov	r0, r5
 8003b82:	f000 fa79 	bl	8004078 <_sbrk_r>
 8003b86:	1c43      	adds	r3, r0, #1
 8003b88:	d00a      	beq.n	8003ba0 <sbrk_aligned+0x34>
 8003b8a:	1cc4      	adds	r4, r0, #3
 8003b8c:	f024 0403 	bic.w	r4, r4, #3
 8003b90:	42a0      	cmp	r0, r4
 8003b92:	d007      	beq.n	8003ba4 <sbrk_aligned+0x38>
 8003b94:	1a21      	subs	r1, r4, r0
 8003b96:	4628      	mov	r0, r5
 8003b98:	f000 fa6e 	bl	8004078 <_sbrk_r>
 8003b9c:	3001      	adds	r0, #1
 8003b9e:	d101      	bne.n	8003ba4 <sbrk_aligned+0x38>
 8003ba0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8003ba4:	4620      	mov	r0, r4
 8003ba6:	bd70      	pop	{r4, r5, r6, pc}
 8003ba8:	200002f4 	.word	0x200002f4

08003bac <_malloc_r>:
 8003bac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003bb0:	1ccd      	adds	r5, r1, #3
 8003bb2:	f025 0503 	bic.w	r5, r5, #3
 8003bb6:	3508      	adds	r5, #8
 8003bb8:	2d0c      	cmp	r5, #12
 8003bba:	bf38      	it	cc
 8003bbc:	250c      	movcc	r5, #12
 8003bbe:	2d00      	cmp	r5, #0
 8003bc0:	4607      	mov	r7, r0
 8003bc2:	db01      	blt.n	8003bc8 <_malloc_r+0x1c>
 8003bc4:	42a9      	cmp	r1, r5
 8003bc6:	d905      	bls.n	8003bd4 <_malloc_r+0x28>
 8003bc8:	230c      	movs	r3, #12
 8003bca:	603b      	str	r3, [r7, #0]
 8003bcc:	2600      	movs	r6, #0
 8003bce:	4630      	mov	r0, r6
 8003bd0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003bd4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003ca8 <_malloc_r+0xfc>
 8003bd8:	f000 f9f8 	bl	8003fcc <__malloc_lock>
 8003bdc:	f8d8 3000 	ldr.w	r3, [r8]
 8003be0:	461c      	mov	r4, r3
 8003be2:	bb5c      	cbnz	r4, 8003c3c <_malloc_r+0x90>
 8003be4:	4629      	mov	r1, r5
 8003be6:	4638      	mov	r0, r7
 8003be8:	f7ff ffc0 	bl	8003b6c <sbrk_aligned>
 8003bec:	1c43      	adds	r3, r0, #1
 8003bee:	4604      	mov	r4, r0
 8003bf0:	d155      	bne.n	8003c9e <_malloc_r+0xf2>
 8003bf2:	f8d8 4000 	ldr.w	r4, [r8]
 8003bf6:	4626      	mov	r6, r4
 8003bf8:	2e00      	cmp	r6, #0
 8003bfa:	d145      	bne.n	8003c88 <_malloc_r+0xdc>
 8003bfc:	2c00      	cmp	r4, #0
 8003bfe:	d048      	beq.n	8003c92 <_malloc_r+0xe6>
 8003c00:	6823      	ldr	r3, [r4, #0]
 8003c02:	4631      	mov	r1, r6
 8003c04:	4638      	mov	r0, r7
 8003c06:	eb04 0903 	add.w	r9, r4, r3
 8003c0a:	f000 fa35 	bl	8004078 <_sbrk_r>
 8003c0e:	4581      	cmp	r9, r0
 8003c10:	d13f      	bne.n	8003c92 <_malloc_r+0xe6>
 8003c12:	6821      	ldr	r1, [r4, #0]
 8003c14:	1a6d      	subs	r5, r5, r1
 8003c16:	4629      	mov	r1, r5
 8003c18:	4638      	mov	r0, r7
 8003c1a:	f7ff ffa7 	bl	8003b6c <sbrk_aligned>
 8003c1e:	3001      	adds	r0, #1
 8003c20:	d037      	beq.n	8003c92 <_malloc_r+0xe6>
 8003c22:	6823      	ldr	r3, [r4, #0]
 8003c24:	442b      	add	r3, r5
 8003c26:	6023      	str	r3, [r4, #0]
 8003c28:	f8d8 3000 	ldr.w	r3, [r8]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d038      	beq.n	8003ca2 <_malloc_r+0xf6>
 8003c30:	685a      	ldr	r2, [r3, #4]
 8003c32:	42a2      	cmp	r2, r4
 8003c34:	d12b      	bne.n	8003c8e <_malloc_r+0xe2>
 8003c36:	2200      	movs	r2, #0
 8003c38:	605a      	str	r2, [r3, #4]
 8003c3a:	e00f      	b.n	8003c5c <_malloc_r+0xb0>
 8003c3c:	6822      	ldr	r2, [r4, #0]
 8003c3e:	1b52      	subs	r2, r2, r5
 8003c40:	d41f      	bmi.n	8003c82 <_malloc_r+0xd6>
 8003c42:	2a0b      	cmp	r2, #11
 8003c44:	d917      	bls.n	8003c76 <_malloc_r+0xca>
 8003c46:	1961      	adds	r1, r4, r5
 8003c48:	42a3      	cmp	r3, r4
 8003c4a:	6025      	str	r5, [r4, #0]
 8003c4c:	bf18      	it	ne
 8003c4e:	6059      	strne	r1, [r3, #4]
 8003c50:	6863      	ldr	r3, [r4, #4]
 8003c52:	bf08      	it	eq
 8003c54:	f8c8 1000 	streq.w	r1, [r8]
 8003c58:	5162      	str	r2, [r4, r5]
 8003c5a:	604b      	str	r3, [r1, #4]
 8003c5c:	4638      	mov	r0, r7
 8003c5e:	f104 060b 	add.w	r6, r4, #11
 8003c62:	f000 f9b9 	bl	8003fd8 <__malloc_unlock>
 8003c66:	f026 0607 	bic.w	r6, r6, #7
 8003c6a:	1d23      	adds	r3, r4, #4
 8003c6c:	1af2      	subs	r2, r6, r3
 8003c6e:	d0ae      	beq.n	8003bce <_malloc_r+0x22>
 8003c70:	1b9b      	subs	r3, r3, r6
 8003c72:	50a3      	str	r3, [r4, r2]
 8003c74:	e7ab      	b.n	8003bce <_malloc_r+0x22>
 8003c76:	42a3      	cmp	r3, r4
 8003c78:	6862      	ldr	r2, [r4, #4]
 8003c7a:	d1dd      	bne.n	8003c38 <_malloc_r+0x8c>
 8003c7c:	f8c8 2000 	str.w	r2, [r8]
 8003c80:	e7ec      	b.n	8003c5c <_malloc_r+0xb0>
 8003c82:	4623      	mov	r3, r4
 8003c84:	6864      	ldr	r4, [r4, #4]
 8003c86:	e7ac      	b.n	8003be2 <_malloc_r+0x36>
 8003c88:	4634      	mov	r4, r6
 8003c8a:	6876      	ldr	r6, [r6, #4]
 8003c8c:	e7b4      	b.n	8003bf8 <_malloc_r+0x4c>
 8003c8e:	4613      	mov	r3, r2
 8003c90:	e7cc      	b.n	8003c2c <_malloc_r+0x80>
 8003c92:	230c      	movs	r3, #12
 8003c94:	603b      	str	r3, [r7, #0]
 8003c96:	4638      	mov	r0, r7
 8003c98:	f000 f99e 	bl	8003fd8 <__malloc_unlock>
 8003c9c:	e797      	b.n	8003bce <_malloc_r+0x22>
 8003c9e:	6025      	str	r5, [r4, #0]
 8003ca0:	e7dc      	b.n	8003c5c <_malloc_r+0xb0>
 8003ca2:	605b      	str	r3, [r3, #4]
 8003ca4:	deff      	udf	#255	; 0xff
 8003ca6:	bf00      	nop
 8003ca8:	200002f0 	.word	0x200002f0

08003cac <_printf_common>:
 8003cac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003cb0:	4616      	mov	r6, r2
 8003cb2:	4699      	mov	r9, r3
 8003cb4:	688a      	ldr	r2, [r1, #8]
 8003cb6:	690b      	ldr	r3, [r1, #16]
 8003cb8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	bfb8      	it	lt
 8003cc0:	4613      	movlt	r3, r2
 8003cc2:	6033      	str	r3, [r6, #0]
 8003cc4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003cc8:	4607      	mov	r7, r0
 8003cca:	460c      	mov	r4, r1
 8003ccc:	b10a      	cbz	r2, 8003cd2 <_printf_common+0x26>
 8003cce:	3301      	adds	r3, #1
 8003cd0:	6033      	str	r3, [r6, #0]
 8003cd2:	6823      	ldr	r3, [r4, #0]
 8003cd4:	0699      	lsls	r1, r3, #26
 8003cd6:	bf42      	ittt	mi
 8003cd8:	6833      	ldrmi	r3, [r6, #0]
 8003cda:	3302      	addmi	r3, #2
 8003cdc:	6033      	strmi	r3, [r6, #0]
 8003cde:	6825      	ldr	r5, [r4, #0]
 8003ce0:	f015 0506 	ands.w	r5, r5, #6
 8003ce4:	d106      	bne.n	8003cf4 <_printf_common+0x48>
 8003ce6:	f104 0a19 	add.w	sl, r4, #25
 8003cea:	68e3      	ldr	r3, [r4, #12]
 8003cec:	6832      	ldr	r2, [r6, #0]
 8003cee:	1a9b      	subs	r3, r3, r2
 8003cf0:	42ab      	cmp	r3, r5
 8003cf2:	dc26      	bgt.n	8003d42 <_printf_common+0x96>
 8003cf4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003cf8:	1e13      	subs	r3, r2, #0
 8003cfa:	6822      	ldr	r2, [r4, #0]
 8003cfc:	bf18      	it	ne
 8003cfe:	2301      	movne	r3, #1
 8003d00:	0692      	lsls	r2, r2, #26
 8003d02:	d42b      	bmi.n	8003d5c <_printf_common+0xb0>
 8003d04:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003d08:	4649      	mov	r1, r9
 8003d0a:	4638      	mov	r0, r7
 8003d0c:	47c0      	blx	r8
 8003d0e:	3001      	adds	r0, #1
 8003d10:	d01e      	beq.n	8003d50 <_printf_common+0xa4>
 8003d12:	6823      	ldr	r3, [r4, #0]
 8003d14:	6922      	ldr	r2, [r4, #16]
 8003d16:	f003 0306 	and.w	r3, r3, #6
 8003d1a:	2b04      	cmp	r3, #4
 8003d1c:	bf02      	ittt	eq
 8003d1e:	68e5      	ldreq	r5, [r4, #12]
 8003d20:	6833      	ldreq	r3, [r6, #0]
 8003d22:	1aed      	subeq	r5, r5, r3
 8003d24:	68a3      	ldr	r3, [r4, #8]
 8003d26:	bf0c      	ite	eq
 8003d28:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003d2c:	2500      	movne	r5, #0
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	bfc4      	itt	gt
 8003d32:	1a9b      	subgt	r3, r3, r2
 8003d34:	18ed      	addgt	r5, r5, r3
 8003d36:	2600      	movs	r6, #0
 8003d38:	341a      	adds	r4, #26
 8003d3a:	42b5      	cmp	r5, r6
 8003d3c:	d11a      	bne.n	8003d74 <_printf_common+0xc8>
 8003d3e:	2000      	movs	r0, #0
 8003d40:	e008      	b.n	8003d54 <_printf_common+0xa8>
 8003d42:	2301      	movs	r3, #1
 8003d44:	4652      	mov	r2, sl
 8003d46:	4649      	mov	r1, r9
 8003d48:	4638      	mov	r0, r7
 8003d4a:	47c0      	blx	r8
 8003d4c:	3001      	adds	r0, #1
 8003d4e:	d103      	bne.n	8003d58 <_printf_common+0xac>
 8003d50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003d54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d58:	3501      	adds	r5, #1
 8003d5a:	e7c6      	b.n	8003cea <_printf_common+0x3e>
 8003d5c:	18e1      	adds	r1, r4, r3
 8003d5e:	1c5a      	adds	r2, r3, #1
 8003d60:	2030      	movs	r0, #48	; 0x30
 8003d62:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003d66:	4422      	add	r2, r4
 8003d68:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003d6c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003d70:	3302      	adds	r3, #2
 8003d72:	e7c7      	b.n	8003d04 <_printf_common+0x58>
 8003d74:	2301      	movs	r3, #1
 8003d76:	4622      	mov	r2, r4
 8003d78:	4649      	mov	r1, r9
 8003d7a:	4638      	mov	r0, r7
 8003d7c:	47c0      	blx	r8
 8003d7e:	3001      	adds	r0, #1
 8003d80:	d0e6      	beq.n	8003d50 <_printf_common+0xa4>
 8003d82:	3601      	adds	r6, #1
 8003d84:	e7d9      	b.n	8003d3a <_printf_common+0x8e>
	...

08003d88 <_printf_i>:
 8003d88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003d8c:	7e0f      	ldrb	r7, [r1, #24]
 8003d8e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003d90:	2f78      	cmp	r7, #120	; 0x78
 8003d92:	4691      	mov	r9, r2
 8003d94:	4680      	mov	r8, r0
 8003d96:	460c      	mov	r4, r1
 8003d98:	469a      	mov	sl, r3
 8003d9a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003d9e:	d807      	bhi.n	8003db0 <_printf_i+0x28>
 8003da0:	2f62      	cmp	r7, #98	; 0x62
 8003da2:	d80a      	bhi.n	8003dba <_printf_i+0x32>
 8003da4:	2f00      	cmp	r7, #0
 8003da6:	f000 80d4 	beq.w	8003f52 <_printf_i+0x1ca>
 8003daa:	2f58      	cmp	r7, #88	; 0x58
 8003dac:	f000 80c0 	beq.w	8003f30 <_printf_i+0x1a8>
 8003db0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003db4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003db8:	e03a      	b.n	8003e30 <_printf_i+0xa8>
 8003dba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003dbe:	2b15      	cmp	r3, #21
 8003dc0:	d8f6      	bhi.n	8003db0 <_printf_i+0x28>
 8003dc2:	a101      	add	r1, pc, #4	; (adr r1, 8003dc8 <_printf_i+0x40>)
 8003dc4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003dc8:	08003e21 	.word	0x08003e21
 8003dcc:	08003e35 	.word	0x08003e35
 8003dd0:	08003db1 	.word	0x08003db1
 8003dd4:	08003db1 	.word	0x08003db1
 8003dd8:	08003db1 	.word	0x08003db1
 8003ddc:	08003db1 	.word	0x08003db1
 8003de0:	08003e35 	.word	0x08003e35
 8003de4:	08003db1 	.word	0x08003db1
 8003de8:	08003db1 	.word	0x08003db1
 8003dec:	08003db1 	.word	0x08003db1
 8003df0:	08003db1 	.word	0x08003db1
 8003df4:	08003f39 	.word	0x08003f39
 8003df8:	08003e61 	.word	0x08003e61
 8003dfc:	08003ef3 	.word	0x08003ef3
 8003e00:	08003db1 	.word	0x08003db1
 8003e04:	08003db1 	.word	0x08003db1
 8003e08:	08003f5b 	.word	0x08003f5b
 8003e0c:	08003db1 	.word	0x08003db1
 8003e10:	08003e61 	.word	0x08003e61
 8003e14:	08003db1 	.word	0x08003db1
 8003e18:	08003db1 	.word	0x08003db1
 8003e1c:	08003efb 	.word	0x08003efb
 8003e20:	682b      	ldr	r3, [r5, #0]
 8003e22:	1d1a      	adds	r2, r3, #4
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	602a      	str	r2, [r5, #0]
 8003e28:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003e2c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003e30:	2301      	movs	r3, #1
 8003e32:	e09f      	b.n	8003f74 <_printf_i+0x1ec>
 8003e34:	6820      	ldr	r0, [r4, #0]
 8003e36:	682b      	ldr	r3, [r5, #0]
 8003e38:	0607      	lsls	r7, r0, #24
 8003e3a:	f103 0104 	add.w	r1, r3, #4
 8003e3e:	6029      	str	r1, [r5, #0]
 8003e40:	d501      	bpl.n	8003e46 <_printf_i+0xbe>
 8003e42:	681e      	ldr	r6, [r3, #0]
 8003e44:	e003      	b.n	8003e4e <_printf_i+0xc6>
 8003e46:	0646      	lsls	r6, r0, #25
 8003e48:	d5fb      	bpl.n	8003e42 <_printf_i+0xba>
 8003e4a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8003e4e:	2e00      	cmp	r6, #0
 8003e50:	da03      	bge.n	8003e5a <_printf_i+0xd2>
 8003e52:	232d      	movs	r3, #45	; 0x2d
 8003e54:	4276      	negs	r6, r6
 8003e56:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003e5a:	485a      	ldr	r0, [pc, #360]	; (8003fc4 <_printf_i+0x23c>)
 8003e5c:	230a      	movs	r3, #10
 8003e5e:	e012      	b.n	8003e86 <_printf_i+0xfe>
 8003e60:	682b      	ldr	r3, [r5, #0]
 8003e62:	6820      	ldr	r0, [r4, #0]
 8003e64:	1d19      	adds	r1, r3, #4
 8003e66:	6029      	str	r1, [r5, #0]
 8003e68:	0605      	lsls	r5, r0, #24
 8003e6a:	d501      	bpl.n	8003e70 <_printf_i+0xe8>
 8003e6c:	681e      	ldr	r6, [r3, #0]
 8003e6e:	e002      	b.n	8003e76 <_printf_i+0xee>
 8003e70:	0641      	lsls	r1, r0, #25
 8003e72:	d5fb      	bpl.n	8003e6c <_printf_i+0xe4>
 8003e74:	881e      	ldrh	r6, [r3, #0]
 8003e76:	4853      	ldr	r0, [pc, #332]	; (8003fc4 <_printf_i+0x23c>)
 8003e78:	2f6f      	cmp	r7, #111	; 0x6f
 8003e7a:	bf0c      	ite	eq
 8003e7c:	2308      	moveq	r3, #8
 8003e7e:	230a      	movne	r3, #10
 8003e80:	2100      	movs	r1, #0
 8003e82:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003e86:	6865      	ldr	r5, [r4, #4]
 8003e88:	60a5      	str	r5, [r4, #8]
 8003e8a:	2d00      	cmp	r5, #0
 8003e8c:	bfa2      	ittt	ge
 8003e8e:	6821      	ldrge	r1, [r4, #0]
 8003e90:	f021 0104 	bicge.w	r1, r1, #4
 8003e94:	6021      	strge	r1, [r4, #0]
 8003e96:	b90e      	cbnz	r6, 8003e9c <_printf_i+0x114>
 8003e98:	2d00      	cmp	r5, #0
 8003e9a:	d04b      	beq.n	8003f34 <_printf_i+0x1ac>
 8003e9c:	4615      	mov	r5, r2
 8003e9e:	fbb6 f1f3 	udiv	r1, r6, r3
 8003ea2:	fb03 6711 	mls	r7, r3, r1, r6
 8003ea6:	5dc7      	ldrb	r7, [r0, r7]
 8003ea8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003eac:	4637      	mov	r7, r6
 8003eae:	42bb      	cmp	r3, r7
 8003eb0:	460e      	mov	r6, r1
 8003eb2:	d9f4      	bls.n	8003e9e <_printf_i+0x116>
 8003eb4:	2b08      	cmp	r3, #8
 8003eb6:	d10b      	bne.n	8003ed0 <_printf_i+0x148>
 8003eb8:	6823      	ldr	r3, [r4, #0]
 8003eba:	07de      	lsls	r6, r3, #31
 8003ebc:	d508      	bpl.n	8003ed0 <_printf_i+0x148>
 8003ebe:	6923      	ldr	r3, [r4, #16]
 8003ec0:	6861      	ldr	r1, [r4, #4]
 8003ec2:	4299      	cmp	r1, r3
 8003ec4:	bfde      	ittt	le
 8003ec6:	2330      	movle	r3, #48	; 0x30
 8003ec8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003ecc:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8003ed0:	1b52      	subs	r2, r2, r5
 8003ed2:	6122      	str	r2, [r4, #16]
 8003ed4:	f8cd a000 	str.w	sl, [sp]
 8003ed8:	464b      	mov	r3, r9
 8003eda:	aa03      	add	r2, sp, #12
 8003edc:	4621      	mov	r1, r4
 8003ede:	4640      	mov	r0, r8
 8003ee0:	f7ff fee4 	bl	8003cac <_printf_common>
 8003ee4:	3001      	adds	r0, #1
 8003ee6:	d14a      	bne.n	8003f7e <_printf_i+0x1f6>
 8003ee8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003eec:	b004      	add	sp, #16
 8003eee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ef2:	6823      	ldr	r3, [r4, #0]
 8003ef4:	f043 0320 	orr.w	r3, r3, #32
 8003ef8:	6023      	str	r3, [r4, #0]
 8003efa:	4833      	ldr	r0, [pc, #204]	; (8003fc8 <_printf_i+0x240>)
 8003efc:	2778      	movs	r7, #120	; 0x78
 8003efe:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003f02:	6823      	ldr	r3, [r4, #0]
 8003f04:	6829      	ldr	r1, [r5, #0]
 8003f06:	061f      	lsls	r7, r3, #24
 8003f08:	f851 6b04 	ldr.w	r6, [r1], #4
 8003f0c:	d402      	bmi.n	8003f14 <_printf_i+0x18c>
 8003f0e:	065f      	lsls	r7, r3, #25
 8003f10:	bf48      	it	mi
 8003f12:	b2b6      	uxthmi	r6, r6
 8003f14:	07df      	lsls	r7, r3, #31
 8003f16:	bf48      	it	mi
 8003f18:	f043 0320 	orrmi.w	r3, r3, #32
 8003f1c:	6029      	str	r1, [r5, #0]
 8003f1e:	bf48      	it	mi
 8003f20:	6023      	strmi	r3, [r4, #0]
 8003f22:	b91e      	cbnz	r6, 8003f2c <_printf_i+0x1a4>
 8003f24:	6823      	ldr	r3, [r4, #0]
 8003f26:	f023 0320 	bic.w	r3, r3, #32
 8003f2a:	6023      	str	r3, [r4, #0]
 8003f2c:	2310      	movs	r3, #16
 8003f2e:	e7a7      	b.n	8003e80 <_printf_i+0xf8>
 8003f30:	4824      	ldr	r0, [pc, #144]	; (8003fc4 <_printf_i+0x23c>)
 8003f32:	e7e4      	b.n	8003efe <_printf_i+0x176>
 8003f34:	4615      	mov	r5, r2
 8003f36:	e7bd      	b.n	8003eb4 <_printf_i+0x12c>
 8003f38:	682b      	ldr	r3, [r5, #0]
 8003f3a:	6826      	ldr	r6, [r4, #0]
 8003f3c:	6961      	ldr	r1, [r4, #20]
 8003f3e:	1d18      	adds	r0, r3, #4
 8003f40:	6028      	str	r0, [r5, #0]
 8003f42:	0635      	lsls	r5, r6, #24
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	d501      	bpl.n	8003f4c <_printf_i+0x1c4>
 8003f48:	6019      	str	r1, [r3, #0]
 8003f4a:	e002      	b.n	8003f52 <_printf_i+0x1ca>
 8003f4c:	0670      	lsls	r0, r6, #25
 8003f4e:	d5fb      	bpl.n	8003f48 <_printf_i+0x1c0>
 8003f50:	8019      	strh	r1, [r3, #0]
 8003f52:	2300      	movs	r3, #0
 8003f54:	6123      	str	r3, [r4, #16]
 8003f56:	4615      	mov	r5, r2
 8003f58:	e7bc      	b.n	8003ed4 <_printf_i+0x14c>
 8003f5a:	682b      	ldr	r3, [r5, #0]
 8003f5c:	1d1a      	adds	r2, r3, #4
 8003f5e:	602a      	str	r2, [r5, #0]
 8003f60:	681d      	ldr	r5, [r3, #0]
 8003f62:	6862      	ldr	r2, [r4, #4]
 8003f64:	2100      	movs	r1, #0
 8003f66:	4628      	mov	r0, r5
 8003f68:	f7fc f93a 	bl	80001e0 <memchr>
 8003f6c:	b108      	cbz	r0, 8003f72 <_printf_i+0x1ea>
 8003f6e:	1b40      	subs	r0, r0, r5
 8003f70:	6060      	str	r0, [r4, #4]
 8003f72:	6863      	ldr	r3, [r4, #4]
 8003f74:	6123      	str	r3, [r4, #16]
 8003f76:	2300      	movs	r3, #0
 8003f78:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003f7c:	e7aa      	b.n	8003ed4 <_printf_i+0x14c>
 8003f7e:	6923      	ldr	r3, [r4, #16]
 8003f80:	462a      	mov	r2, r5
 8003f82:	4649      	mov	r1, r9
 8003f84:	4640      	mov	r0, r8
 8003f86:	47d0      	blx	sl
 8003f88:	3001      	adds	r0, #1
 8003f8a:	d0ad      	beq.n	8003ee8 <_printf_i+0x160>
 8003f8c:	6823      	ldr	r3, [r4, #0]
 8003f8e:	079b      	lsls	r3, r3, #30
 8003f90:	d413      	bmi.n	8003fba <_printf_i+0x232>
 8003f92:	68e0      	ldr	r0, [r4, #12]
 8003f94:	9b03      	ldr	r3, [sp, #12]
 8003f96:	4298      	cmp	r0, r3
 8003f98:	bfb8      	it	lt
 8003f9a:	4618      	movlt	r0, r3
 8003f9c:	e7a6      	b.n	8003eec <_printf_i+0x164>
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	4632      	mov	r2, r6
 8003fa2:	4649      	mov	r1, r9
 8003fa4:	4640      	mov	r0, r8
 8003fa6:	47d0      	blx	sl
 8003fa8:	3001      	adds	r0, #1
 8003faa:	d09d      	beq.n	8003ee8 <_printf_i+0x160>
 8003fac:	3501      	adds	r5, #1
 8003fae:	68e3      	ldr	r3, [r4, #12]
 8003fb0:	9903      	ldr	r1, [sp, #12]
 8003fb2:	1a5b      	subs	r3, r3, r1
 8003fb4:	42ab      	cmp	r3, r5
 8003fb6:	dcf2      	bgt.n	8003f9e <_printf_i+0x216>
 8003fb8:	e7eb      	b.n	8003f92 <_printf_i+0x20a>
 8003fba:	2500      	movs	r5, #0
 8003fbc:	f104 0619 	add.w	r6, r4, #25
 8003fc0:	e7f5      	b.n	8003fae <_printf_i+0x226>
 8003fc2:	bf00      	nop
 8003fc4:	080041ad 	.word	0x080041ad
 8003fc8:	080041be 	.word	0x080041be

08003fcc <__malloc_lock>:
 8003fcc:	4801      	ldr	r0, [pc, #4]	; (8003fd4 <__malloc_lock+0x8>)
 8003fce:	f7ff bc73 	b.w	80038b8 <__retarget_lock_acquire_recursive>
 8003fd2:	bf00      	nop
 8003fd4:	200002ec 	.word	0x200002ec

08003fd8 <__malloc_unlock>:
 8003fd8:	4801      	ldr	r0, [pc, #4]	; (8003fe0 <__malloc_unlock+0x8>)
 8003fda:	f7ff bc6e 	b.w	80038ba <__retarget_lock_release_recursive>
 8003fde:	bf00      	nop
 8003fe0:	200002ec 	.word	0x200002ec

08003fe4 <_realloc_r>:
 8003fe4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003fe8:	4680      	mov	r8, r0
 8003fea:	4614      	mov	r4, r2
 8003fec:	460e      	mov	r6, r1
 8003fee:	b921      	cbnz	r1, 8003ffa <_realloc_r+0x16>
 8003ff0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003ff4:	4611      	mov	r1, r2
 8003ff6:	f7ff bdd9 	b.w	8003bac <_malloc_r>
 8003ffa:	b92a      	cbnz	r2, 8004008 <_realloc_r+0x24>
 8003ffc:	f000 f85a 	bl	80040b4 <_free_r>
 8004000:	4625      	mov	r5, r4
 8004002:	4628      	mov	r0, r5
 8004004:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004008:	f000 f8a0 	bl	800414c <_malloc_usable_size_r>
 800400c:	4284      	cmp	r4, r0
 800400e:	4607      	mov	r7, r0
 8004010:	d802      	bhi.n	8004018 <_realloc_r+0x34>
 8004012:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004016:	d812      	bhi.n	800403e <_realloc_r+0x5a>
 8004018:	4621      	mov	r1, r4
 800401a:	4640      	mov	r0, r8
 800401c:	f7ff fdc6 	bl	8003bac <_malloc_r>
 8004020:	4605      	mov	r5, r0
 8004022:	2800      	cmp	r0, #0
 8004024:	d0ed      	beq.n	8004002 <_realloc_r+0x1e>
 8004026:	42bc      	cmp	r4, r7
 8004028:	4622      	mov	r2, r4
 800402a:	4631      	mov	r1, r6
 800402c:	bf28      	it	cs
 800402e:	463a      	movcs	r2, r7
 8004030:	f000 f832 	bl	8004098 <memcpy>
 8004034:	4631      	mov	r1, r6
 8004036:	4640      	mov	r0, r8
 8004038:	f000 f83c 	bl	80040b4 <_free_r>
 800403c:	e7e1      	b.n	8004002 <_realloc_r+0x1e>
 800403e:	4635      	mov	r5, r6
 8004040:	e7df      	b.n	8004002 <_realloc_r+0x1e>

08004042 <memmove>:
 8004042:	4288      	cmp	r0, r1
 8004044:	b510      	push	{r4, lr}
 8004046:	eb01 0402 	add.w	r4, r1, r2
 800404a:	d902      	bls.n	8004052 <memmove+0x10>
 800404c:	4284      	cmp	r4, r0
 800404e:	4623      	mov	r3, r4
 8004050:	d807      	bhi.n	8004062 <memmove+0x20>
 8004052:	1e43      	subs	r3, r0, #1
 8004054:	42a1      	cmp	r1, r4
 8004056:	d008      	beq.n	800406a <memmove+0x28>
 8004058:	f811 2b01 	ldrb.w	r2, [r1], #1
 800405c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004060:	e7f8      	b.n	8004054 <memmove+0x12>
 8004062:	4402      	add	r2, r0
 8004064:	4601      	mov	r1, r0
 8004066:	428a      	cmp	r2, r1
 8004068:	d100      	bne.n	800406c <memmove+0x2a>
 800406a:	bd10      	pop	{r4, pc}
 800406c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004070:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004074:	e7f7      	b.n	8004066 <memmove+0x24>
	...

08004078 <_sbrk_r>:
 8004078:	b538      	push	{r3, r4, r5, lr}
 800407a:	4d06      	ldr	r5, [pc, #24]	; (8004094 <_sbrk_r+0x1c>)
 800407c:	2300      	movs	r3, #0
 800407e:	4604      	mov	r4, r0
 8004080:	4608      	mov	r0, r1
 8004082:	602b      	str	r3, [r5, #0]
 8004084:	f7fd f800 	bl	8001088 <_sbrk>
 8004088:	1c43      	adds	r3, r0, #1
 800408a:	d102      	bne.n	8004092 <_sbrk_r+0x1a>
 800408c:	682b      	ldr	r3, [r5, #0]
 800408e:	b103      	cbz	r3, 8004092 <_sbrk_r+0x1a>
 8004090:	6023      	str	r3, [r4, #0]
 8004092:	bd38      	pop	{r3, r4, r5, pc}
 8004094:	200002f8 	.word	0x200002f8

08004098 <memcpy>:
 8004098:	440a      	add	r2, r1
 800409a:	4291      	cmp	r1, r2
 800409c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80040a0:	d100      	bne.n	80040a4 <memcpy+0xc>
 80040a2:	4770      	bx	lr
 80040a4:	b510      	push	{r4, lr}
 80040a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80040aa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80040ae:	4291      	cmp	r1, r2
 80040b0:	d1f9      	bne.n	80040a6 <memcpy+0xe>
 80040b2:	bd10      	pop	{r4, pc}

080040b4 <_free_r>:
 80040b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80040b6:	2900      	cmp	r1, #0
 80040b8:	d044      	beq.n	8004144 <_free_r+0x90>
 80040ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80040be:	9001      	str	r0, [sp, #4]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	f1a1 0404 	sub.w	r4, r1, #4
 80040c6:	bfb8      	it	lt
 80040c8:	18e4      	addlt	r4, r4, r3
 80040ca:	f7ff ff7f 	bl	8003fcc <__malloc_lock>
 80040ce:	4a1e      	ldr	r2, [pc, #120]	; (8004148 <_free_r+0x94>)
 80040d0:	9801      	ldr	r0, [sp, #4]
 80040d2:	6813      	ldr	r3, [r2, #0]
 80040d4:	b933      	cbnz	r3, 80040e4 <_free_r+0x30>
 80040d6:	6063      	str	r3, [r4, #4]
 80040d8:	6014      	str	r4, [r2, #0]
 80040da:	b003      	add	sp, #12
 80040dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80040e0:	f7ff bf7a 	b.w	8003fd8 <__malloc_unlock>
 80040e4:	42a3      	cmp	r3, r4
 80040e6:	d908      	bls.n	80040fa <_free_r+0x46>
 80040e8:	6825      	ldr	r5, [r4, #0]
 80040ea:	1961      	adds	r1, r4, r5
 80040ec:	428b      	cmp	r3, r1
 80040ee:	bf01      	itttt	eq
 80040f0:	6819      	ldreq	r1, [r3, #0]
 80040f2:	685b      	ldreq	r3, [r3, #4]
 80040f4:	1949      	addeq	r1, r1, r5
 80040f6:	6021      	streq	r1, [r4, #0]
 80040f8:	e7ed      	b.n	80040d6 <_free_r+0x22>
 80040fa:	461a      	mov	r2, r3
 80040fc:	685b      	ldr	r3, [r3, #4]
 80040fe:	b10b      	cbz	r3, 8004104 <_free_r+0x50>
 8004100:	42a3      	cmp	r3, r4
 8004102:	d9fa      	bls.n	80040fa <_free_r+0x46>
 8004104:	6811      	ldr	r1, [r2, #0]
 8004106:	1855      	adds	r5, r2, r1
 8004108:	42a5      	cmp	r5, r4
 800410a:	d10b      	bne.n	8004124 <_free_r+0x70>
 800410c:	6824      	ldr	r4, [r4, #0]
 800410e:	4421      	add	r1, r4
 8004110:	1854      	adds	r4, r2, r1
 8004112:	42a3      	cmp	r3, r4
 8004114:	6011      	str	r1, [r2, #0]
 8004116:	d1e0      	bne.n	80040da <_free_r+0x26>
 8004118:	681c      	ldr	r4, [r3, #0]
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	6053      	str	r3, [r2, #4]
 800411e:	440c      	add	r4, r1
 8004120:	6014      	str	r4, [r2, #0]
 8004122:	e7da      	b.n	80040da <_free_r+0x26>
 8004124:	d902      	bls.n	800412c <_free_r+0x78>
 8004126:	230c      	movs	r3, #12
 8004128:	6003      	str	r3, [r0, #0]
 800412a:	e7d6      	b.n	80040da <_free_r+0x26>
 800412c:	6825      	ldr	r5, [r4, #0]
 800412e:	1961      	adds	r1, r4, r5
 8004130:	428b      	cmp	r3, r1
 8004132:	bf04      	itt	eq
 8004134:	6819      	ldreq	r1, [r3, #0]
 8004136:	685b      	ldreq	r3, [r3, #4]
 8004138:	6063      	str	r3, [r4, #4]
 800413a:	bf04      	itt	eq
 800413c:	1949      	addeq	r1, r1, r5
 800413e:	6021      	streq	r1, [r4, #0]
 8004140:	6054      	str	r4, [r2, #4]
 8004142:	e7ca      	b.n	80040da <_free_r+0x26>
 8004144:	b003      	add	sp, #12
 8004146:	bd30      	pop	{r4, r5, pc}
 8004148:	200002f0 	.word	0x200002f0

0800414c <_malloc_usable_size_r>:
 800414c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004150:	1f18      	subs	r0, r3, #4
 8004152:	2b00      	cmp	r3, #0
 8004154:	bfbc      	itt	lt
 8004156:	580b      	ldrlt	r3, [r1, r0]
 8004158:	18c0      	addlt	r0, r0, r3
 800415a:	4770      	bx	lr

0800415c <_init>:
 800415c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800415e:	bf00      	nop
 8004160:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004162:	bc08      	pop	{r3}
 8004164:	469e      	mov	lr, r3
 8004166:	4770      	bx	lr

08004168 <_fini>:
 8004168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800416a:	bf00      	nop
 800416c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800416e:	bc08      	pop	{r3}
 8004170:	469e      	mov	lr, r3
 8004172:	4770      	bx	lr
