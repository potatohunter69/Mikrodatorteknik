
lab6_RGB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004294  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003e8  0800442c  0800442c  0001442c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004814  08004814  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08004814  08004814  00014814  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800481c  0800481c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800481c  0800481c  0001481c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004820  08004820  00014820  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08004824  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000bc  20000010  08004834  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000cc  08004834  000200cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c0e9  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001981  00000000  00000000  0002c16c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b70  00000000  00000000  0002daf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000901  00000000  00000000  0002e660  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00015f7c  00000000  00000000  0002ef61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c887  00000000  00000000  00044edd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008d7c0  00000000  00000000  00051764  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000032d8  00000000  00000000  000def24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  000e21fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000010 	.word	0x20000010
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08004414 	.word	0x08004414

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000014 	.word	0x20000014
 80001d4:	08004414 	.word	0x08004414

080001d8 <__aeabi_dmul>:
 80001d8:	b570      	push	{r4, r5, r6, lr}
 80001da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001e6:	bf1d      	ittte	ne
 80001e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001ec:	ea94 0f0c 	teqne	r4, ip
 80001f0:	ea95 0f0c 	teqne	r5, ip
 80001f4:	f000 f8de 	bleq	80003b4 <__aeabi_dmul+0x1dc>
 80001f8:	442c      	add	r4, r5
 80001fa:	ea81 0603 	eor.w	r6, r1, r3
 80001fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000202:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000206:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800020a:	bf18      	it	ne
 800020c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000210:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000214:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000218:	d038      	beq.n	800028c <__aeabi_dmul+0xb4>
 800021a:	fba0 ce02 	umull	ip, lr, r0, r2
 800021e:	f04f 0500 	mov.w	r5, #0
 8000222:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000226:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800022a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800022e:	f04f 0600 	mov.w	r6, #0
 8000232:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000236:	f09c 0f00 	teq	ip, #0
 800023a:	bf18      	it	ne
 800023c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000240:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000244:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000248:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800024c:	d204      	bcs.n	8000258 <__aeabi_dmul+0x80>
 800024e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000252:	416d      	adcs	r5, r5
 8000254:	eb46 0606 	adc.w	r6, r6, r6
 8000258:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800025c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000260:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000264:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000268:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800026c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000270:	bf88      	it	hi
 8000272:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000276:	d81e      	bhi.n	80002b6 <__aeabi_dmul+0xde>
 8000278:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	bd70      	pop	{r4, r5, r6, pc}
 800028c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000290:	ea46 0101 	orr.w	r1, r6, r1
 8000294:	ea40 0002 	orr.w	r0, r0, r2
 8000298:	ea81 0103 	eor.w	r1, r1, r3
 800029c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002a0:	bfc2      	ittt	gt
 80002a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002aa:	bd70      	popgt	{r4, r5, r6, pc}
 80002ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002b0:	f04f 0e00 	mov.w	lr, #0
 80002b4:	3c01      	subs	r4, #1
 80002b6:	f300 80ab 	bgt.w	8000410 <__aeabi_dmul+0x238>
 80002ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002be:	bfde      	ittt	le
 80002c0:	2000      	movle	r0, #0
 80002c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002c6:	bd70      	pople	{r4, r5, r6, pc}
 80002c8:	f1c4 0400 	rsb	r4, r4, #0
 80002cc:	3c20      	subs	r4, #32
 80002ce:	da35      	bge.n	800033c <__aeabi_dmul+0x164>
 80002d0:	340c      	adds	r4, #12
 80002d2:	dc1b      	bgt.n	800030c <__aeabi_dmul+0x134>
 80002d4:	f104 0414 	add.w	r4, r4, #20
 80002d8:	f1c4 0520 	rsb	r5, r4, #32
 80002dc:	fa00 f305 	lsl.w	r3, r0, r5
 80002e0:	fa20 f004 	lsr.w	r0, r0, r4
 80002e4:	fa01 f205 	lsl.w	r2, r1, r5
 80002e8:	ea40 0002 	orr.w	r0, r0, r2
 80002ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80002f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002f8:	fa21 f604 	lsr.w	r6, r1, r4
 80002fc:	eb42 0106 	adc.w	r1, r2, r6
 8000300:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000304:	bf08      	it	eq
 8000306:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800030a:	bd70      	pop	{r4, r5, r6, pc}
 800030c:	f1c4 040c 	rsb	r4, r4, #12
 8000310:	f1c4 0520 	rsb	r5, r4, #32
 8000314:	fa00 f304 	lsl.w	r3, r0, r4
 8000318:	fa20 f005 	lsr.w	r0, r0, r5
 800031c:	fa01 f204 	lsl.w	r2, r1, r4
 8000320:	ea40 0002 	orr.w	r0, r0, r2
 8000324:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000328:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000334:	bf08      	it	eq
 8000336:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800033a:	bd70      	pop	{r4, r5, r6, pc}
 800033c:	f1c4 0520 	rsb	r5, r4, #32
 8000340:	fa00 f205 	lsl.w	r2, r0, r5
 8000344:	ea4e 0e02 	orr.w	lr, lr, r2
 8000348:	fa20 f304 	lsr.w	r3, r0, r4
 800034c:	fa01 f205 	lsl.w	r2, r1, r5
 8000350:	ea43 0302 	orr.w	r3, r3, r2
 8000354:	fa21 f004 	lsr.w	r0, r1, r4
 8000358:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800035c:	fa21 f204 	lsr.w	r2, r1, r4
 8000360:	ea20 0002 	bic.w	r0, r0, r2
 8000364:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000368:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800036c:	bf08      	it	eq
 800036e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000372:	bd70      	pop	{r4, r5, r6, pc}
 8000374:	f094 0f00 	teq	r4, #0
 8000378:	d10f      	bne.n	800039a <__aeabi_dmul+0x1c2>
 800037a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800037e:	0040      	lsls	r0, r0, #1
 8000380:	eb41 0101 	adc.w	r1, r1, r1
 8000384:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000388:	bf08      	it	eq
 800038a:	3c01      	subeq	r4, #1
 800038c:	d0f7      	beq.n	800037e <__aeabi_dmul+0x1a6>
 800038e:	ea41 0106 	orr.w	r1, r1, r6
 8000392:	f095 0f00 	teq	r5, #0
 8000396:	bf18      	it	ne
 8000398:	4770      	bxne	lr
 800039a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800039e:	0052      	lsls	r2, r2, #1
 80003a0:	eb43 0303 	adc.w	r3, r3, r3
 80003a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003a8:	bf08      	it	eq
 80003aa:	3d01      	subeq	r5, #1
 80003ac:	d0f7      	beq.n	800039e <__aeabi_dmul+0x1c6>
 80003ae:	ea43 0306 	orr.w	r3, r3, r6
 80003b2:	4770      	bx	lr
 80003b4:	ea94 0f0c 	teq	r4, ip
 80003b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003bc:	bf18      	it	ne
 80003be:	ea95 0f0c 	teqne	r5, ip
 80003c2:	d00c      	beq.n	80003de <__aeabi_dmul+0x206>
 80003c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003c8:	bf18      	it	ne
 80003ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003ce:	d1d1      	bne.n	8000374 <__aeabi_dmul+0x19c>
 80003d0:	ea81 0103 	eor.w	r1, r1, r3
 80003d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003d8:	f04f 0000 	mov.w	r0, #0
 80003dc:	bd70      	pop	{r4, r5, r6, pc}
 80003de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003e2:	bf06      	itte	eq
 80003e4:	4610      	moveq	r0, r2
 80003e6:	4619      	moveq	r1, r3
 80003e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003ec:	d019      	beq.n	8000422 <__aeabi_dmul+0x24a>
 80003ee:	ea94 0f0c 	teq	r4, ip
 80003f2:	d102      	bne.n	80003fa <__aeabi_dmul+0x222>
 80003f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003f8:	d113      	bne.n	8000422 <__aeabi_dmul+0x24a>
 80003fa:	ea95 0f0c 	teq	r5, ip
 80003fe:	d105      	bne.n	800040c <__aeabi_dmul+0x234>
 8000400:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000404:	bf1c      	itt	ne
 8000406:	4610      	movne	r0, r2
 8000408:	4619      	movne	r1, r3
 800040a:	d10a      	bne.n	8000422 <__aeabi_dmul+0x24a>
 800040c:	ea81 0103 	eor.w	r1, r1, r3
 8000410:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000414:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd70      	pop	{r4, r5, r6, pc}
 8000422:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000426:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800042a:	bd70      	pop	{r4, r5, r6, pc}

0800042c <__aeabi_drsub>:
 800042c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000430:	e002      	b.n	8000438 <__adddf3>
 8000432:	bf00      	nop

08000434 <__aeabi_dsub>:
 8000434:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000438 <__adddf3>:
 8000438:	b530      	push	{r4, r5, lr}
 800043a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800043e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000442:	ea94 0f05 	teq	r4, r5
 8000446:	bf08      	it	eq
 8000448:	ea90 0f02 	teqeq	r0, r2
 800044c:	bf1f      	itttt	ne
 800044e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000452:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000456:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800045a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800045e:	f000 80e2 	beq.w	8000626 <__adddf3+0x1ee>
 8000462:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000466:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800046a:	bfb8      	it	lt
 800046c:	426d      	neglt	r5, r5
 800046e:	dd0c      	ble.n	800048a <__adddf3+0x52>
 8000470:	442c      	add	r4, r5
 8000472:	ea80 0202 	eor.w	r2, r0, r2
 8000476:	ea81 0303 	eor.w	r3, r1, r3
 800047a:	ea82 0000 	eor.w	r0, r2, r0
 800047e:	ea83 0101 	eor.w	r1, r3, r1
 8000482:	ea80 0202 	eor.w	r2, r0, r2
 8000486:	ea81 0303 	eor.w	r3, r1, r3
 800048a:	2d36      	cmp	r5, #54	; 0x36
 800048c:	bf88      	it	hi
 800048e:	bd30      	pophi	{r4, r5, pc}
 8000490:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000494:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000498:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800049c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004a0:	d002      	beq.n	80004a8 <__adddf3+0x70>
 80004a2:	4240      	negs	r0, r0
 80004a4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004ac:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004b0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004b4:	d002      	beq.n	80004bc <__adddf3+0x84>
 80004b6:	4252      	negs	r2, r2
 80004b8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004bc:	ea94 0f05 	teq	r4, r5
 80004c0:	f000 80a7 	beq.w	8000612 <__adddf3+0x1da>
 80004c4:	f1a4 0401 	sub.w	r4, r4, #1
 80004c8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004cc:	db0d      	blt.n	80004ea <__adddf3+0xb2>
 80004ce:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004d2:	fa22 f205 	lsr.w	r2, r2, r5
 80004d6:	1880      	adds	r0, r0, r2
 80004d8:	f141 0100 	adc.w	r1, r1, #0
 80004dc:	fa03 f20e 	lsl.w	r2, r3, lr
 80004e0:	1880      	adds	r0, r0, r2
 80004e2:	fa43 f305 	asr.w	r3, r3, r5
 80004e6:	4159      	adcs	r1, r3
 80004e8:	e00e      	b.n	8000508 <__adddf3+0xd0>
 80004ea:	f1a5 0520 	sub.w	r5, r5, #32
 80004ee:	f10e 0e20 	add.w	lr, lr, #32
 80004f2:	2a01      	cmp	r2, #1
 80004f4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004f8:	bf28      	it	cs
 80004fa:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004fe:	fa43 f305 	asr.w	r3, r3, r5
 8000502:	18c0      	adds	r0, r0, r3
 8000504:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	d507      	bpl.n	800051e <__adddf3+0xe6>
 800050e:	f04f 0e00 	mov.w	lr, #0
 8000512:	f1dc 0c00 	rsbs	ip, ip, #0
 8000516:	eb7e 0000 	sbcs.w	r0, lr, r0
 800051a:	eb6e 0101 	sbc.w	r1, lr, r1
 800051e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000522:	d31b      	bcc.n	800055c <__adddf3+0x124>
 8000524:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000528:	d30c      	bcc.n	8000544 <__adddf3+0x10c>
 800052a:	0849      	lsrs	r1, r1, #1
 800052c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000530:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000534:	f104 0401 	add.w	r4, r4, #1
 8000538:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800053c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000540:	f080 809a 	bcs.w	8000678 <__adddf3+0x240>
 8000544:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000548:	bf08      	it	eq
 800054a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800054e:	f150 0000 	adcs.w	r0, r0, #0
 8000552:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000556:	ea41 0105 	orr.w	r1, r1, r5
 800055a:	bd30      	pop	{r4, r5, pc}
 800055c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000560:	4140      	adcs	r0, r0
 8000562:	eb41 0101 	adc.w	r1, r1, r1
 8000566:	3c01      	subs	r4, #1
 8000568:	bf28      	it	cs
 800056a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800056e:	d2e9      	bcs.n	8000544 <__adddf3+0x10c>
 8000570:	f091 0f00 	teq	r1, #0
 8000574:	bf04      	itt	eq
 8000576:	4601      	moveq	r1, r0
 8000578:	2000      	moveq	r0, #0
 800057a:	fab1 f381 	clz	r3, r1
 800057e:	bf08      	it	eq
 8000580:	3320      	addeq	r3, #32
 8000582:	f1a3 030b 	sub.w	r3, r3, #11
 8000586:	f1b3 0220 	subs.w	r2, r3, #32
 800058a:	da0c      	bge.n	80005a6 <__adddf3+0x16e>
 800058c:	320c      	adds	r2, #12
 800058e:	dd08      	ble.n	80005a2 <__adddf3+0x16a>
 8000590:	f102 0c14 	add.w	ip, r2, #20
 8000594:	f1c2 020c 	rsb	r2, r2, #12
 8000598:	fa01 f00c 	lsl.w	r0, r1, ip
 800059c:	fa21 f102 	lsr.w	r1, r1, r2
 80005a0:	e00c      	b.n	80005bc <__adddf3+0x184>
 80005a2:	f102 0214 	add.w	r2, r2, #20
 80005a6:	bfd8      	it	le
 80005a8:	f1c2 0c20 	rsble	ip, r2, #32
 80005ac:	fa01 f102 	lsl.w	r1, r1, r2
 80005b0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005b4:	bfdc      	itt	le
 80005b6:	ea41 010c 	orrle.w	r1, r1, ip
 80005ba:	4090      	lslle	r0, r2
 80005bc:	1ae4      	subs	r4, r4, r3
 80005be:	bfa2      	ittt	ge
 80005c0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005c4:	4329      	orrge	r1, r5
 80005c6:	bd30      	popge	{r4, r5, pc}
 80005c8:	ea6f 0404 	mvn.w	r4, r4
 80005cc:	3c1f      	subs	r4, #31
 80005ce:	da1c      	bge.n	800060a <__adddf3+0x1d2>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc0e      	bgt.n	80005f2 <__adddf3+0x1ba>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0220 	rsb	r2, r4, #32
 80005dc:	fa20 f004 	lsr.w	r0, r0, r4
 80005e0:	fa01 f302 	lsl.w	r3, r1, r2
 80005e4:	ea40 0003 	orr.w	r0, r0, r3
 80005e8:	fa21 f304 	lsr.w	r3, r1, r4
 80005ec:	ea45 0103 	orr.w	r1, r5, r3
 80005f0:	bd30      	pop	{r4, r5, pc}
 80005f2:	f1c4 040c 	rsb	r4, r4, #12
 80005f6:	f1c4 0220 	rsb	r2, r4, #32
 80005fa:	fa20 f002 	lsr.w	r0, r0, r2
 80005fe:	fa01 f304 	lsl.w	r3, r1, r4
 8000602:	ea40 0003 	orr.w	r0, r0, r3
 8000606:	4629      	mov	r1, r5
 8000608:	bd30      	pop	{r4, r5, pc}
 800060a:	fa21 f004 	lsr.w	r0, r1, r4
 800060e:	4629      	mov	r1, r5
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	f094 0f00 	teq	r4, #0
 8000616:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800061a:	bf06      	itte	eq
 800061c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000620:	3401      	addeq	r4, #1
 8000622:	3d01      	subne	r5, #1
 8000624:	e74e      	b.n	80004c4 <__adddf3+0x8c>
 8000626:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800062a:	bf18      	it	ne
 800062c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000630:	d029      	beq.n	8000686 <__adddf3+0x24e>
 8000632:	ea94 0f05 	teq	r4, r5
 8000636:	bf08      	it	eq
 8000638:	ea90 0f02 	teqeq	r0, r2
 800063c:	d005      	beq.n	800064a <__adddf3+0x212>
 800063e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000642:	bf04      	itt	eq
 8000644:	4619      	moveq	r1, r3
 8000646:	4610      	moveq	r0, r2
 8000648:	bd30      	pop	{r4, r5, pc}
 800064a:	ea91 0f03 	teq	r1, r3
 800064e:	bf1e      	ittt	ne
 8000650:	2100      	movne	r1, #0
 8000652:	2000      	movne	r0, #0
 8000654:	bd30      	popne	{r4, r5, pc}
 8000656:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800065a:	d105      	bne.n	8000668 <__adddf3+0x230>
 800065c:	0040      	lsls	r0, r0, #1
 800065e:	4149      	adcs	r1, r1
 8000660:	bf28      	it	cs
 8000662:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000666:	bd30      	pop	{r4, r5, pc}
 8000668:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800066c:	bf3c      	itt	cc
 800066e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000672:	bd30      	popcc	{r4, r5, pc}
 8000674:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000678:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800067c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000680:	f04f 0000 	mov.w	r0, #0
 8000684:	bd30      	pop	{r4, r5, pc}
 8000686:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800068a:	bf1a      	itte	ne
 800068c:	4619      	movne	r1, r3
 800068e:	4610      	movne	r0, r2
 8000690:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000694:	bf1c      	itt	ne
 8000696:	460b      	movne	r3, r1
 8000698:	4602      	movne	r2, r0
 800069a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800069e:	bf06      	itte	eq
 80006a0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006a4:	ea91 0f03 	teqeq	r1, r3
 80006a8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006ac:	bd30      	pop	{r4, r5, pc}
 80006ae:	bf00      	nop

080006b0 <__aeabi_ui2d>:
 80006b0:	f090 0f00 	teq	r0, #0
 80006b4:	bf04      	itt	eq
 80006b6:	2100      	moveq	r1, #0
 80006b8:	4770      	bxeq	lr
 80006ba:	b530      	push	{r4, r5, lr}
 80006bc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006c0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006c4:	f04f 0500 	mov.w	r5, #0
 80006c8:	f04f 0100 	mov.w	r1, #0
 80006cc:	e750      	b.n	8000570 <__adddf3+0x138>
 80006ce:	bf00      	nop

080006d0 <__aeabi_i2d>:
 80006d0:	f090 0f00 	teq	r0, #0
 80006d4:	bf04      	itt	eq
 80006d6:	2100      	moveq	r1, #0
 80006d8:	4770      	bxeq	lr
 80006da:	b530      	push	{r4, r5, lr}
 80006dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006e4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80006e8:	bf48      	it	mi
 80006ea:	4240      	negmi	r0, r0
 80006ec:	f04f 0100 	mov.w	r1, #0
 80006f0:	e73e      	b.n	8000570 <__adddf3+0x138>
 80006f2:	bf00      	nop

080006f4 <__aeabi_f2d>:
 80006f4:	0042      	lsls	r2, r0, #1
 80006f6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006fa:	ea4f 0131 	mov.w	r1, r1, rrx
 80006fe:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000702:	bf1f      	itttt	ne
 8000704:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000708:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800070c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000710:	4770      	bxne	lr
 8000712:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000716:	bf08      	it	eq
 8000718:	4770      	bxeq	lr
 800071a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800071e:	bf04      	itt	eq
 8000720:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000724:	4770      	bxeq	lr
 8000726:	b530      	push	{r4, r5, lr}
 8000728:	f44f 7460 	mov.w	r4, #896	; 0x380
 800072c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	e71c      	b.n	8000570 <__adddf3+0x138>
 8000736:	bf00      	nop

08000738 <__aeabi_ul2d>:
 8000738:	ea50 0201 	orrs.w	r2, r0, r1
 800073c:	bf08      	it	eq
 800073e:	4770      	bxeq	lr
 8000740:	b530      	push	{r4, r5, lr}
 8000742:	f04f 0500 	mov.w	r5, #0
 8000746:	e00a      	b.n	800075e <__aeabi_l2d+0x16>

08000748 <__aeabi_l2d>:
 8000748:	ea50 0201 	orrs.w	r2, r0, r1
 800074c:	bf08      	it	eq
 800074e:	4770      	bxeq	lr
 8000750:	b530      	push	{r4, r5, lr}
 8000752:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000756:	d502      	bpl.n	800075e <__aeabi_l2d+0x16>
 8000758:	4240      	negs	r0, r0
 800075a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800075e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000762:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000766:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800076a:	f43f aed8 	beq.w	800051e <__adddf3+0xe6>
 800076e:	f04f 0203 	mov.w	r2, #3
 8000772:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000776:	bf18      	it	ne
 8000778:	3203      	addne	r2, #3
 800077a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800077e:	bf18      	it	ne
 8000780:	3203      	addne	r2, #3
 8000782:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000786:	f1c2 0320 	rsb	r3, r2, #32
 800078a:	fa00 fc03 	lsl.w	ip, r0, r3
 800078e:	fa20 f002 	lsr.w	r0, r0, r2
 8000792:	fa01 fe03 	lsl.w	lr, r1, r3
 8000796:	ea40 000e 	orr.w	r0, r0, lr
 800079a:	fa21 f102 	lsr.w	r1, r1, r2
 800079e:	4414      	add	r4, r2
 80007a0:	e6bd      	b.n	800051e <__adddf3+0xe6>
 80007a2:	bf00      	nop

080007a4 <__aeabi_d2f>:
 80007a4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80007a8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80007ac:	bf24      	itt	cs
 80007ae:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80007b2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80007b6:	d90d      	bls.n	80007d4 <__aeabi_d2f+0x30>
 80007b8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80007bc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80007c0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80007c4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80007c8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80007cc:	bf08      	it	eq
 80007ce:	f020 0001 	biceq.w	r0, r0, #1
 80007d2:	4770      	bx	lr
 80007d4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80007d8:	d121      	bne.n	800081e <__aeabi_d2f+0x7a>
 80007da:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80007de:	bfbc      	itt	lt
 80007e0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80007e4:	4770      	bxlt	lr
 80007e6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80007ea:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80007ee:	f1c2 0218 	rsb	r2, r2, #24
 80007f2:	f1c2 0c20 	rsb	ip, r2, #32
 80007f6:	fa10 f30c 	lsls.w	r3, r0, ip
 80007fa:	fa20 f002 	lsr.w	r0, r0, r2
 80007fe:	bf18      	it	ne
 8000800:	f040 0001 	orrne.w	r0, r0, #1
 8000804:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000808:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 800080c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000810:	ea40 000c 	orr.w	r0, r0, ip
 8000814:	fa23 f302 	lsr.w	r3, r3, r2
 8000818:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800081c:	e7cc      	b.n	80007b8 <__aeabi_d2f+0x14>
 800081e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000822:	d107      	bne.n	8000834 <__aeabi_d2f+0x90>
 8000824:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000828:	bf1e      	ittt	ne
 800082a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 800082e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000832:	4770      	bxne	lr
 8000834:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000838:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800083c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000840:	4770      	bx	lr
 8000842:	bf00      	nop

08000844 <__aeabi_uldivmod>:
 8000844:	b953      	cbnz	r3, 800085c <__aeabi_uldivmod+0x18>
 8000846:	b94a      	cbnz	r2, 800085c <__aeabi_uldivmod+0x18>
 8000848:	2900      	cmp	r1, #0
 800084a:	bf08      	it	eq
 800084c:	2800      	cmpeq	r0, #0
 800084e:	bf1c      	itt	ne
 8000850:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000854:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000858:	f000 b970 	b.w	8000b3c <__aeabi_idiv0>
 800085c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000860:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000864:	f000 f806 	bl	8000874 <__udivmoddi4>
 8000868:	f8dd e004 	ldr.w	lr, [sp, #4]
 800086c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000870:	b004      	add	sp, #16
 8000872:	4770      	bx	lr

08000874 <__udivmoddi4>:
 8000874:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000878:	9e08      	ldr	r6, [sp, #32]
 800087a:	460d      	mov	r5, r1
 800087c:	4604      	mov	r4, r0
 800087e:	460f      	mov	r7, r1
 8000880:	2b00      	cmp	r3, #0
 8000882:	d14a      	bne.n	800091a <__udivmoddi4+0xa6>
 8000884:	428a      	cmp	r2, r1
 8000886:	4694      	mov	ip, r2
 8000888:	d965      	bls.n	8000956 <__udivmoddi4+0xe2>
 800088a:	fab2 f382 	clz	r3, r2
 800088e:	b143      	cbz	r3, 80008a2 <__udivmoddi4+0x2e>
 8000890:	fa02 fc03 	lsl.w	ip, r2, r3
 8000894:	f1c3 0220 	rsb	r2, r3, #32
 8000898:	409f      	lsls	r7, r3
 800089a:	fa20 f202 	lsr.w	r2, r0, r2
 800089e:	4317      	orrs	r7, r2
 80008a0:	409c      	lsls	r4, r3
 80008a2:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80008a6:	fa1f f58c 	uxth.w	r5, ip
 80008aa:	fbb7 f1fe 	udiv	r1, r7, lr
 80008ae:	0c22      	lsrs	r2, r4, #16
 80008b0:	fb0e 7711 	mls	r7, lr, r1, r7
 80008b4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80008b8:	fb01 f005 	mul.w	r0, r1, r5
 80008bc:	4290      	cmp	r0, r2
 80008be:	d90a      	bls.n	80008d6 <__udivmoddi4+0x62>
 80008c0:	eb1c 0202 	adds.w	r2, ip, r2
 80008c4:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 80008c8:	f080 811c 	bcs.w	8000b04 <__udivmoddi4+0x290>
 80008cc:	4290      	cmp	r0, r2
 80008ce:	f240 8119 	bls.w	8000b04 <__udivmoddi4+0x290>
 80008d2:	3902      	subs	r1, #2
 80008d4:	4462      	add	r2, ip
 80008d6:	1a12      	subs	r2, r2, r0
 80008d8:	b2a4      	uxth	r4, r4
 80008da:	fbb2 f0fe 	udiv	r0, r2, lr
 80008de:	fb0e 2210 	mls	r2, lr, r0, r2
 80008e2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80008e6:	fb00 f505 	mul.w	r5, r0, r5
 80008ea:	42a5      	cmp	r5, r4
 80008ec:	d90a      	bls.n	8000904 <__udivmoddi4+0x90>
 80008ee:	eb1c 0404 	adds.w	r4, ip, r4
 80008f2:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80008f6:	f080 8107 	bcs.w	8000b08 <__udivmoddi4+0x294>
 80008fa:	42a5      	cmp	r5, r4
 80008fc:	f240 8104 	bls.w	8000b08 <__udivmoddi4+0x294>
 8000900:	4464      	add	r4, ip
 8000902:	3802      	subs	r0, #2
 8000904:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000908:	1b64      	subs	r4, r4, r5
 800090a:	2100      	movs	r1, #0
 800090c:	b11e      	cbz	r6, 8000916 <__udivmoddi4+0xa2>
 800090e:	40dc      	lsrs	r4, r3
 8000910:	2300      	movs	r3, #0
 8000912:	e9c6 4300 	strd	r4, r3, [r6]
 8000916:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800091a:	428b      	cmp	r3, r1
 800091c:	d908      	bls.n	8000930 <__udivmoddi4+0xbc>
 800091e:	2e00      	cmp	r6, #0
 8000920:	f000 80ed 	beq.w	8000afe <__udivmoddi4+0x28a>
 8000924:	2100      	movs	r1, #0
 8000926:	e9c6 0500 	strd	r0, r5, [r6]
 800092a:	4608      	mov	r0, r1
 800092c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000930:	fab3 f183 	clz	r1, r3
 8000934:	2900      	cmp	r1, #0
 8000936:	d149      	bne.n	80009cc <__udivmoddi4+0x158>
 8000938:	42ab      	cmp	r3, r5
 800093a:	d302      	bcc.n	8000942 <__udivmoddi4+0xce>
 800093c:	4282      	cmp	r2, r0
 800093e:	f200 80f8 	bhi.w	8000b32 <__udivmoddi4+0x2be>
 8000942:	1a84      	subs	r4, r0, r2
 8000944:	eb65 0203 	sbc.w	r2, r5, r3
 8000948:	2001      	movs	r0, #1
 800094a:	4617      	mov	r7, r2
 800094c:	2e00      	cmp	r6, #0
 800094e:	d0e2      	beq.n	8000916 <__udivmoddi4+0xa2>
 8000950:	e9c6 4700 	strd	r4, r7, [r6]
 8000954:	e7df      	b.n	8000916 <__udivmoddi4+0xa2>
 8000956:	b902      	cbnz	r2, 800095a <__udivmoddi4+0xe6>
 8000958:	deff      	udf	#255	; 0xff
 800095a:	fab2 f382 	clz	r3, r2
 800095e:	2b00      	cmp	r3, #0
 8000960:	f040 8090 	bne.w	8000a84 <__udivmoddi4+0x210>
 8000964:	1a8a      	subs	r2, r1, r2
 8000966:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800096a:	fa1f fe8c 	uxth.w	lr, ip
 800096e:	2101      	movs	r1, #1
 8000970:	fbb2 f5f7 	udiv	r5, r2, r7
 8000974:	fb07 2015 	mls	r0, r7, r5, r2
 8000978:	0c22      	lsrs	r2, r4, #16
 800097a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800097e:	fb0e f005 	mul.w	r0, lr, r5
 8000982:	4290      	cmp	r0, r2
 8000984:	d908      	bls.n	8000998 <__udivmoddi4+0x124>
 8000986:	eb1c 0202 	adds.w	r2, ip, r2
 800098a:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800098e:	d202      	bcs.n	8000996 <__udivmoddi4+0x122>
 8000990:	4290      	cmp	r0, r2
 8000992:	f200 80cb 	bhi.w	8000b2c <__udivmoddi4+0x2b8>
 8000996:	4645      	mov	r5, r8
 8000998:	1a12      	subs	r2, r2, r0
 800099a:	b2a4      	uxth	r4, r4
 800099c:	fbb2 f0f7 	udiv	r0, r2, r7
 80009a0:	fb07 2210 	mls	r2, r7, r0, r2
 80009a4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80009a8:	fb0e fe00 	mul.w	lr, lr, r0
 80009ac:	45a6      	cmp	lr, r4
 80009ae:	d908      	bls.n	80009c2 <__udivmoddi4+0x14e>
 80009b0:	eb1c 0404 	adds.w	r4, ip, r4
 80009b4:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80009b8:	d202      	bcs.n	80009c0 <__udivmoddi4+0x14c>
 80009ba:	45a6      	cmp	lr, r4
 80009bc:	f200 80bb 	bhi.w	8000b36 <__udivmoddi4+0x2c2>
 80009c0:	4610      	mov	r0, r2
 80009c2:	eba4 040e 	sub.w	r4, r4, lr
 80009c6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80009ca:	e79f      	b.n	800090c <__udivmoddi4+0x98>
 80009cc:	f1c1 0720 	rsb	r7, r1, #32
 80009d0:	408b      	lsls	r3, r1
 80009d2:	fa22 fc07 	lsr.w	ip, r2, r7
 80009d6:	ea4c 0c03 	orr.w	ip, ip, r3
 80009da:	fa05 f401 	lsl.w	r4, r5, r1
 80009de:	fa20 f307 	lsr.w	r3, r0, r7
 80009e2:	40fd      	lsrs	r5, r7
 80009e4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80009e8:	4323      	orrs	r3, r4
 80009ea:	fbb5 f8f9 	udiv	r8, r5, r9
 80009ee:	fa1f fe8c 	uxth.w	lr, ip
 80009f2:	fb09 5518 	mls	r5, r9, r8, r5
 80009f6:	0c1c      	lsrs	r4, r3, #16
 80009f8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80009fc:	fb08 f50e 	mul.w	r5, r8, lr
 8000a00:	42a5      	cmp	r5, r4
 8000a02:	fa02 f201 	lsl.w	r2, r2, r1
 8000a06:	fa00 f001 	lsl.w	r0, r0, r1
 8000a0a:	d90b      	bls.n	8000a24 <__udivmoddi4+0x1b0>
 8000a0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000a10:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000a14:	f080 8088 	bcs.w	8000b28 <__udivmoddi4+0x2b4>
 8000a18:	42a5      	cmp	r5, r4
 8000a1a:	f240 8085 	bls.w	8000b28 <__udivmoddi4+0x2b4>
 8000a1e:	f1a8 0802 	sub.w	r8, r8, #2
 8000a22:	4464      	add	r4, ip
 8000a24:	1b64      	subs	r4, r4, r5
 8000a26:	b29d      	uxth	r5, r3
 8000a28:	fbb4 f3f9 	udiv	r3, r4, r9
 8000a2c:	fb09 4413 	mls	r4, r9, r3, r4
 8000a30:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000a34:	fb03 fe0e 	mul.w	lr, r3, lr
 8000a38:	45a6      	cmp	lr, r4
 8000a3a:	d908      	bls.n	8000a4e <__udivmoddi4+0x1da>
 8000a3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000a40:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000a44:	d26c      	bcs.n	8000b20 <__udivmoddi4+0x2ac>
 8000a46:	45a6      	cmp	lr, r4
 8000a48:	d96a      	bls.n	8000b20 <__udivmoddi4+0x2ac>
 8000a4a:	3b02      	subs	r3, #2
 8000a4c:	4464      	add	r4, ip
 8000a4e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000a52:	fba3 9502 	umull	r9, r5, r3, r2
 8000a56:	eba4 040e 	sub.w	r4, r4, lr
 8000a5a:	42ac      	cmp	r4, r5
 8000a5c:	46c8      	mov	r8, r9
 8000a5e:	46ae      	mov	lr, r5
 8000a60:	d356      	bcc.n	8000b10 <__udivmoddi4+0x29c>
 8000a62:	d053      	beq.n	8000b0c <__udivmoddi4+0x298>
 8000a64:	b156      	cbz	r6, 8000a7c <__udivmoddi4+0x208>
 8000a66:	ebb0 0208 	subs.w	r2, r0, r8
 8000a6a:	eb64 040e 	sbc.w	r4, r4, lr
 8000a6e:	fa04 f707 	lsl.w	r7, r4, r7
 8000a72:	40ca      	lsrs	r2, r1
 8000a74:	40cc      	lsrs	r4, r1
 8000a76:	4317      	orrs	r7, r2
 8000a78:	e9c6 7400 	strd	r7, r4, [r6]
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	2100      	movs	r1, #0
 8000a80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a84:	f1c3 0120 	rsb	r1, r3, #32
 8000a88:	fa02 fc03 	lsl.w	ip, r2, r3
 8000a8c:	fa20 f201 	lsr.w	r2, r0, r1
 8000a90:	fa25 f101 	lsr.w	r1, r5, r1
 8000a94:	409d      	lsls	r5, r3
 8000a96:	432a      	orrs	r2, r5
 8000a98:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a9c:	fa1f fe8c 	uxth.w	lr, ip
 8000aa0:	fbb1 f0f7 	udiv	r0, r1, r7
 8000aa4:	fb07 1510 	mls	r5, r7, r0, r1
 8000aa8:	0c11      	lsrs	r1, r2, #16
 8000aaa:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000aae:	fb00 f50e 	mul.w	r5, r0, lr
 8000ab2:	428d      	cmp	r5, r1
 8000ab4:	fa04 f403 	lsl.w	r4, r4, r3
 8000ab8:	d908      	bls.n	8000acc <__udivmoddi4+0x258>
 8000aba:	eb1c 0101 	adds.w	r1, ip, r1
 8000abe:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000ac2:	d22f      	bcs.n	8000b24 <__udivmoddi4+0x2b0>
 8000ac4:	428d      	cmp	r5, r1
 8000ac6:	d92d      	bls.n	8000b24 <__udivmoddi4+0x2b0>
 8000ac8:	3802      	subs	r0, #2
 8000aca:	4461      	add	r1, ip
 8000acc:	1b49      	subs	r1, r1, r5
 8000ace:	b292      	uxth	r2, r2
 8000ad0:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ad4:	fb07 1115 	mls	r1, r7, r5, r1
 8000ad8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000adc:	fb05 f10e 	mul.w	r1, r5, lr
 8000ae0:	4291      	cmp	r1, r2
 8000ae2:	d908      	bls.n	8000af6 <__udivmoddi4+0x282>
 8000ae4:	eb1c 0202 	adds.w	r2, ip, r2
 8000ae8:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000aec:	d216      	bcs.n	8000b1c <__udivmoddi4+0x2a8>
 8000aee:	4291      	cmp	r1, r2
 8000af0:	d914      	bls.n	8000b1c <__udivmoddi4+0x2a8>
 8000af2:	3d02      	subs	r5, #2
 8000af4:	4462      	add	r2, ip
 8000af6:	1a52      	subs	r2, r2, r1
 8000af8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000afc:	e738      	b.n	8000970 <__udivmoddi4+0xfc>
 8000afe:	4631      	mov	r1, r6
 8000b00:	4630      	mov	r0, r6
 8000b02:	e708      	b.n	8000916 <__udivmoddi4+0xa2>
 8000b04:	4639      	mov	r1, r7
 8000b06:	e6e6      	b.n	80008d6 <__udivmoddi4+0x62>
 8000b08:	4610      	mov	r0, r2
 8000b0a:	e6fb      	b.n	8000904 <__udivmoddi4+0x90>
 8000b0c:	4548      	cmp	r0, r9
 8000b0e:	d2a9      	bcs.n	8000a64 <__udivmoddi4+0x1f0>
 8000b10:	ebb9 0802 	subs.w	r8, r9, r2
 8000b14:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000b18:	3b01      	subs	r3, #1
 8000b1a:	e7a3      	b.n	8000a64 <__udivmoddi4+0x1f0>
 8000b1c:	4645      	mov	r5, r8
 8000b1e:	e7ea      	b.n	8000af6 <__udivmoddi4+0x282>
 8000b20:	462b      	mov	r3, r5
 8000b22:	e794      	b.n	8000a4e <__udivmoddi4+0x1da>
 8000b24:	4640      	mov	r0, r8
 8000b26:	e7d1      	b.n	8000acc <__udivmoddi4+0x258>
 8000b28:	46d0      	mov	r8, sl
 8000b2a:	e77b      	b.n	8000a24 <__udivmoddi4+0x1b0>
 8000b2c:	3d02      	subs	r5, #2
 8000b2e:	4462      	add	r2, ip
 8000b30:	e732      	b.n	8000998 <__udivmoddi4+0x124>
 8000b32:	4608      	mov	r0, r1
 8000b34:	e70a      	b.n	800094c <__udivmoddi4+0xd8>
 8000b36:	4464      	add	r4, ip
 8000b38:	3802      	subs	r0, #2
 8000b3a:	e742      	b.n	80009c2 <__udivmoddi4+0x14e>

08000b3c <__aeabi_idiv0>:
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop

08000b40 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b082      	sub	sp, #8
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM1) {
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	4a0e      	ldr	r2, [pc, #56]	; (8000b88 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000b4e:	4293      	cmp	r3, r2
 8000b50:	d112      	bne.n	8000b78 <HAL_TIM_PeriodElapsedCallback+0x38>

        t += 0.001;
 8000b52:	4b0e      	ldr	r3, [pc, #56]	; (8000b8c <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	4618      	mov	r0, r3
 8000b58:	f7ff fdcc 	bl	80006f4 <__aeabi_f2d>
 8000b5c:	a308      	add	r3, pc, #32	; (adr r3, 8000b80 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000b5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b62:	f7ff fc69 	bl	8000438 <__adddf3>
 8000b66:	4602      	mov	r2, r0
 8000b68:	460b      	mov	r3, r1
 8000b6a:	4610      	mov	r0, r2
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	f7ff fe19 	bl	80007a4 <__aeabi_d2f>
 8000b72:	4603      	mov	r3, r0
 8000b74:	4a05      	ldr	r2, [pc, #20]	; (8000b8c <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000b76:	6013      	str	r3, [r2, #0]


    }
}
 8000b78:	bf00      	nop
 8000b7a:	3708      	adds	r7, #8
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	d2f1a9fc 	.word	0xd2f1a9fc
 8000b84:	3f50624d 	.word	0x3f50624d
 8000b88:	40010000 	.word	0x40010000
 8000b8c:	20000038 	.word	0x20000038

08000b90 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b90:	b5b0      	push	{r4, r5, r7, lr}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b94:	f000 fc46 	bl	8001424 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b98:	f000 f942 	bl	8000e20 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b9c:	f000 fa8c 	bl	80010b8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000ba0:	f000 fa60 	bl	8001064 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000ba4:	f000 f9a6 	bl	8000ef4 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim1);
 8000ba8:	4891      	ldr	r0, [pc, #580]	; (8000df0 <main+0x260>)
 8000baa:	f001 fc45 	bl	8002438 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000bae:	2100      	movs	r1, #0
 8000bb0:	488f      	ldr	r0, [pc, #572]	; (8000df0 <main+0x260>)
 8000bb2:	f001 fcfd 	bl	80025b0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000bb6:	2104      	movs	r1, #4
 8000bb8:	488d      	ldr	r0, [pc, #564]	; (8000df0 <main+0x260>)
 8000bba:	f001 fcf9 	bl	80025b0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000bbe:	2108      	movs	r1, #8
 8000bc0:	488b      	ldr	r0, [pc, #556]	; (8000df0 <main+0x260>)
 8000bc2:	f001 fcf5 	bl	80025b0 <HAL_TIM_PWM_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  rf = sinf((M_TWOPI * t * freq) + (0 * offset));
 8000bc6:	4b8b      	ldr	r3, [pc, #556]	; (8000df4 <main+0x264>)
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	4618      	mov	r0, r3
 8000bcc:	f7ff fd92 	bl	80006f4 <__aeabi_f2d>
 8000bd0:	a385      	add	r3, pc, #532	; (adr r3, 8000de8 <main+0x258>)
 8000bd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bd6:	f7ff faff 	bl	80001d8 <__aeabi_dmul>
 8000bda:	4602      	mov	r2, r0
 8000bdc:	460b      	mov	r3, r1
 8000bde:	4614      	mov	r4, r2
 8000be0:	461d      	mov	r5, r3
 8000be2:	4b85      	ldr	r3, [pc, #532]	; (8000df8 <main+0x268>)
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	4618      	mov	r0, r3
 8000be8:	f7ff fd84 	bl	80006f4 <__aeabi_f2d>
 8000bec:	4602      	mov	r2, r0
 8000bee:	460b      	mov	r3, r1
 8000bf0:	4620      	mov	r0, r4
 8000bf2:	4629      	mov	r1, r5
 8000bf4:	f7ff faf0 	bl	80001d8 <__aeabi_dmul>
 8000bf8:	4602      	mov	r2, r0
 8000bfa:	460b      	mov	r3, r1
 8000bfc:	4614      	mov	r4, r2
 8000bfe:	461d      	mov	r5, r3
 8000c00:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 8000dfc <main+0x26c>
 8000c04:	eddf 7a7e 	vldr	s15, [pc, #504]	; 8000e00 <main+0x270>
 8000c08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000c0c:	ee17 0a90 	vmov	r0, s15
 8000c10:	f7ff fd70 	bl	80006f4 <__aeabi_f2d>
 8000c14:	4602      	mov	r2, r0
 8000c16:	460b      	mov	r3, r1
 8000c18:	4620      	mov	r0, r4
 8000c1a:	4629      	mov	r1, r5
 8000c1c:	f7ff fc0c 	bl	8000438 <__adddf3>
 8000c20:	4602      	mov	r2, r0
 8000c22:	460b      	mov	r3, r1
 8000c24:	4610      	mov	r0, r2
 8000c26:	4619      	mov	r1, r3
 8000c28:	f7ff fdbc 	bl	80007a4 <__aeabi_d2f>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	ee00 3a10 	vmov	s0, r3
 8000c32:	f002 feb5 	bl	80039a0 <sinf>
 8000c36:	eef0 7a40 	vmov.f32	s15, s0
 8000c3a:	4b72      	ldr	r3, [pc, #456]	; (8000e04 <main+0x274>)
 8000c3c:	edc3 7a00 	vstr	s15, [r3]
	  gf = sinf((M_TWOPI * t * freq) + (1 * offset));
 8000c40:	4b6c      	ldr	r3, [pc, #432]	; (8000df4 <main+0x264>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	4618      	mov	r0, r3
 8000c46:	f7ff fd55 	bl	80006f4 <__aeabi_f2d>
 8000c4a:	a367      	add	r3, pc, #412	; (adr r3, 8000de8 <main+0x258>)
 8000c4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c50:	f7ff fac2 	bl	80001d8 <__aeabi_dmul>
 8000c54:	4602      	mov	r2, r0
 8000c56:	460b      	mov	r3, r1
 8000c58:	4614      	mov	r4, r2
 8000c5a:	461d      	mov	r5, r3
 8000c5c:	4b66      	ldr	r3, [pc, #408]	; (8000df8 <main+0x268>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	4618      	mov	r0, r3
 8000c62:	f7ff fd47 	bl	80006f4 <__aeabi_f2d>
 8000c66:	4602      	mov	r2, r0
 8000c68:	460b      	mov	r3, r1
 8000c6a:	4620      	mov	r0, r4
 8000c6c:	4629      	mov	r1, r5
 8000c6e:	f7ff fab3 	bl	80001d8 <__aeabi_dmul>
 8000c72:	4602      	mov	r2, r0
 8000c74:	460b      	mov	r3, r1
 8000c76:	4614      	mov	r4, r2
 8000c78:	461d      	mov	r5, r3
 8000c7a:	4b63      	ldr	r3, [pc, #396]	; (8000e08 <main+0x278>)
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f7ff fd39 	bl	80006f4 <__aeabi_f2d>
 8000c82:	4602      	mov	r2, r0
 8000c84:	460b      	mov	r3, r1
 8000c86:	4620      	mov	r0, r4
 8000c88:	4629      	mov	r1, r5
 8000c8a:	f7ff fbd5 	bl	8000438 <__adddf3>
 8000c8e:	4602      	mov	r2, r0
 8000c90:	460b      	mov	r3, r1
 8000c92:	4610      	mov	r0, r2
 8000c94:	4619      	mov	r1, r3
 8000c96:	f7ff fd85 	bl	80007a4 <__aeabi_d2f>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	ee00 3a10 	vmov	s0, r3
 8000ca0:	f002 fe7e 	bl	80039a0 <sinf>
 8000ca4:	eef0 7a40 	vmov.f32	s15, s0
 8000ca8:	4b58      	ldr	r3, [pc, #352]	; (8000e0c <main+0x27c>)
 8000caa:	edc3 7a00 	vstr	s15, [r3]
	  bf = sinf((M_TWOPI * t * freq) + (2 * offset));
 8000cae:	4b51      	ldr	r3, [pc, #324]	; (8000df4 <main+0x264>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	f7ff fd1e 	bl	80006f4 <__aeabi_f2d>
 8000cb8:	a34b      	add	r3, pc, #300	; (adr r3, 8000de8 <main+0x258>)
 8000cba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cbe:	f7ff fa8b 	bl	80001d8 <__aeabi_dmul>
 8000cc2:	4602      	mov	r2, r0
 8000cc4:	460b      	mov	r3, r1
 8000cc6:	4614      	mov	r4, r2
 8000cc8:	461d      	mov	r5, r3
 8000cca:	4b4b      	ldr	r3, [pc, #300]	; (8000df8 <main+0x268>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f7ff fd10 	bl	80006f4 <__aeabi_f2d>
 8000cd4:	4602      	mov	r2, r0
 8000cd6:	460b      	mov	r3, r1
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	f7ff fa7c 	bl	80001d8 <__aeabi_dmul>
 8000ce0:	4602      	mov	r2, r0
 8000ce2:	460b      	mov	r3, r1
 8000ce4:	4614      	mov	r4, r2
 8000ce6:	461d      	mov	r5, r3
 8000ce8:	eddf 7a44 	vldr	s15, [pc, #272]	; 8000dfc <main+0x26c>
 8000cec:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000cf0:	ee17 0a90 	vmov	r0, s15
 8000cf4:	f7ff fcfe 	bl	80006f4 <__aeabi_f2d>
 8000cf8:	4602      	mov	r2, r0
 8000cfa:	460b      	mov	r3, r1
 8000cfc:	4620      	mov	r0, r4
 8000cfe:	4629      	mov	r1, r5
 8000d00:	f7ff fb9a 	bl	8000438 <__adddf3>
 8000d04:	4602      	mov	r2, r0
 8000d06:	460b      	mov	r3, r1
 8000d08:	4610      	mov	r0, r2
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	f7ff fd4a 	bl	80007a4 <__aeabi_d2f>
 8000d10:	4603      	mov	r3, r0
 8000d12:	ee00 3a10 	vmov	s0, r3
 8000d16:	f002 fe43 	bl	80039a0 <sinf>
 8000d1a:	eef0 7a40 	vmov.f32	s15, s0
 8000d1e:	4b3c      	ldr	r3, [pc, #240]	; (8000e10 <main+0x280>)
 8000d20:	edc3 7a00 	vstr	s15, [r3]
	  rf = (rf + 1.0f) * half_arr;
 8000d24:	4b37      	ldr	r3, [pc, #220]	; (8000e04 <main+0x274>)
 8000d26:	edd3 7a00 	vldr	s15, [r3]
 8000d2a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000d2e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000d32:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8000e14 <main+0x284>
 8000d36:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d3a:	4b32      	ldr	r3, [pc, #200]	; (8000e04 <main+0x274>)
 8000d3c:	edc3 7a00 	vstr	s15, [r3]
	  gf = (gf + 1.0f) * half_arr;
 8000d40:	4b32      	ldr	r3, [pc, #200]	; (8000e0c <main+0x27c>)
 8000d42:	edd3 7a00 	vldr	s15, [r3]
 8000d46:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000d4a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000d4e:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8000e14 <main+0x284>
 8000d52:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d56:	4b2d      	ldr	r3, [pc, #180]	; (8000e0c <main+0x27c>)
 8000d58:	edc3 7a00 	vstr	s15, [r3]
	  bf = (bf + 1.0f) * half_arr;
 8000d5c:	4b2c      	ldr	r3, [pc, #176]	; (8000e10 <main+0x280>)
 8000d5e:	edd3 7a00 	vldr	s15, [r3]
 8000d62:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000d66:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000d6a:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8000e14 <main+0x284>
 8000d6e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d72:	4b27      	ldr	r3, [pc, #156]	; (8000e10 <main+0x280>)
 8000d74:	edc3 7a00 	vstr	s15, [r3]

	  rf *= 1.0f;
 8000d78:	4b22      	ldr	r3, [pc, #136]	; (8000e04 <main+0x274>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	4a21      	ldr	r2, [pc, #132]	; (8000e04 <main+0x274>)
 8000d7e:	6013      	str	r3, [r2, #0]
	  gf *= 0.32f;
 8000d80:	4b22      	ldr	r3, [pc, #136]	; (8000e0c <main+0x27c>)
 8000d82:	edd3 7a00 	vldr	s15, [r3]
 8000d86:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8000e18 <main+0x288>
 8000d8a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d8e:	4b1f      	ldr	r3, [pc, #124]	; (8000e0c <main+0x27c>)
 8000d90:	edc3 7a00 	vstr	s15, [r3]
	  bf *= 0.19f;
 8000d94:	4b1e      	ldr	r3, [pc, #120]	; (8000e10 <main+0x280>)
 8000d96:	edd3 7a00 	vldr	s15, [r3]
 8000d9a:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8000e1c <main+0x28c>
 8000d9e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000da2:	4b1b      	ldr	r3, [pc, #108]	; (8000e10 <main+0x280>)
 8000da4:	edc3 7a00 	vstr	s15, [r3]


	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, (uint32_t)bf);
 8000da8:	4b19      	ldr	r3, [pc, #100]	; (8000e10 <main+0x280>)
 8000daa:	edd3 7a00 	vldr	s15, [r3]
 8000dae:	4b10      	ldr	r3, [pc, #64]	; (8000df0 <main+0x260>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000db6:	ee17 2a90 	vmov	r2, s15
 8000dba:	635a      	str	r2, [r3, #52]	; 0x34
	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, (uint32_t)rf);
 8000dbc:	4b11      	ldr	r3, [pc, #68]	; (8000e04 <main+0x274>)
 8000dbe:	edd3 7a00 	vldr	s15, [r3]
 8000dc2:	4b0b      	ldr	r3, [pc, #44]	; (8000df0 <main+0x260>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000dca:	ee17 2a90 	vmov	r2, s15
 8000dce:	639a      	str	r2, [r3, #56]	; 0x38
	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, (uint32_t)gf);
 8000dd0:	4b0e      	ldr	r3, [pc, #56]	; (8000e0c <main+0x27c>)
 8000dd2:	edd3 7a00 	vldr	s15, [r3]
 8000dd6:	4b06      	ldr	r3, [pc, #24]	; (8000df0 <main+0x260>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000dde:	ee17 2a90 	vmov	r2, s15
 8000de2:	63da      	str	r2, [r3, #60]	; 0x3c
	  rf = sinf((M_TWOPI * t * freq) + (0 * offset));
 8000de4:	e6ef      	b.n	8000bc6 <main+0x36>
 8000de6:	bf00      	nop
 8000de8:	54442d18 	.word	0x54442d18
 8000dec:	401921fb 	.word	0x401921fb
 8000df0:	2000003c 	.word	0x2000003c
 8000df4:	20000038 	.word	0x20000038
 8000df8:	20000000 	.word	0x20000000
 8000dfc:	40060a92 	.word	0x40060a92
 8000e00:	00000000 	.word	0x00000000
 8000e04:	2000002c 	.word	0x2000002c
 8000e08:	40060a92 	.word	0x40060a92
 8000e0c:	20000030 	.word	0x20000030
 8000e10:	20000034 	.word	0x20000034
 8000e14:	424a0000 	.word	0x424a0000
 8000e18:	3ea3d70a 	.word	0x3ea3d70a
 8000e1c:	3e428f5c 	.word	0x3e428f5c

08000e20 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b094      	sub	sp, #80	; 0x50
 8000e24:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e26:	f107 0320 	add.w	r3, r7, #32
 8000e2a:	2230      	movs	r2, #48	; 0x30
 8000e2c:	2100      	movs	r1, #0
 8000e2e:	4618      	mov	r0, r3
 8000e30:	f002 fd8a 	bl	8003948 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e34:	f107 030c 	add.w	r3, r7, #12
 8000e38:	2200      	movs	r2, #0
 8000e3a:	601a      	str	r2, [r3, #0]
 8000e3c:	605a      	str	r2, [r3, #4]
 8000e3e:	609a      	str	r2, [r3, #8]
 8000e40:	60da      	str	r2, [r3, #12]
 8000e42:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e44:	2300      	movs	r3, #0
 8000e46:	60bb      	str	r3, [r7, #8]
 8000e48:	4b28      	ldr	r3, [pc, #160]	; (8000eec <SystemClock_Config+0xcc>)
 8000e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e4c:	4a27      	ldr	r2, [pc, #156]	; (8000eec <SystemClock_Config+0xcc>)
 8000e4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e52:	6413      	str	r3, [r2, #64]	; 0x40
 8000e54:	4b25      	ldr	r3, [pc, #148]	; (8000eec <SystemClock_Config+0xcc>)
 8000e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e5c:	60bb      	str	r3, [r7, #8]
 8000e5e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e60:	2300      	movs	r3, #0
 8000e62:	607b      	str	r3, [r7, #4]
 8000e64:	4b22      	ldr	r3, [pc, #136]	; (8000ef0 <SystemClock_Config+0xd0>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	4a21      	ldr	r2, [pc, #132]	; (8000ef0 <SystemClock_Config+0xd0>)
 8000e6a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000e6e:	6013      	str	r3, [r2, #0]
 8000e70:	4b1f      	ldr	r3, [pc, #124]	; (8000ef0 <SystemClock_Config+0xd0>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000e78:	607b      	str	r3, [r7, #4]
 8000e7a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e7c:	2302      	movs	r3, #2
 8000e7e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e80:	2301      	movs	r3, #1
 8000e82:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e84:	2310      	movs	r3, #16
 8000e86:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e88:	2302      	movs	r3, #2
 8000e8a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000e90:	2310      	movs	r3, #16
 8000e92:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000e94:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000e98:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000e9a:	2304      	movs	r3, #4
 8000e9c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000e9e:	2304      	movs	r3, #4
 8000ea0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ea2:	f107 0320 	add.w	r3, r7, #32
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f000 fdde 	bl	8001a68 <HAL_RCC_OscConfig>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d001      	beq.n	8000eb6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000eb2:	f000 f96f 	bl	8001194 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000eb6:	230f      	movs	r3, #15
 8000eb8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000eba:	2302      	movs	r3, #2
 8000ebc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ec2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ec6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ecc:	f107 030c 	add.w	r3, r7, #12
 8000ed0:	2102      	movs	r1, #2
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f001 f840 	bl	8001f58 <HAL_RCC_ClockConfig>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d001      	beq.n	8000ee2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000ede:	f000 f959 	bl	8001194 <Error_Handler>
  }
}
 8000ee2:	bf00      	nop
 8000ee4:	3750      	adds	r7, #80	; 0x50
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	40023800 	.word	0x40023800
 8000ef0:	40007000 	.word	0x40007000

08000ef4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b096      	sub	sp, #88	; 0x58
 8000ef8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000efa:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000efe:	2200      	movs	r2, #0
 8000f00:	601a      	str	r2, [r3, #0]
 8000f02:	605a      	str	r2, [r3, #4]
 8000f04:	609a      	str	r2, [r3, #8]
 8000f06:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f08:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	601a      	str	r2, [r3, #0]
 8000f10:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f16:	2200      	movs	r2, #0
 8000f18:	601a      	str	r2, [r3, #0]
 8000f1a:	605a      	str	r2, [r3, #4]
 8000f1c:	609a      	str	r2, [r3, #8]
 8000f1e:	60da      	str	r2, [r3, #12]
 8000f20:	611a      	str	r2, [r3, #16]
 8000f22:	615a      	str	r2, [r3, #20]
 8000f24:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000f26:	1d3b      	adds	r3, r7, #4
 8000f28:	2220      	movs	r2, #32
 8000f2a:	2100      	movs	r1, #0
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f002 fd0b 	bl	8003948 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000f32:	4b4a      	ldr	r3, [pc, #296]	; (800105c <MX_TIM1_Init+0x168>)
 8000f34:	4a4a      	ldr	r2, [pc, #296]	; (8001060 <MX_TIM1_Init+0x16c>)
 8000f36:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 2000;
 8000f38:	4b48      	ldr	r3, [pc, #288]	; (800105c <MX_TIM1_Init+0x168>)
 8000f3a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000f3e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f40:	4b46      	ldr	r3, [pc, #280]	; (800105c <MX_TIM1_Init+0x168>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100;
 8000f46:	4b45      	ldr	r3, [pc, #276]	; (800105c <MX_TIM1_Init+0x168>)
 8000f48:	2264      	movs	r2, #100	; 0x64
 8000f4a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f4c:	4b43      	ldr	r3, [pc, #268]	; (800105c <MX_TIM1_Init+0x168>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000f52:	4b42      	ldr	r3, [pc, #264]	; (800105c <MX_TIM1_Init+0x168>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f58:	4b40      	ldr	r3, [pc, #256]	; (800105c <MX_TIM1_Init+0x168>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000f5e:	483f      	ldr	r0, [pc, #252]	; (800105c <MX_TIM1_Init+0x168>)
 8000f60:	f001 fa1a 	bl	8002398 <HAL_TIM_Base_Init>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d001      	beq.n	8000f6e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000f6a:	f000 f913 	bl	8001194 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f6e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f72:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000f74:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000f78:	4619      	mov	r1, r3
 8000f7a:	4838      	ldr	r0, [pc, #224]	; (800105c <MX_TIM1_Init+0x168>)
 8000f7c:	f001 fd92 	bl	8002aa4 <HAL_TIM_ConfigClockSource>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d001      	beq.n	8000f8a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000f86:	f000 f905 	bl	8001194 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000f8a:	4834      	ldr	r0, [pc, #208]	; (800105c <MX_TIM1_Init+0x168>)
 8000f8c:	f001 fab6 	bl	80024fc <HAL_TIM_PWM_Init>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d001      	beq.n	8000f9a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000f96:	f000 f8fd 	bl	8001194 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000fa2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	482c      	ldr	r0, [pc, #176]	; (800105c <MX_TIM1_Init+0x168>)
 8000faa:	f002 f937 	bl	800321c <HAL_TIMEx_MasterConfigSynchronization>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d001      	beq.n	8000fb8 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000fb4:	f000 f8ee 	bl	8001194 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000fb8:	2360      	movs	r3, #96	; 0x60
 8000fba:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000fd4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fd8:	2200      	movs	r2, #0
 8000fda:	4619      	mov	r1, r3
 8000fdc:	481f      	ldr	r0, [pc, #124]	; (800105c <MX_TIM1_Init+0x168>)
 8000fde:	f001 fc9f 	bl	8002920 <HAL_TIM_PWM_ConfigChannel>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d001      	beq.n	8000fec <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8000fe8:	f000 f8d4 	bl	8001194 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000fec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ff0:	2204      	movs	r2, #4
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	4819      	ldr	r0, [pc, #100]	; (800105c <MX_TIM1_Init+0x168>)
 8000ff6:	f001 fc93 	bl	8002920 <HAL_TIM_PWM_ConfigChannel>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d001      	beq.n	8001004 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8001000:	f000 f8c8 	bl	8001194 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001004:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001008:	2208      	movs	r2, #8
 800100a:	4619      	mov	r1, r3
 800100c:	4813      	ldr	r0, [pc, #76]	; (800105c <MX_TIM1_Init+0x168>)
 800100e:	f001 fc87 	bl	8002920 <HAL_TIM_PWM_ConfigChannel>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	d001      	beq.n	800101c <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8001018:	f000 f8bc 	bl	8001194 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800101c:	2300      	movs	r3, #0
 800101e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001020:	2300      	movs	r3, #0
 8001022:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001024:	2300      	movs	r3, #0
 8001026:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001028:	2300      	movs	r3, #0
 800102a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800102c:	2300      	movs	r3, #0
 800102e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001030:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001034:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001036:	2300      	movs	r3, #0
 8001038:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800103a:	1d3b      	adds	r3, r7, #4
 800103c:	4619      	mov	r1, r3
 800103e:	4807      	ldr	r0, [pc, #28]	; (800105c <MX_TIM1_Init+0x168>)
 8001040:	f002 f95a 	bl	80032f8 <HAL_TIMEx_ConfigBreakDeadTime>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d001      	beq.n	800104e <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 800104a:	f000 f8a3 	bl	8001194 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800104e:	4803      	ldr	r0, [pc, #12]	; (800105c <MX_TIM1_Init+0x168>)
 8001050:	f000 f8f6 	bl	8001240 <HAL_TIM_MspPostInit>

}
 8001054:	bf00      	nop
 8001056:	3758      	adds	r7, #88	; 0x58
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}
 800105c:	2000003c 	.word	0x2000003c
 8001060:	40010000 	.word	0x40010000

08001064 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001068:	4b11      	ldr	r3, [pc, #68]	; (80010b0 <MX_USART2_UART_Init+0x4c>)
 800106a:	4a12      	ldr	r2, [pc, #72]	; (80010b4 <MX_USART2_UART_Init+0x50>)
 800106c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800106e:	4b10      	ldr	r3, [pc, #64]	; (80010b0 <MX_USART2_UART_Init+0x4c>)
 8001070:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001074:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001076:	4b0e      	ldr	r3, [pc, #56]	; (80010b0 <MX_USART2_UART_Init+0x4c>)
 8001078:	2200      	movs	r2, #0
 800107a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800107c:	4b0c      	ldr	r3, [pc, #48]	; (80010b0 <MX_USART2_UART_Init+0x4c>)
 800107e:	2200      	movs	r2, #0
 8001080:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001082:	4b0b      	ldr	r3, [pc, #44]	; (80010b0 <MX_USART2_UART_Init+0x4c>)
 8001084:	2200      	movs	r2, #0
 8001086:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001088:	4b09      	ldr	r3, [pc, #36]	; (80010b0 <MX_USART2_UART_Init+0x4c>)
 800108a:	220c      	movs	r2, #12
 800108c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800108e:	4b08      	ldr	r3, [pc, #32]	; (80010b0 <MX_USART2_UART_Init+0x4c>)
 8001090:	2200      	movs	r2, #0
 8001092:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001094:	4b06      	ldr	r3, [pc, #24]	; (80010b0 <MX_USART2_UART_Init+0x4c>)
 8001096:	2200      	movs	r2, #0
 8001098:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800109a:	4805      	ldr	r0, [pc, #20]	; (80010b0 <MX_USART2_UART_Init+0x4c>)
 800109c:	f002 f992 	bl	80033c4 <HAL_UART_Init>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d001      	beq.n	80010aa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80010a6:	f000 f875 	bl	8001194 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80010aa:	bf00      	nop
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	20000084 	.word	0x20000084
 80010b4:	40004400 	.word	0x40004400

080010b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b08a      	sub	sp, #40	; 0x28
 80010bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010be:	f107 0314 	add.w	r3, r7, #20
 80010c2:	2200      	movs	r2, #0
 80010c4:	601a      	str	r2, [r3, #0]
 80010c6:	605a      	str	r2, [r3, #4]
 80010c8:	609a      	str	r2, [r3, #8]
 80010ca:	60da      	str	r2, [r3, #12]
 80010cc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010ce:	2300      	movs	r3, #0
 80010d0:	613b      	str	r3, [r7, #16]
 80010d2:	4b2d      	ldr	r3, [pc, #180]	; (8001188 <MX_GPIO_Init+0xd0>)
 80010d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d6:	4a2c      	ldr	r2, [pc, #176]	; (8001188 <MX_GPIO_Init+0xd0>)
 80010d8:	f043 0304 	orr.w	r3, r3, #4
 80010dc:	6313      	str	r3, [r2, #48]	; 0x30
 80010de:	4b2a      	ldr	r3, [pc, #168]	; (8001188 <MX_GPIO_Init+0xd0>)
 80010e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e2:	f003 0304 	and.w	r3, r3, #4
 80010e6:	613b      	str	r3, [r7, #16]
 80010e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010ea:	2300      	movs	r3, #0
 80010ec:	60fb      	str	r3, [r7, #12]
 80010ee:	4b26      	ldr	r3, [pc, #152]	; (8001188 <MX_GPIO_Init+0xd0>)
 80010f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f2:	4a25      	ldr	r2, [pc, #148]	; (8001188 <MX_GPIO_Init+0xd0>)
 80010f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010f8:	6313      	str	r3, [r2, #48]	; 0x30
 80010fa:	4b23      	ldr	r3, [pc, #140]	; (8001188 <MX_GPIO_Init+0xd0>)
 80010fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001102:	60fb      	str	r3, [r7, #12]
 8001104:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001106:	2300      	movs	r3, #0
 8001108:	60bb      	str	r3, [r7, #8]
 800110a:	4b1f      	ldr	r3, [pc, #124]	; (8001188 <MX_GPIO_Init+0xd0>)
 800110c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110e:	4a1e      	ldr	r2, [pc, #120]	; (8001188 <MX_GPIO_Init+0xd0>)
 8001110:	f043 0301 	orr.w	r3, r3, #1
 8001114:	6313      	str	r3, [r2, #48]	; 0x30
 8001116:	4b1c      	ldr	r3, [pc, #112]	; (8001188 <MX_GPIO_Init+0xd0>)
 8001118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111a:	f003 0301 	and.w	r3, r3, #1
 800111e:	60bb      	str	r3, [r7, #8]
 8001120:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001122:	2300      	movs	r3, #0
 8001124:	607b      	str	r3, [r7, #4]
 8001126:	4b18      	ldr	r3, [pc, #96]	; (8001188 <MX_GPIO_Init+0xd0>)
 8001128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112a:	4a17      	ldr	r2, [pc, #92]	; (8001188 <MX_GPIO_Init+0xd0>)
 800112c:	f043 0302 	orr.w	r3, r3, #2
 8001130:	6313      	str	r3, [r2, #48]	; 0x30
 8001132:	4b15      	ldr	r3, [pc, #84]	; (8001188 <MX_GPIO_Init+0xd0>)
 8001134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001136:	f003 0302 	and.w	r3, r3, #2
 800113a:	607b      	str	r3, [r7, #4]
 800113c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800113e:	2200      	movs	r2, #0
 8001140:	2120      	movs	r1, #32
 8001142:	4812      	ldr	r0, [pc, #72]	; (800118c <MX_GPIO_Init+0xd4>)
 8001144:	f000 fc76 	bl	8001a34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001148:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800114c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800114e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001152:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001154:	2300      	movs	r3, #0
 8001156:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001158:	f107 0314 	add.w	r3, r7, #20
 800115c:	4619      	mov	r1, r3
 800115e:	480c      	ldr	r0, [pc, #48]	; (8001190 <MX_GPIO_Init+0xd8>)
 8001160:	f000 fae4 	bl	800172c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001164:	2320      	movs	r3, #32
 8001166:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001168:	2301      	movs	r3, #1
 800116a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116c:	2300      	movs	r3, #0
 800116e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001170:	2300      	movs	r3, #0
 8001172:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001174:	f107 0314 	add.w	r3, r7, #20
 8001178:	4619      	mov	r1, r3
 800117a:	4804      	ldr	r0, [pc, #16]	; (800118c <MX_GPIO_Init+0xd4>)
 800117c:	f000 fad6 	bl	800172c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001180:	bf00      	nop
 8001182:	3728      	adds	r7, #40	; 0x28
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}
 8001188:	40023800 	.word	0x40023800
 800118c:	40020000 	.word	0x40020000
 8001190:	40020800 	.word	0x40020800

08001194 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001194:	b480      	push	{r7}
 8001196:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001198:	b672      	cpsid	i
}
 800119a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800119c:	e7fe      	b.n	800119c <Error_Handler+0x8>
	...

080011a0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b082      	sub	sp, #8
 80011a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011a6:	2300      	movs	r3, #0
 80011a8:	607b      	str	r3, [r7, #4]
 80011aa:	4b10      	ldr	r3, [pc, #64]	; (80011ec <HAL_MspInit+0x4c>)
 80011ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ae:	4a0f      	ldr	r2, [pc, #60]	; (80011ec <HAL_MspInit+0x4c>)
 80011b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011b4:	6453      	str	r3, [r2, #68]	; 0x44
 80011b6:	4b0d      	ldr	r3, [pc, #52]	; (80011ec <HAL_MspInit+0x4c>)
 80011b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011be:	607b      	str	r3, [r7, #4]
 80011c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011c2:	2300      	movs	r3, #0
 80011c4:	603b      	str	r3, [r7, #0]
 80011c6:	4b09      	ldr	r3, [pc, #36]	; (80011ec <HAL_MspInit+0x4c>)
 80011c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ca:	4a08      	ldr	r2, [pc, #32]	; (80011ec <HAL_MspInit+0x4c>)
 80011cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011d0:	6413      	str	r3, [r2, #64]	; 0x40
 80011d2:	4b06      	ldr	r3, [pc, #24]	; (80011ec <HAL_MspInit+0x4c>)
 80011d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011da:	603b      	str	r3, [r7, #0]
 80011dc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80011de:	2007      	movs	r0, #7
 80011e0:	f000 fa62 	bl	80016a8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011e4:	bf00      	nop
 80011e6:	3708      	adds	r7, #8
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	40023800 	.word	0x40023800

080011f0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b084      	sub	sp, #16
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4a0e      	ldr	r2, [pc, #56]	; (8001238 <HAL_TIM_Base_MspInit+0x48>)
 80011fe:	4293      	cmp	r3, r2
 8001200:	d115      	bne.n	800122e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001202:	2300      	movs	r3, #0
 8001204:	60fb      	str	r3, [r7, #12]
 8001206:	4b0d      	ldr	r3, [pc, #52]	; (800123c <HAL_TIM_Base_MspInit+0x4c>)
 8001208:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800120a:	4a0c      	ldr	r2, [pc, #48]	; (800123c <HAL_TIM_Base_MspInit+0x4c>)
 800120c:	f043 0301 	orr.w	r3, r3, #1
 8001210:	6453      	str	r3, [r2, #68]	; 0x44
 8001212:	4b0a      	ldr	r3, [pc, #40]	; (800123c <HAL_TIM_Base_MspInit+0x4c>)
 8001214:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001216:	f003 0301 	and.w	r3, r3, #1
 800121a:	60fb      	str	r3, [r7, #12]
 800121c:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800121e:	2200      	movs	r2, #0
 8001220:	2100      	movs	r1, #0
 8001222:	2019      	movs	r0, #25
 8001224:	f000 fa4b 	bl	80016be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001228:	2019      	movs	r0, #25
 800122a:	f000 fa64 	bl	80016f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800122e:	bf00      	nop
 8001230:	3710      	adds	r7, #16
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	40010000 	.word	0x40010000
 800123c:	40023800 	.word	0x40023800

08001240 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b088      	sub	sp, #32
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001248:	f107 030c 	add.w	r3, r7, #12
 800124c:	2200      	movs	r2, #0
 800124e:	601a      	str	r2, [r3, #0]
 8001250:	605a      	str	r2, [r3, #4]
 8001252:	609a      	str	r2, [r3, #8]
 8001254:	60da      	str	r2, [r3, #12]
 8001256:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4a12      	ldr	r2, [pc, #72]	; (80012a8 <HAL_TIM_MspPostInit+0x68>)
 800125e:	4293      	cmp	r3, r2
 8001260:	d11e      	bne.n	80012a0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001262:	2300      	movs	r3, #0
 8001264:	60bb      	str	r3, [r7, #8]
 8001266:	4b11      	ldr	r3, [pc, #68]	; (80012ac <HAL_TIM_MspPostInit+0x6c>)
 8001268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126a:	4a10      	ldr	r2, [pc, #64]	; (80012ac <HAL_TIM_MspPostInit+0x6c>)
 800126c:	f043 0301 	orr.w	r3, r3, #1
 8001270:	6313      	str	r3, [r2, #48]	; 0x30
 8001272:	4b0e      	ldr	r3, [pc, #56]	; (80012ac <HAL_TIM_MspPostInit+0x6c>)
 8001274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001276:	f003 0301 	and.w	r3, r3, #1
 800127a:	60bb      	str	r3, [r7, #8]
 800127c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 800127e:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001282:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001284:	2302      	movs	r3, #2
 8001286:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001288:	2300      	movs	r3, #0
 800128a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800128c:	2300      	movs	r3, #0
 800128e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001290:	2301      	movs	r3, #1
 8001292:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001294:	f107 030c 	add.w	r3, r7, #12
 8001298:	4619      	mov	r1, r3
 800129a:	4805      	ldr	r0, [pc, #20]	; (80012b0 <HAL_TIM_MspPostInit+0x70>)
 800129c:	f000 fa46 	bl	800172c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80012a0:	bf00      	nop
 80012a2:	3720      	adds	r7, #32
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	40010000 	.word	0x40010000
 80012ac:	40023800 	.word	0x40023800
 80012b0:	40020000 	.word	0x40020000

080012b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b08a      	sub	sp, #40	; 0x28
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012bc:	f107 0314 	add.w	r3, r7, #20
 80012c0:	2200      	movs	r2, #0
 80012c2:	601a      	str	r2, [r3, #0]
 80012c4:	605a      	str	r2, [r3, #4]
 80012c6:	609a      	str	r2, [r3, #8]
 80012c8:	60da      	str	r2, [r3, #12]
 80012ca:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4a19      	ldr	r2, [pc, #100]	; (8001338 <HAL_UART_MspInit+0x84>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d12b      	bne.n	800132e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80012d6:	2300      	movs	r3, #0
 80012d8:	613b      	str	r3, [r7, #16]
 80012da:	4b18      	ldr	r3, [pc, #96]	; (800133c <HAL_UART_MspInit+0x88>)
 80012dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012de:	4a17      	ldr	r2, [pc, #92]	; (800133c <HAL_UART_MspInit+0x88>)
 80012e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012e4:	6413      	str	r3, [r2, #64]	; 0x40
 80012e6:	4b15      	ldr	r3, [pc, #84]	; (800133c <HAL_UART_MspInit+0x88>)
 80012e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012ee:	613b      	str	r3, [r7, #16]
 80012f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012f2:	2300      	movs	r3, #0
 80012f4:	60fb      	str	r3, [r7, #12]
 80012f6:	4b11      	ldr	r3, [pc, #68]	; (800133c <HAL_UART_MspInit+0x88>)
 80012f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fa:	4a10      	ldr	r2, [pc, #64]	; (800133c <HAL_UART_MspInit+0x88>)
 80012fc:	f043 0301 	orr.w	r3, r3, #1
 8001300:	6313      	str	r3, [r2, #48]	; 0x30
 8001302:	4b0e      	ldr	r3, [pc, #56]	; (800133c <HAL_UART_MspInit+0x88>)
 8001304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001306:	f003 0301 	and.w	r3, r3, #1
 800130a:	60fb      	str	r3, [r7, #12]
 800130c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800130e:	230c      	movs	r3, #12
 8001310:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001312:	2302      	movs	r3, #2
 8001314:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001316:	2300      	movs	r3, #0
 8001318:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800131a:	2303      	movs	r3, #3
 800131c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800131e:	2307      	movs	r3, #7
 8001320:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001322:	f107 0314 	add.w	r3, r7, #20
 8001326:	4619      	mov	r1, r3
 8001328:	4805      	ldr	r0, [pc, #20]	; (8001340 <HAL_UART_MspInit+0x8c>)
 800132a:	f000 f9ff 	bl	800172c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800132e:	bf00      	nop
 8001330:	3728      	adds	r7, #40	; 0x28
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	40004400 	.word	0x40004400
 800133c:	40023800 	.word	0x40023800
 8001340:	40020000 	.word	0x40020000

08001344 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001348:	e7fe      	b.n	8001348 <NMI_Handler+0x4>

0800134a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800134a:	b480      	push	{r7}
 800134c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800134e:	e7fe      	b.n	800134e <HardFault_Handler+0x4>

08001350 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001350:	b480      	push	{r7}
 8001352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001354:	e7fe      	b.n	8001354 <MemManage_Handler+0x4>

08001356 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001356:	b480      	push	{r7}
 8001358:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800135a:	e7fe      	b.n	800135a <BusFault_Handler+0x4>

0800135c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001360:	e7fe      	b.n	8001360 <UsageFault_Handler+0x4>

08001362 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001362:	b480      	push	{r7}
 8001364:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001366:	bf00      	nop
 8001368:	46bd      	mov	sp, r7
 800136a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136e:	4770      	bx	lr

08001370 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001370:	b480      	push	{r7}
 8001372:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001374:	bf00      	nop
 8001376:	46bd      	mov	sp, r7
 8001378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137c:	4770      	bx	lr

0800137e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800137e:	b480      	push	{r7}
 8001380:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001382:	bf00      	nop
 8001384:	46bd      	mov	sp, r7
 8001386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138a:	4770      	bx	lr

0800138c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001390:	f000 f89a 	bl	80014c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001394:	bf00      	nop
 8001396:	bd80      	pop	{r7, pc}

08001398 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800139c:	4802      	ldr	r0, [pc, #8]	; (80013a8 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800139e:	f001 f9b7 	bl	8002710 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80013a2:	bf00      	nop
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	2000003c 	.word	0x2000003c

080013ac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013ac:	b480      	push	{r7}
 80013ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013b0:	4b06      	ldr	r3, [pc, #24]	; (80013cc <SystemInit+0x20>)
 80013b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013b6:	4a05      	ldr	r2, [pc, #20]	; (80013cc <SystemInit+0x20>)
 80013b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013c0:	bf00      	nop
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr
 80013ca:	bf00      	nop
 80013cc:	e000ed00 	.word	0xe000ed00

080013d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80013d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001408 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80013d4:	480d      	ldr	r0, [pc, #52]	; (800140c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80013d6:	490e      	ldr	r1, [pc, #56]	; (8001410 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80013d8:	4a0e      	ldr	r2, [pc, #56]	; (8001414 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80013da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013dc:	e002      	b.n	80013e4 <LoopCopyDataInit>

080013de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013e2:	3304      	adds	r3, #4

080013e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013e8:	d3f9      	bcc.n	80013de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013ea:	4a0b      	ldr	r2, [pc, #44]	; (8001418 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80013ec:	4c0b      	ldr	r4, [pc, #44]	; (800141c <LoopFillZerobss+0x26>)
  movs r3, #0
 80013ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013f0:	e001      	b.n	80013f6 <LoopFillZerobss>

080013f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013f4:	3204      	adds	r2, #4

080013f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013f8:	d3fb      	bcc.n	80013f2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80013fa:	f7ff ffd7 	bl	80013ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80013fe:	f002 faab 	bl	8003958 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001402:	f7ff fbc5 	bl	8000b90 <main>
  bx  lr    
 8001406:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001408:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800140c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001410:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001414:	08004824 	.word	0x08004824
  ldr r2, =_sbss
 8001418:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 800141c:	200000cc 	.word	0x200000cc

08001420 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001420:	e7fe      	b.n	8001420 <ADC_IRQHandler>
	...

08001424 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001428:	4b0e      	ldr	r3, [pc, #56]	; (8001464 <HAL_Init+0x40>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4a0d      	ldr	r2, [pc, #52]	; (8001464 <HAL_Init+0x40>)
 800142e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001432:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001434:	4b0b      	ldr	r3, [pc, #44]	; (8001464 <HAL_Init+0x40>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4a0a      	ldr	r2, [pc, #40]	; (8001464 <HAL_Init+0x40>)
 800143a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800143e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001440:	4b08      	ldr	r3, [pc, #32]	; (8001464 <HAL_Init+0x40>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4a07      	ldr	r2, [pc, #28]	; (8001464 <HAL_Init+0x40>)
 8001446:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800144a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800144c:	2003      	movs	r0, #3
 800144e:	f000 f92b 	bl	80016a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001452:	2000      	movs	r0, #0
 8001454:	f000 f808 	bl	8001468 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001458:	f7ff fea2 	bl	80011a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800145c:	2300      	movs	r3, #0
}
 800145e:	4618      	mov	r0, r3
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	40023c00 	.word	0x40023c00

08001468 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b082      	sub	sp, #8
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001470:	4b12      	ldr	r3, [pc, #72]	; (80014bc <HAL_InitTick+0x54>)
 8001472:	681a      	ldr	r2, [r3, #0]
 8001474:	4b12      	ldr	r3, [pc, #72]	; (80014c0 <HAL_InitTick+0x58>)
 8001476:	781b      	ldrb	r3, [r3, #0]
 8001478:	4619      	mov	r1, r3
 800147a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800147e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001482:	fbb2 f3f3 	udiv	r3, r2, r3
 8001486:	4618      	mov	r0, r3
 8001488:	f000 f943 	bl	8001712 <HAL_SYSTICK_Config>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	d001      	beq.n	8001496 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001492:	2301      	movs	r3, #1
 8001494:	e00e      	b.n	80014b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	2b0f      	cmp	r3, #15
 800149a:	d80a      	bhi.n	80014b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800149c:	2200      	movs	r2, #0
 800149e:	6879      	ldr	r1, [r7, #4]
 80014a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80014a4:	f000 f90b 	bl	80016be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014a8:	4a06      	ldr	r2, [pc, #24]	; (80014c4 <HAL_InitTick+0x5c>)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014ae:	2300      	movs	r3, #0
 80014b0:	e000      	b.n	80014b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014b2:	2301      	movs	r3, #1
}
 80014b4:	4618      	mov	r0, r3
 80014b6:	3708      	adds	r7, #8
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	20000004 	.word	0x20000004
 80014c0:	2000000c 	.word	0x2000000c
 80014c4:	20000008 	.word	0x20000008

080014c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014cc:	4b06      	ldr	r3, [pc, #24]	; (80014e8 <HAL_IncTick+0x20>)
 80014ce:	781b      	ldrb	r3, [r3, #0]
 80014d0:	461a      	mov	r2, r3
 80014d2:	4b06      	ldr	r3, [pc, #24]	; (80014ec <HAL_IncTick+0x24>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4413      	add	r3, r2
 80014d8:	4a04      	ldr	r2, [pc, #16]	; (80014ec <HAL_IncTick+0x24>)
 80014da:	6013      	str	r3, [r2, #0]
}
 80014dc:	bf00      	nop
 80014de:	46bd      	mov	sp, r7
 80014e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e4:	4770      	bx	lr
 80014e6:	bf00      	nop
 80014e8:	2000000c 	.word	0x2000000c
 80014ec:	200000c8 	.word	0x200000c8

080014f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0
  return uwTick;
 80014f4:	4b03      	ldr	r3, [pc, #12]	; (8001504 <HAL_GetTick+0x14>)
 80014f6:	681b      	ldr	r3, [r3, #0]
}
 80014f8:	4618      	mov	r0, r3
 80014fa:	46bd      	mov	sp, r7
 80014fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001500:	4770      	bx	lr
 8001502:	bf00      	nop
 8001504:	200000c8 	.word	0x200000c8

08001508 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001508:	b480      	push	{r7}
 800150a:	b085      	sub	sp, #20
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	f003 0307 	and.w	r3, r3, #7
 8001516:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001518:	4b0c      	ldr	r3, [pc, #48]	; (800154c <__NVIC_SetPriorityGrouping+0x44>)
 800151a:	68db      	ldr	r3, [r3, #12]
 800151c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800151e:	68ba      	ldr	r2, [r7, #8]
 8001520:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001524:	4013      	ands	r3, r2
 8001526:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800152c:	68bb      	ldr	r3, [r7, #8]
 800152e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001530:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001534:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001538:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800153a:	4a04      	ldr	r2, [pc, #16]	; (800154c <__NVIC_SetPriorityGrouping+0x44>)
 800153c:	68bb      	ldr	r3, [r7, #8]
 800153e:	60d3      	str	r3, [r2, #12]
}
 8001540:	bf00      	nop
 8001542:	3714      	adds	r7, #20
 8001544:	46bd      	mov	sp, r7
 8001546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154a:	4770      	bx	lr
 800154c:	e000ed00 	.word	0xe000ed00

08001550 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001550:	b480      	push	{r7}
 8001552:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001554:	4b04      	ldr	r3, [pc, #16]	; (8001568 <__NVIC_GetPriorityGrouping+0x18>)
 8001556:	68db      	ldr	r3, [r3, #12]
 8001558:	0a1b      	lsrs	r3, r3, #8
 800155a:	f003 0307 	and.w	r3, r3, #7
}
 800155e:	4618      	mov	r0, r3
 8001560:	46bd      	mov	sp, r7
 8001562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001566:	4770      	bx	lr
 8001568:	e000ed00 	.word	0xe000ed00

0800156c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800156c:	b480      	push	{r7}
 800156e:	b083      	sub	sp, #12
 8001570:	af00      	add	r7, sp, #0
 8001572:	4603      	mov	r3, r0
 8001574:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001576:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800157a:	2b00      	cmp	r3, #0
 800157c:	db0b      	blt.n	8001596 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800157e:	79fb      	ldrb	r3, [r7, #7]
 8001580:	f003 021f 	and.w	r2, r3, #31
 8001584:	4907      	ldr	r1, [pc, #28]	; (80015a4 <__NVIC_EnableIRQ+0x38>)
 8001586:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800158a:	095b      	lsrs	r3, r3, #5
 800158c:	2001      	movs	r0, #1
 800158e:	fa00 f202 	lsl.w	r2, r0, r2
 8001592:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001596:	bf00      	nop
 8001598:	370c      	adds	r7, #12
 800159a:	46bd      	mov	sp, r7
 800159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a0:	4770      	bx	lr
 80015a2:	bf00      	nop
 80015a4:	e000e100 	.word	0xe000e100

080015a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b083      	sub	sp, #12
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	4603      	mov	r3, r0
 80015b0:	6039      	str	r1, [r7, #0]
 80015b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	db0a      	blt.n	80015d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	b2da      	uxtb	r2, r3
 80015c0:	490c      	ldr	r1, [pc, #48]	; (80015f4 <__NVIC_SetPriority+0x4c>)
 80015c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015c6:	0112      	lsls	r2, r2, #4
 80015c8:	b2d2      	uxtb	r2, r2
 80015ca:	440b      	add	r3, r1
 80015cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015d0:	e00a      	b.n	80015e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	b2da      	uxtb	r2, r3
 80015d6:	4908      	ldr	r1, [pc, #32]	; (80015f8 <__NVIC_SetPriority+0x50>)
 80015d8:	79fb      	ldrb	r3, [r7, #7]
 80015da:	f003 030f 	and.w	r3, r3, #15
 80015de:	3b04      	subs	r3, #4
 80015e0:	0112      	lsls	r2, r2, #4
 80015e2:	b2d2      	uxtb	r2, r2
 80015e4:	440b      	add	r3, r1
 80015e6:	761a      	strb	r2, [r3, #24]
}
 80015e8:	bf00      	nop
 80015ea:	370c      	adds	r7, #12
 80015ec:	46bd      	mov	sp, r7
 80015ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f2:	4770      	bx	lr
 80015f4:	e000e100 	.word	0xe000e100
 80015f8:	e000ed00 	.word	0xe000ed00

080015fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b089      	sub	sp, #36	; 0x24
 8001600:	af00      	add	r7, sp, #0
 8001602:	60f8      	str	r0, [r7, #12]
 8001604:	60b9      	str	r1, [r7, #8]
 8001606:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	f003 0307 	and.w	r3, r3, #7
 800160e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001610:	69fb      	ldr	r3, [r7, #28]
 8001612:	f1c3 0307 	rsb	r3, r3, #7
 8001616:	2b04      	cmp	r3, #4
 8001618:	bf28      	it	cs
 800161a:	2304      	movcs	r3, #4
 800161c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800161e:	69fb      	ldr	r3, [r7, #28]
 8001620:	3304      	adds	r3, #4
 8001622:	2b06      	cmp	r3, #6
 8001624:	d902      	bls.n	800162c <NVIC_EncodePriority+0x30>
 8001626:	69fb      	ldr	r3, [r7, #28]
 8001628:	3b03      	subs	r3, #3
 800162a:	e000      	b.n	800162e <NVIC_EncodePriority+0x32>
 800162c:	2300      	movs	r3, #0
 800162e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001630:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001634:	69bb      	ldr	r3, [r7, #24]
 8001636:	fa02 f303 	lsl.w	r3, r2, r3
 800163a:	43da      	mvns	r2, r3
 800163c:	68bb      	ldr	r3, [r7, #8]
 800163e:	401a      	ands	r2, r3
 8001640:	697b      	ldr	r3, [r7, #20]
 8001642:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001644:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001648:	697b      	ldr	r3, [r7, #20]
 800164a:	fa01 f303 	lsl.w	r3, r1, r3
 800164e:	43d9      	mvns	r1, r3
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001654:	4313      	orrs	r3, r2
         );
}
 8001656:	4618      	mov	r0, r3
 8001658:	3724      	adds	r7, #36	; 0x24
 800165a:	46bd      	mov	sp, r7
 800165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001660:	4770      	bx	lr
	...

08001664 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b082      	sub	sp, #8
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	3b01      	subs	r3, #1
 8001670:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001674:	d301      	bcc.n	800167a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001676:	2301      	movs	r3, #1
 8001678:	e00f      	b.n	800169a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800167a:	4a0a      	ldr	r2, [pc, #40]	; (80016a4 <SysTick_Config+0x40>)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	3b01      	subs	r3, #1
 8001680:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001682:	210f      	movs	r1, #15
 8001684:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001688:	f7ff ff8e 	bl	80015a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800168c:	4b05      	ldr	r3, [pc, #20]	; (80016a4 <SysTick_Config+0x40>)
 800168e:	2200      	movs	r2, #0
 8001690:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001692:	4b04      	ldr	r3, [pc, #16]	; (80016a4 <SysTick_Config+0x40>)
 8001694:	2207      	movs	r2, #7
 8001696:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001698:	2300      	movs	r3, #0
}
 800169a:	4618      	mov	r0, r3
 800169c:	3708      	adds	r7, #8
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	e000e010 	.word	0xe000e010

080016a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b082      	sub	sp, #8
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016b0:	6878      	ldr	r0, [r7, #4]
 80016b2:	f7ff ff29 	bl	8001508 <__NVIC_SetPriorityGrouping>
}
 80016b6:	bf00      	nop
 80016b8:	3708      	adds	r7, #8
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}

080016be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016be:	b580      	push	{r7, lr}
 80016c0:	b086      	sub	sp, #24
 80016c2:	af00      	add	r7, sp, #0
 80016c4:	4603      	mov	r3, r0
 80016c6:	60b9      	str	r1, [r7, #8]
 80016c8:	607a      	str	r2, [r7, #4]
 80016ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016cc:	2300      	movs	r3, #0
 80016ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016d0:	f7ff ff3e 	bl	8001550 <__NVIC_GetPriorityGrouping>
 80016d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016d6:	687a      	ldr	r2, [r7, #4]
 80016d8:	68b9      	ldr	r1, [r7, #8]
 80016da:	6978      	ldr	r0, [r7, #20]
 80016dc:	f7ff ff8e 	bl	80015fc <NVIC_EncodePriority>
 80016e0:	4602      	mov	r2, r0
 80016e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016e6:	4611      	mov	r1, r2
 80016e8:	4618      	mov	r0, r3
 80016ea:	f7ff ff5d 	bl	80015a8 <__NVIC_SetPriority>
}
 80016ee:	bf00      	nop
 80016f0:	3718      	adds	r7, #24
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}

080016f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016f6:	b580      	push	{r7, lr}
 80016f8:	b082      	sub	sp, #8
 80016fa:	af00      	add	r7, sp, #0
 80016fc:	4603      	mov	r3, r0
 80016fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001700:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001704:	4618      	mov	r0, r3
 8001706:	f7ff ff31 	bl	800156c <__NVIC_EnableIRQ>
}
 800170a:	bf00      	nop
 800170c:	3708      	adds	r7, #8
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}

08001712 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001712:	b580      	push	{r7, lr}
 8001714:	b082      	sub	sp, #8
 8001716:	af00      	add	r7, sp, #0
 8001718:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800171a:	6878      	ldr	r0, [r7, #4]
 800171c:	f7ff ffa2 	bl	8001664 <SysTick_Config>
 8001720:	4603      	mov	r3, r0
}
 8001722:	4618      	mov	r0, r3
 8001724:	3708      	adds	r7, #8
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
	...

0800172c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800172c:	b480      	push	{r7}
 800172e:	b089      	sub	sp, #36	; 0x24
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
 8001734:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001736:	2300      	movs	r3, #0
 8001738:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800173a:	2300      	movs	r3, #0
 800173c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800173e:	2300      	movs	r3, #0
 8001740:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001742:	2300      	movs	r3, #0
 8001744:	61fb      	str	r3, [r7, #28]
 8001746:	e159      	b.n	80019fc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001748:	2201      	movs	r2, #1
 800174a:	69fb      	ldr	r3, [r7, #28]
 800174c:	fa02 f303 	lsl.w	r3, r2, r3
 8001750:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	697a      	ldr	r2, [r7, #20]
 8001758:	4013      	ands	r3, r2
 800175a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800175c:	693a      	ldr	r2, [r7, #16]
 800175e:	697b      	ldr	r3, [r7, #20]
 8001760:	429a      	cmp	r2, r3
 8001762:	f040 8148 	bne.w	80019f6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	f003 0303 	and.w	r3, r3, #3
 800176e:	2b01      	cmp	r3, #1
 8001770:	d005      	beq.n	800177e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800177a:	2b02      	cmp	r3, #2
 800177c:	d130      	bne.n	80017e0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	689b      	ldr	r3, [r3, #8]
 8001782:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001784:	69fb      	ldr	r3, [r7, #28]
 8001786:	005b      	lsls	r3, r3, #1
 8001788:	2203      	movs	r2, #3
 800178a:	fa02 f303 	lsl.w	r3, r2, r3
 800178e:	43db      	mvns	r3, r3
 8001790:	69ba      	ldr	r2, [r7, #24]
 8001792:	4013      	ands	r3, r2
 8001794:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	68da      	ldr	r2, [r3, #12]
 800179a:	69fb      	ldr	r3, [r7, #28]
 800179c:	005b      	lsls	r3, r3, #1
 800179e:	fa02 f303 	lsl.w	r3, r2, r3
 80017a2:	69ba      	ldr	r2, [r7, #24]
 80017a4:	4313      	orrs	r3, r2
 80017a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	69ba      	ldr	r2, [r7, #24]
 80017ac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80017b4:	2201      	movs	r2, #1
 80017b6:	69fb      	ldr	r3, [r7, #28]
 80017b8:	fa02 f303 	lsl.w	r3, r2, r3
 80017bc:	43db      	mvns	r3, r3
 80017be:	69ba      	ldr	r2, [r7, #24]
 80017c0:	4013      	ands	r3, r2
 80017c2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	091b      	lsrs	r3, r3, #4
 80017ca:	f003 0201 	and.w	r2, r3, #1
 80017ce:	69fb      	ldr	r3, [r7, #28]
 80017d0:	fa02 f303 	lsl.w	r3, r2, r3
 80017d4:	69ba      	ldr	r2, [r7, #24]
 80017d6:	4313      	orrs	r3, r2
 80017d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	69ba      	ldr	r2, [r7, #24]
 80017de:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	f003 0303 	and.w	r3, r3, #3
 80017e8:	2b03      	cmp	r3, #3
 80017ea:	d017      	beq.n	800181c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	68db      	ldr	r3, [r3, #12]
 80017f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80017f2:	69fb      	ldr	r3, [r7, #28]
 80017f4:	005b      	lsls	r3, r3, #1
 80017f6:	2203      	movs	r2, #3
 80017f8:	fa02 f303 	lsl.w	r3, r2, r3
 80017fc:	43db      	mvns	r3, r3
 80017fe:	69ba      	ldr	r2, [r7, #24]
 8001800:	4013      	ands	r3, r2
 8001802:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	689a      	ldr	r2, [r3, #8]
 8001808:	69fb      	ldr	r3, [r7, #28]
 800180a:	005b      	lsls	r3, r3, #1
 800180c:	fa02 f303 	lsl.w	r3, r2, r3
 8001810:	69ba      	ldr	r2, [r7, #24]
 8001812:	4313      	orrs	r3, r2
 8001814:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	69ba      	ldr	r2, [r7, #24]
 800181a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	f003 0303 	and.w	r3, r3, #3
 8001824:	2b02      	cmp	r3, #2
 8001826:	d123      	bne.n	8001870 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001828:	69fb      	ldr	r3, [r7, #28]
 800182a:	08da      	lsrs	r2, r3, #3
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	3208      	adds	r2, #8
 8001830:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001834:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001836:	69fb      	ldr	r3, [r7, #28]
 8001838:	f003 0307 	and.w	r3, r3, #7
 800183c:	009b      	lsls	r3, r3, #2
 800183e:	220f      	movs	r2, #15
 8001840:	fa02 f303 	lsl.w	r3, r2, r3
 8001844:	43db      	mvns	r3, r3
 8001846:	69ba      	ldr	r2, [r7, #24]
 8001848:	4013      	ands	r3, r2
 800184a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	691a      	ldr	r2, [r3, #16]
 8001850:	69fb      	ldr	r3, [r7, #28]
 8001852:	f003 0307 	and.w	r3, r3, #7
 8001856:	009b      	lsls	r3, r3, #2
 8001858:	fa02 f303 	lsl.w	r3, r2, r3
 800185c:	69ba      	ldr	r2, [r7, #24]
 800185e:	4313      	orrs	r3, r2
 8001860:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001862:	69fb      	ldr	r3, [r7, #28]
 8001864:	08da      	lsrs	r2, r3, #3
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	3208      	adds	r2, #8
 800186a:	69b9      	ldr	r1, [r7, #24]
 800186c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001876:	69fb      	ldr	r3, [r7, #28]
 8001878:	005b      	lsls	r3, r3, #1
 800187a:	2203      	movs	r2, #3
 800187c:	fa02 f303 	lsl.w	r3, r2, r3
 8001880:	43db      	mvns	r3, r3
 8001882:	69ba      	ldr	r2, [r7, #24]
 8001884:	4013      	ands	r3, r2
 8001886:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	f003 0203 	and.w	r2, r3, #3
 8001890:	69fb      	ldr	r3, [r7, #28]
 8001892:	005b      	lsls	r3, r3, #1
 8001894:	fa02 f303 	lsl.w	r3, r2, r3
 8001898:	69ba      	ldr	r2, [r7, #24]
 800189a:	4313      	orrs	r3, r2
 800189c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	69ba      	ldr	r2, [r7, #24]
 80018a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	f000 80a2 	beq.w	80019f6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018b2:	2300      	movs	r3, #0
 80018b4:	60fb      	str	r3, [r7, #12]
 80018b6:	4b57      	ldr	r3, [pc, #348]	; (8001a14 <HAL_GPIO_Init+0x2e8>)
 80018b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ba:	4a56      	ldr	r2, [pc, #344]	; (8001a14 <HAL_GPIO_Init+0x2e8>)
 80018bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018c0:	6453      	str	r3, [r2, #68]	; 0x44
 80018c2:	4b54      	ldr	r3, [pc, #336]	; (8001a14 <HAL_GPIO_Init+0x2e8>)
 80018c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018ca:	60fb      	str	r3, [r7, #12]
 80018cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80018ce:	4a52      	ldr	r2, [pc, #328]	; (8001a18 <HAL_GPIO_Init+0x2ec>)
 80018d0:	69fb      	ldr	r3, [r7, #28]
 80018d2:	089b      	lsrs	r3, r3, #2
 80018d4:	3302      	adds	r3, #2
 80018d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80018dc:	69fb      	ldr	r3, [r7, #28]
 80018de:	f003 0303 	and.w	r3, r3, #3
 80018e2:	009b      	lsls	r3, r3, #2
 80018e4:	220f      	movs	r2, #15
 80018e6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ea:	43db      	mvns	r3, r3
 80018ec:	69ba      	ldr	r2, [r7, #24]
 80018ee:	4013      	ands	r3, r2
 80018f0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	4a49      	ldr	r2, [pc, #292]	; (8001a1c <HAL_GPIO_Init+0x2f0>)
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d019      	beq.n	800192e <HAL_GPIO_Init+0x202>
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	4a48      	ldr	r2, [pc, #288]	; (8001a20 <HAL_GPIO_Init+0x2f4>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	d013      	beq.n	800192a <HAL_GPIO_Init+0x1fe>
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	4a47      	ldr	r2, [pc, #284]	; (8001a24 <HAL_GPIO_Init+0x2f8>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d00d      	beq.n	8001926 <HAL_GPIO_Init+0x1fa>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	4a46      	ldr	r2, [pc, #280]	; (8001a28 <HAL_GPIO_Init+0x2fc>)
 800190e:	4293      	cmp	r3, r2
 8001910:	d007      	beq.n	8001922 <HAL_GPIO_Init+0x1f6>
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	4a45      	ldr	r2, [pc, #276]	; (8001a2c <HAL_GPIO_Init+0x300>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d101      	bne.n	800191e <HAL_GPIO_Init+0x1f2>
 800191a:	2304      	movs	r3, #4
 800191c:	e008      	b.n	8001930 <HAL_GPIO_Init+0x204>
 800191e:	2307      	movs	r3, #7
 8001920:	e006      	b.n	8001930 <HAL_GPIO_Init+0x204>
 8001922:	2303      	movs	r3, #3
 8001924:	e004      	b.n	8001930 <HAL_GPIO_Init+0x204>
 8001926:	2302      	movs	r3, #2
 8001928:	e002      	b.n	8001930 <HAL_GPIO_Init+0x204>
 800192a:	2301      	movs	r3, #1
 800192c:	e000      	b.n	8001930 <HAL_GPIO_Init+0x204>
 800192e:	2300      	movs	r3, #0
 8001930:	69fa      	ldr	r2, [r7, #28]
 8001932:	f002 0203 	and.w	r2, r2, #3
 8001936:	0092      	lsls	r2, r2, #2
 8001938:	4093      	lsls	r3, r2
 800193a:	69ba      	ldr	r2, [r7, #24]
 800193c:	4313      	orrs	r3, r2
 800193e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001940:	4935      	ldr	r1, [pc, #212]	; (8001a18 <HAL_GPIO_Init+0x2ec>)
 8001942:	69fb      	ldr	r3, [r7, #28]
 8001944:	089b      	lsrs	r3, r3, #2
 8001946:	3302      	adds	r3, #2
 8001948:	69ba      	ldr	r2, [r7, #24]
 800194a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800194e:	4b38      	ldr	r3, [pc, #224]	; (8001a30 <HAL_GPIO_Init+0x304>)
 8001950:	689b      	ldr	r3, [r3, #8]
 8001952:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001954:	693b      	ldr	r3, [r7, #16]
 8001956:	43db      	mvns	r3, r3
 8001958:	69ba      	ldr	r2, [r7, #24]
 800195a:	4013      	ands	r3, r2
 800195c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001966:	2b00      	cmp	r3, #0
 8001968:	d003      	beq.n	8001972 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800196a:	69ba      	ldr	r2, [r7, #24]
 800196c:	693b      	ldr	r3, [r7, #16]
 800196e:	4313      	orrs	r3, r2
 8001970:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001972:	4a2f      	ldr	r2, [pc, #188]	; (8001a30 <HAL_GPIO_Init+0x304>)
 8001974:	69bb      	ldr	r3, [r7, #24]
 8001976:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001978:	4b2d      	ldr	r3, [pc, #180]	; (8001a30 <HAL_GPIO_Init+0x304>)
 800197a:	68db      	ldr	r3, [r3, #12]
 800197c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800197e:	693b      	ldr	r3, [r7, #16]
 8001980:	43db      	mvns	r3, r3
 8001982:	69ba      	ldr	r2, [r7, #24]
 8001984:	4013      	ands	r3, r2
 8001986:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001990:	2b00      	cmp	r3, #0
 8001992:	d003      	beq.n	800199c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001994:	69ba      	ldr	r2, [r7, #24]
 8001996:	693b      	ldr	r3, [r7, #16]
 8001998:	4313      	orrs	r3, r2
 800199a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800199c:	4a24      	ldr	r2, [pc, #144]	; (8001a30 <HAL_GPIO_Init+0x304>)
 800199e:	69bb      	ldr	r3, [r7, #24]
 80019a0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80019a2:	4b23      	ldr	r3, [pc, #140]	; (8001a30 <HAL_GPIO_Init+0x304>)
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019a8:	693b      	ldr	r3, [r7, #16]
 80019aa:	43db      	mvns	r3, r3
 80019ac:	69ba      	ldr	r2, [r7, #24]
 80019ae:	4013      	ands	r3, r2
 80019b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d003      	beq.n	80019c6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80019be:	69ba      	ldr	r2, [r7, #24]
 80019c0:	693b      	ldr	r3, [r7, #16]
 80019c2:	4313      	orrs	r3, r2
 80019c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80019c6:	4a1a      	ldr	r2, [pc, #104]	; (8001a30 <HAL_GPIO_Init+0x304>)
 80019c8:	69bb      	ldr	r3, [r7, #24]
 80019ca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80019cc:	4b18      	ldr	r3, [pc, #96]	; (8001a30 <HAL_GPIO_Init+0x304>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019d2:	693b      	ldr	r3, [r7, #16]
 80019d4:	43db      	mvns	r3, r3
 80019d6:	69ba      	ldr	r2, [r7, #24]
 80019d8:	4013      	ands	r3, r2
 80019da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d003      	beq.n	80019f0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80019e8:	69ba      	ldr	r2, [r7, #24]
 80019ea:	693b      	ldr	r3, [r7, #16]
 80019ec:	4313      	orrs	r3, r2
 80019ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80019f0:	4a0f      	ldr	r2, [pc, #60]	; (8001a30 <HAL_GPIO_Init+0x304>)
 80019f2:	69bb      	ldr	r3, [r7, #24]
 80019f4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019f6:	69fb      	ldr	r3, [r7, #28]
 80019f8:	3301      	adds	r3, #1
 80019fa:	61fb      	str	r3, [r7, #28]
 80019fc:	69fb      	ldr	r3, [r7, #28]
 80019fe:	2b0f      	cmp	r3, #15
 8001a00:	f67f aea2 	bls.w	8001748 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001a04:	bf00      	nop
 8001a06:	bf00      	nop
 8001a08:	3724      	adds	r7, #36	; 0x24
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr
 8001a12:	bf00      	nop
 8001a14:	40023800 	.word	0x40023800
 8001a18:	40013800 	.word	0x40013800
 8001a1c:	40020000 	.word	0x40020000
 8001a20:	40020400 	.word	0x40020400
 8001a24:	40020800 	.word	0x40020800
 8001a28:	40020c00 	.word	0x40020c00
 8001a2c:	40021000 	.word	0x40021000
 8001a30:	40013c00 	.word	0x40013c00

08001a34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b083      	sub	sp, #12
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
 8001a3c:	460b      	mov	r3, r1
 8001a3e:	807b      	strh	r3, [r7, #2]
 8001a40:	4613      	mov	r3, r2
 8001a42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a44:	787b      	ldrb	r3, [r7, #1]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d003      	beq.n	8001a52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a4a:	887a      	ldrh	r2, [r7, #2]
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001a50:	e003      	b.n	8001a5a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001a52:	887b      	ldrh	r3, [r7, #2]
 8001a54:	041a      	lsls	r2, r3, #16
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	619a      	str	r2, [r3, #24]
}
 8001a5a:	bf00      	nop
 8001a5c:	370c      	adds	r7, #12
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr
	...

08001a68 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b086      	sub	sp, #24
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d101      	bne.n	8001a7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a76:	2301      	movs	r3, #1
 8001a78:	e267      	b.n	8001f4a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f003 0301 	and.w	r3, r3, #1
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d075      	beq.n	8001b72 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001a86:	4b88      	ldr	r3, [pc, #544]	; (8001ca8 <HAL_RCC_OscConfig+0x240>)
 8001a88:	689b      	ldr	r3, [r3, #8]
 8001a8a:	f003 030c 	and.w	r3, r3, #12
 8001a8e:	2b04      	cmp	r3, #4
 8001a90:	d00c      	beq.n	8001aac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a92:	4b85      	ldr	r3, [pc, #532]	; (8001ca8 <HAL_RCC_OscConfig+0x240>)
 8001a94:	689b      	ldr	r3, [r3, #8]
 8001a96:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001a9a:	2b08      	cmp	r3, #8
 8001a9c:	d112      	bne.n	8001ac4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a9e:	4b82      	ldr	r3, [pc, #520]	; (8001ca8 <HAL_RCC_OscConfig+0x240>)
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001aa6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001aaa:	d10b      	bne.n	8001ac4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001aac:	4b7e      	ldr	r3, [pc, #504]	; (8001ca8 <HAL_RCC_OscConfig+0x240>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d05b      	beq.n	8001b70 <HAL_RCC_OscConfig+0x108>
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d157      	bne.n	8001b70 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	e242      	b.n	8001f4a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001acc:	d106      	bne.n	8001adc <HAL_RCC_OscConfig+0x74>
 8001ace:	4b76      	ldr	r3, [pc, #472]	; (8001ca8 <HAL_RCC_OscConfig+0x240>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4a75      	ldr	r2, [pc, #468]	; (8001ca8 <HAL_RCC_OscConfig+0x240>)
 8001ad4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ad8:	6013      	str	r3, [r2, #0]
 8001ada:	e01d      	b.n	8001b18 <HAL_RCC_OscConfig+0xb0>
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ae4:	d10c      	bne.n	8001b00 <HAL_RCC_OscConfig+0x98>
 8001ae6:	4b70      	ldr	r3, [pc, #448]	; (8001ca8 <HAL_RCC_OscConfig+0x240>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4a6f      	ldr	r2, [pc, #444]	; (8001ca8 <HAL_RCC_OscConfig+0x240>)
 8001aec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001af0:	6013      	str	r3, [r2, #0]
 8001af2:	4b6d      	ldr	r3, [pc, #436]	; (8001ca8 <HAL_RCC_OscConfig+0x240>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4a6c      	ldr	r2, [pc, #432]	; (8001ca8 <HAL_RCC_OscConfig+0x240>)
 8001af8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001afc:	6013      	str	r3, [r2, #0]
 8001afe:	e00b      	b.n	8001b18 <HAL_RCC_OscConfig+0xb0>
 8001b00:	4b69      	ldr	r3, [pc, #420]	; (8001ca8 <HAL_RCC_OscConfig+0x240>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a68      	ldr	r2, [pc, #416]	; (8001ca8 <HAL_RCC_OscConfig+0x240>)
 8001b06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b0a:	6013      	str	r3, [r2, #0]
 8001b0c:	4b66      	ldr	r3, [pc, #408]	; (8001ca8 <HAL_RCC_OscConfig+0x240>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a65      	ldr	r2, [pc, #404]	; (8001ca8 <HAL_RCC_OscConfig+0x240>)
 8001b12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b16:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d013      	beq.n	8001b48 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b20:	f7ff fce6 	bl	80014f0 <HAL_GetTick>
 8001b24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b26:	e008      	b.n	8001b3a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b28:	f7ff fce2 	bl	80014f0 <HAL_GetTick>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	693b      	ldr	r3, [r7, #16]
 8001b30:	1ad3      	subs	r3, r2, r3
 8001b32:	2b64      	cmp	r3, #100	; 0x64
 8001b34:	d901      	bls.n	8001b3a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001b36:	2303      	movs	r3, #3
 8001b38:	e207      	b.n	8001f4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b3a:	4b5b      	ldr	r3, [pc, #364]	; (8001ca8 <HAL_RCC_OscConfig+0x240>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d0f0      	beq.n	8001b28 <HAL_RCC_OscConfig+0xc0>
 8001b46:	e014      	b.n	8001b72 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b48:	f7ff fcd2 	bl	80014f0 <HAL_GetTick>
 8001b4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b4e:	e008      	b.n	8001b62 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b50:	f7ff fcce 	bl	80014f0 <HAL_GetTick>
 8001b54:	4602      	mov	r2, r0
 8001b56:	693b      	ldr	r3, [r7, #16]
 8001b58:	1ad3      	subs	r3, r2, r3
 8001b5a:	2b64      	cmp	r3, #100	; 0x64
 8001b5c:	d901      	bls.n	8001b62 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001b5e:	2303      	movs	r3, #3
 8001b60:	e1f3      	b.n	8001f4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b62:	4b51      	ldr	r3, [pc, #324]	; (8001ca8 <HAL_RCC_OscConfig+0x240>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d1f0      	bne.n	8001b50 <HAL_RCC_OscConfig+0xe8>
 8001b6e:	e000      	b.n	8001b72 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f003 0302 	and.w	r3, r3, #2
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d063      	beq.n	8001c46 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001b7e:	4b4a      	ldr	r3, [pc, #296]	; (8001ca8 <HAL_RCC_OscConfig+0x240>)
 8001b80:	689b      	ldr	r3, [r3, #8]
 8001b82:	f003 030c 	and.w	r3, r3, #12
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d00b      	beq.n	8001ba2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b8a:	4b47      	ldr	r3, [pc, #284]	; (8001ca8 <HAL_RCC_OscConfig+0x240>)
 8001b8c:	689b      	ldr	r3, [r3, #8]
 8001b8e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001b92:	2b08      	cmp	r3, #8
 8001b94:	d11c      	bne.n	8001bd0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b96:	4b44      	ldr	r3, [pc, #272]	; (8001ca8 <HAL_RCC_OscConfig+0x240>)
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d116      	bne.n	8001bd0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ba2:	4b41      	ldr	r3, [pc, #260]	; (8001ca8 <HAL_RCC_OscConfig+0x240>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f003 0302 	and.w	r3, r3, #2
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d005      	beq.n	8001bba <HAL_RCC_OscConfig+0x152>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	68db      	ldr	r3, [r3, #12]
 8001bb2:	2b01      	cmp	r3, #1
 8001bb4:	d001      	beq.n	8001bba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	e1c7      	b.n	8001f4a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bba:	4b3b      	ldr	r3, [pc, #236]	; (8001ca8 <HAL_RCC_OscConfig+0x240>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	691b      	ldr	r3, [r3, #16]
 8001bc6:	00db      	lsls	r3, r3, #3
 8001bc8:	4937      	ldr	r1, [pc, #220]	; (8001ca8 <HAL_RCC_OscConfig+0x240>)
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bce:	e03a      	b.n	8001c46 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	68db      	ldr	r3, [r3, #12]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d020      	beq.n	8001c1a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001bd8:	4b34      	ldr	r3, [pc, #208]	; (8001cac <HAL_RCC_OscConfig+0x244>)
 8001bda:	2201      	movs	r2, #1
 8001bdc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bde:	f7ff fc87 	bl	80014f0 <HAL_GetTick>
 8001be2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001be4:	e008      	b.n	8001bf8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001be6:	f7ff fc83 	bl	80014f0 <HAL_GetTick>
 8001bea:	4602      	mov	r2, r0
 8001bec:	693b      	ldr	r3, [r7, #16]
 8001bee:	1ad3      	subs	r3, r2, r3
 8001bf0:	2b02      	cmp	r3, #2
 8001bf2:	d901      	bls.n	8001bf8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001bf4:	2303      	movs	r3, #3
 8001bf6:	e1a8      	b.n	8001f4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bf8:	4b2b      	ldr	r3, [pc, #172]	; (8001ca8 <HAL_RCC_OscConfig+0x240>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f003 0302 	and.w	r3, r3, #2
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d0f0      	beq.n	8001be6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c04:	4b28      	ldr	r3, [pc, #160]	; (8001ca8 <HAL_RCC_OscConfig+0x240>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	691b      	ldr	r3, [r3, #16]
 8001c10:	00db      	lsls	r3, r3, #3
 8001c12:	4925      	ldr	r1, [pc, #148]	; (8001ca8 <HAL_RCC_OscConfig+0x240>)
 8001c14:	4313      	orrs	r3, r2
 8001c16:	600b      	str	r3, [r1, #0]
 8001c18:	e015      	b.n	8001c46 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c1a:	4b24      	ldr	r3, [pc, #144]	; (8001cac <HAL_RCC_OscConfig+0x244>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c20:	f7ff fc66 	bl	80014f0 <HAL_GetTick>
 8001c24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c26:	e008      	b.n	8001c3a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c28:	f7ff fc62 	bl	80014f0 <HAL_GetTick>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	693b      	ldr	r3, [r7, #16]
 8001c30:	1ad3      	subs	r3, r2, r3
 8001c32:	2b02      	cmp	r3, #2
 8001c34:	d901      	bls.n	8001c3a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001c36:	2303      	movs	r3, #3
 8001c38:	e187      	b.n	8001f4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c3a:	4b1b      	ldr	r3, [pc, #108]	; (8001ca8 <HAL_RCC_OscConfig+0x240>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f003 0302 	and.w	r3, r3, #2
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d1f0      	bne.n	8001c28 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f003 0308 	and.w	r3, r3, #8
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d036      	beq.n	8001cc0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	695b      	ldr	r3, [r3, #20]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d016      	beq.n	8001c88 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c5a:	4b15      	ldr	r3, [pc, #84]	; (8001cb0 <HAL_RCC_OscConfig+0x248>)
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c60:	f7ff fc46 	bl	80014f0 <HAL_GetTick>
 8001c64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c66:	e008      	b.n	8001c7a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c68:	f7ff fc42 	bl	80014f0 <HAL_GetTick>
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	693b      	ldr	r3, [r7, #16]
 8001c70:	1ad3      	subs	r3, r2, r3
 8001c72:	2b02      	cmp	r3, #2
 8001c74:	d901      	bls.n	8001c7a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001c76:	2303      	movs	r3, #3
 8001c78:	e167      	b.n	8001f4a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c7a:	4b0b      	ldr	r3, [pc, #44]	; (8001ca8 <HAL_RCC_OscConfig+0x240>)
 8001c7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c7e:	f003 0302 	and.w	r3, r3, #2
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d0f0      	beq.n	8001c68 <HAL_RCC_OscConfig+0x200>
 8001c86:	e01b      	b.n	8001cc0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c88:	4b09      	ldr	r3, [pc, #36]	; (8001cb0 <HAL_RCC_OscConfig+0x248>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c8e:	f7ff fc2f 	bl	80014f0 <HAL_GetTick>
 8001c92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c94:	e00e      	b.n	8001cb4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c96:	f7ff fc2b 	bl	80014f0 <HAL_GetTick>
 8001c9a:	4602      	mov	r2, r0
 8001c9c:	693b      	ldr	r3, [r7, #16]
 8001c9e:	1ad3      	subs	r3, r2, r3
 8001ca0:	2b02      	cmp	r3, #2
 8001ca2:	d907      	bls.n	8001cb4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001ca4:	2303      	movs	r3, #3
 8001ca6:	e150      	b.n	8001f4a <HAL_RCC_OscConfig+0x4e2>
 8001ca8:	40023800 	.word	0x40023800
 8001cac:	42470000 	.word	0x42470000
 8001cb0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cb4:	4b88      	ldr	r3, [pc, #544]	; (8001ed8 <HAL_RCC_OscConfig+0x470>)
 8001cb6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001cb8:	f003 0302 	and.w	r3, r3, #2
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d1ea      	bne.n	8001c96 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f003 0304 	and.w	r3, r3, #4
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	f000 8097 	beq.w	8001dfc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cd2:	4b81      	ldr	r3, [pc, #516]	; (8001ed8 <HAL_RCC_OscConfig+0x470>)
 8001cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d10f      	bne.n	8001cfe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cde:	2300      	movs	r3, #0
 8001ce0:	60bb      	str	r3, [r7, #8]
 8001ce2:	4b7d      	ldr	r3, [pc, #500]	; (8001ed8 <HAL_RCC_OscConfig+0x470>)
 8001ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce6:	4a7c      	ldr	r2, [pc, #496]	; (8001ed8 <HAL_RCC_OscConfig+0x470>)
 8001ce8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cec:	6413      	str	r3, [r2, #64]	; 0x40
 8001cee:	4b7a      	ldr	r3, [pc, #488]	; (8001ed8 <HAL_RCC_OscConfig+0x470>)
 8001cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cf6:	60bb      	str	r3, [r7, #8]
 8001cf8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cfe:	4b77      	ldr	r3, [pc, #476]	; (8001edc <HAL_RCC_OscConfig+0x474>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d118      	bne.n	8001d3c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d0a:	4b74      	ldr	r3, [pc, #464]	; (8001edc <HAL_RCC_OscConfig+0x474>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4a73      	ldr	r2, [pc, #460]	; (8001edc <HAL_RCC_OscConfig+0x474>)
 8001d10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d14:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d16:	f7ff fbeb 	bl	80014f0 <HAL_GetTick>
 8001d1a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d1c:	e008      	b.n	8001d30 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d1e:	f7ff fbe7 	bl	80014f0 <HAL_GetTick>
 8001d22:	4602      	mov	r2, r0
 8001d24:	693b      	ldr	r3, [r7, #16]
 8001d26:	1ad3      	subs	r3, r2, r3
 8001d28:	2b02      	cmp	r3, #2
 8001d2a:	d901      	bls.n	8001d30 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001d2c:	2303      	movs	r3, #3
 8001d2e:	e10c      	b.n	8001f4a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d30:	4b6a      	ldr	r3, [pc, #424]	; (8001edc <HAL_RCC_OscConfig+0x474>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d0f0      	beq.n	8001d1e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	689b      	ldr	r3, [r3, #8]
 8001d40:	2b01      	cmp	r3, #1
 8001d42:	d106      	bne.n	8001d52 <HAL_RCC_OscConfig+0x2ea>
 8001d44:	4b64      	ldr	r3, [pc, #400]	; (8001ed8 <HAL_RCC_OscConfig+0x470>)
 8001d46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d48:	4a63      	ldr	r2, [pc, #396]	; (8001ed8 <HAL_RCC_OscConfig+0x470>)
 8001d4a:	f043 0301 	orr.w	r3, r3, #1
 8001d4e:	6713      	str	r3, [r2, #112]	; 0x70
 8001d50:	e01c      	b.n	8001d8c <HAL_RCC_OscConfig+0x324>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	689b      	ldr	r3, [r3, #8]
 8001d56:	2b05      	cmp	r3, #5
 8001d58:	d10c      	bne.n	8001d74 <HAL_RCC_OscConfig+0x30c>
 8001d5a:	4b5f      	ldr	r3, [pc, #380]	; (8001ed8 <HAL_RCC_OscConfig+0x470>)
 8001d5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d5e:	4a5e      	ldr	r2, [pc, #376]	; (8001ed8 <HAL_RCC_OscConfig+0x470>)
 8001d60:	f043 0304 	orr.w	r3, r3, #4
 8001d64:	6713      	str	r3, [r2, #112]	; 0x70
 8001d66:	4b5c      	ldr	r3, [pc, #368]	; (8001ed8 <HAL_RCC_OscConfig+0x470>)
 8001d68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d6a:	4a5b      	ldr	r2, [pc, #364]	; (8001ed8 <HAL_RCC_OscConfig+0x470>)
 8001d6c:	f043 0301 	orr.w	r3, r3, #1
 8001d70:	6713      	str	r3, [r2, #112]	; 0x70
 8001d72:	e00b      	b.n	8001d8c <HAL_RCC_OscConfig+0x324>
 8001d74:	4b58      	ldr	r3, [pc, #352]	; (8001ed8 <HAL_RCC_OscConfig+0x470>)
 8001d76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d78:	4a57      	ldr	r2, [pc, #348]	; (8001ed8 <HAL_RCC_OscConfig+0x470>)
 8001d7a:	f023 0301 	bic.w	r3, r3, #1
 8001d7e:	6713      	str	r3, [r2, #112]	; 0x70
 8001d80:	4b55      	ldr	r3, [pc, #340]	; (8001ed8 <HAL_RCC_OscConfig+0x470>)
 8001d82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d84:	4a54      	ldr	r2, [pc, #336]	; (8001ed8 <HAL_RCC_OscConfig+0x470>)
 8001d86:	f023 0304 	bic.w	r3, r3, #4
 8001d8a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	689b      	ldr	r3, [r3, #8]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d015      	beq.n	8001dc0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d94:	f7ff fbac 	bl	80014f0 <HAL_GetTick>
 8001d98:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d9a:	e00a      	b.n	8001db2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d9c:	f7ff fba8 	bl	80014f0 <HAL_GetTick>
 8001da0:	4602      	mov	r2, r0
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	1ad3      	subs	r3, r2, r3
 8001da6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d901      	bls.n	8001db2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001dae:	2303      	movs	r3, #3
 8001db0:	e0cb      	b.n	8001f4a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001db2:	4b49      	ldr	r3, [pc, #292]	; (8001ed8 <HAL_RCC_OscConfig+0x470>)
 8001db4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001db6:	f003 0302 	and.w	r3, r3, #2
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d0ee      	beq.n	8001d9c <HAL_RCC_OscConfig+0x334>
 8001dbe:	e014      	b.n	8001dea <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dc0:	f7ff fb96 	bl	80014f0 <HAL_GetTick>
 8001dc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001dc6:	e00a      	b.n	8001dde <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001dc8:	f7ff fb92 	bl	80014f0 <HAL_GetTick>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	1ad3      	subs	r3, r2, r3
 8001dd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d901      	bls.n	8001dde <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001dda:	2303      	movs	r3, #3
 8001ddc:	e0b5      	b.n	8001f4a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001dde:	4b3e      	ldr	r3, [pc, #248]	; (8001ed8 <HAL_RCC_OscConfig+0x470>)
 8001de0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001de2:	f003 0302 	and.w	r3, r3, #2
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d1ee      	bne.n	8001dc8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001dea:	7dfb      	ldrb	r3, [r7, #23]
 8001dec:	2b01      	cmp	r3, #1
 8001dee:	d105      	bne.n	8001dfc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001df0:	4b39      	ldr	r3, [pc, #228]	; (8001ed8 <HAL_RCC_OscConfig+0x470>)
 8001df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df4:	4a38      	ldr	r2, [pc, #224]	; (8001ed8 <HAL_RCC_OscConfig+0x470>)
 8001df6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001dfa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	699b      	ldr	r3, [r3, #24]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	f000 80a1 	beq.w	8001f48 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001e06:	4b34      	ldr	r3, [pc, #208]	; (8001ed8 <HAL_RCC_OscConfig+0x470>)
 8001e08:	689b      	ldr	r3, [r3, #8]
 8001e0a:	f003 030c 	and.w	r3, r3, #12
 8001e0e:	2b08      	cmp	r3, #8
 8001e10:	d05c      	beq.n	8001ecc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	699b      	ldr	r3, [r3, #24]
 8001e16:	2b02      	cmp	r3, #2
 8001e18:	d141      	bne.n	8001e9e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e1a:	4b31      	ldr	r3, [pc, #196]	; (8001ee0 <HAL_RCC_OscConfig+0x478>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e20:	f7ff fb66 	bl	80014f0 <HAL_GetTick>
 8001e24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e26:	e008      	b.n	8001e3a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e28:	f7ff fb62 	bl	80014f0 <HAL_GetTick>
 8001e2c:	4602      	mov	r2, r0
 8001e2e:	693b      	ldr	r3, [r7, #16]
 8001e30:	1ad3      	subs	r3, r2, r3
 8001e32:	2b02      	cmp	r3, #2
 8001e34:	d901      	bls.n	8001e3a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001e36:	2303      	movs	r3, #3
 8001e38:	e087      	b.n	8001f4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e3a:	4b27      	ldr	r3, [pc, #156]	; (8001ed8 <HAL_RCC_OscConfig+0x470>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d1f0      	bne.n	8001e28 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	69da      	ldr	r2, [r3, #28]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6a1b      	ldr	r3, [r3, #32]
 8001e4e:	431a      	orrs	r2, r3
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e54:	019b      	lsls	r3, r3, #6
 8001e56:	431a      	orrs	r2, r3
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e5c:	085b      	lsrs	r3, r3, #1
 8001e5e:	3b01      	subs	r3, #1
 8001e60:	041b      	lsls	r3, r3, #16
 8001e62:	431a      	orrs	r2, r3
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e68:	061b      	lsls	r3, r3, #24
 8001e6a:	491b      	ldr	r1, [pc, #108]	; (8001ed8 <HAL_RCC_OscConfig+0x470>)
 8001e6c:	4313      	orrs	r3, r2
 8001e6e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e70:	4b1b      	ldr	r3, [pc, #108]	; (8001ee0 <HAL_RCC_OscConfig+0x478>)
 8001e72:	2201      	movs	r2, #1
 8001e74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e76:	f7ff fb3b 	bl	80014f0 <HAL_GetTick>
 8001e7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e7c:	e008      	b.n	8001e90 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e7e:	f7ff fb37 	bl	80014f0 <HAL_GetTick>
 8001e82:	4602      	mov	r2, r0
 8001e84:	693b      	ldr	r3, [r7, #16]
 8001e86:	1ad3      	subs	r3, r2, r3
 8001e88:	2b02      	cmp	r3, #2
 8001e8a:	d901      	bls.n	8001e90 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001e8c:	2303      	movs	r3, #3
 8001e8e:	e05c      	b.n	8001f4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e90:	4b11      	ldr	r3, [pc, #68]	; (8001ed8 <HAL_RCC_OscConfig+0x470>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d0f0      	beq.n	8001e7e <HAL_RCC_OscConfig+0x416>
 8001e9c:	e054      	b.n	8001f48 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e9e:	4b10      	ldr	r3, [pc, #64]	; (8001ee0 <HAL_RCC_OscConfig+0x478>)
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ea4:	f7ff fb24 	bl	80014f0 <HAL_GetTick>
 8001ea8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001eaa:	e008      	b.n	8001ebe <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001eac:	f7ff fb20 	bl	80014f0 <HAL_GetTick>
 8001eb0:	4602      	mov	r2, r0
 8001eb2:	693b      	ldr	r3, [r7, #16]
 8001eb4:	1ad3      	subs	r3, r2, r3
 8001eb6:	2b02      	cmp	r3, #2
 8001eb8:	d901      	bls.n	8001ebe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001eba:	2303      	movs	r3, #3
 8001ebc:	e045      	b.n	8001f4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ebe:	4b06      	ldr	r3, [pc, #24]	; (8001ed8 <HAL_RCC_OscConfig+0x470>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d1f0      	bne.n	8001eac <HAL_RCC_OscConfig+0x444>
 8001eca:	e03d      	b.n	8001f48 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	699b      	ldr	r3, [r3, #24]
 8001ed0:	2b01      	cmp	r3, #1
 8001ed2:	d107      	bne.n	8001ee4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	e038      	b.n	8001f4a <HAL_RCC_OscConfig+0x4e2>
 8001ed8:	40023800 	.word	0x40023800
 8001edc:	40007000 	.word	0x40007000
 8001ee0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001ee4:	4b1b      	ldr	r3, [pc, #108]	; (8001f54 <HAL_RCC_OscConfig+0x4ec>)
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	699b      	ldr	r3, [r3, #24]
 8001eee:	2b01      	cmp	r3, #1
 8001ef0:	d028      	beq.n	8001f44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001efc:	429a      	cmp	r2, r3
 8001efe:	d121      	bne.n	8001f44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f0a:	429a      	cmp	r2, r3
 8001f0c:	d11a      	bne.n	8001f44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f0e:	68fa      	ldr	r2, [r7, #12]
 8001f10:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001f14:	4013      	ands	r3, r2
 8001f16:	687a      	ldr	r2, [r7, #4]
 8001f18:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001f1a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d111      	bne.n	8001f44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f2a:	085b      	lsrs	r3, r3, #1
 8001f2c:	3b01      	subs	r3, #1
 8001f2e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f30:	429a      	cmp	r2, r3
 8001f32:	d107      	bne.n	8001f44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f3e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f40:	429a      	cmp	r2, r3
 8001f42:	d001      	beq.n	8001f48 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001f44:	2301      	movs	r3, #1
 8001f46:	e000      	b.n	8001f4a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001f48:	2300      	movs	r3, #0
}
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	3718      	adds	r7, #24
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}
 8001f52:	bf00      	nop
 8001f54:	40023800 	.word	0x40023800

08001f58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b084      	sub	sp, #16
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
 8001f60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d101      	bne.n	8001f6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	e0cc      	b.n	8002106 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f6c:	4b68      	ldr	r3, [pc, #416]	; (8002110 <HAL_RCC_ClockConfig+0x1b8>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f003 0307 	and.w	r3, r3, #7
 8001f74:	683a      	ldr	r2, [r7, #0]
 8001f76:	429a      	cmp	r2, r3
 8001f78:	d90c      	bls.n	8001f94 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f7a:	4b65      	ldr	r3, [pc, #404]	; (8002110 <HAL_RCC_ClockConfig+0x1b8>)
 8001f7c:	683a      	ldr	r2, [r7, #0]
 8001f7e:	b2d2      	uxtb	r2, r2
 8001f80:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f82:	4b63      	ldr	r3, [pc, #396]	; (8002110 <HAL_RCC_ClockConfig+0x1b8>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f003 0307 	and.w	r3, r3, #7
 8001f8a:	683a      	ldr	r2, [r7, #0]
 8001f8c:	429a      	cmp	r2, r3
 8001f8e:	d001      	beq.n	8001f94 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001f90:	2301      	movs	r3, #1
 8001f92:	e0b8      	b.n	8002106 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f003 0302 	and.w	r3, r3, #2
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d020      	beq.n	8001fe2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f003 0304 	and.w	r3, r3, #4
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d005      	beq.n	8001fb8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001fac:	4b59      	ldr	r3, [pc, #356]	; (8002114 <HAL_RCC_ClockConfig+0x1bc>)
 8001fae:	689b      	ldr	r3, [r3, #8]
 8001fb0:	4a58      	ldr	r2, [pc, #352]	; (8002114 <HAL_RCC_ClockConfig+0x1bc>)
 8001fb2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001fb6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f003 0308 	and.w	r3, r3, #8
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d005      	beq.n	8001fd0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001fc4:	4b53      	ldr	r3, [pc, #332]	; (8002114 <HAL_RCC_ClockConfig+0x1bc>)
 8001fc6:	689b      	ldr	r3, [r3, #8]
 8001fc8:	4a52      	ldr	r2, [pc, #328]	; (8002114 <HAL_RCC_ClockConfig+0x1bc>)
 8001fca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001fce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fd0:	4b50      	ldr	r3, [pc, #320]	; (8002114 <HAL_RCC_ClockConfig+0x1bc>)
 8001fd2:	689b      	ldr	r3, [r3, #8]
 8001fd4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	689b      	ldr	r3, [r3, #8]
 8001fdc:	494d      	ldr	r1, [pc, #308]	; (8002114 <HAL_RCC_ClockConfig+0x1bc>)
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f003 0301 	and.w	r3, r3, #1
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d044      	beq.n	8002078 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	2b01      	cmp	r3, #1
 8001ff4:	d107      	bne.n	8002006 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ff6:	4b47      	ldr	r3, [pc, #284]	; (8002114 <HAL_RCC_ClockConfig+0x1bc>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d119      	bne.n	8002036 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002002:	2301      	movs	r3, #1
 8002004:	e07f      	b.n	8002106 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	2b02      	cmp	r3, #2
 800200c:	d003      	beq.n	8002016 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002012:	2b03      	cmp	r3, #3
 8002014:	d107      	bne.n	8002026 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002016:	4b3f      	ldr	r3, [pc, #252]	; (8002114 <HAL_RCC_ClockConfig+0x1bc>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800201e:	2b00      	cmp	r3, #0
 8002020:	d109      	bne.n	8002036 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002022:	2301      	movs	r3, #1
 8002024:	e06f      	b.n	8002106 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002026:	4b3b      	ldr	r3, [pc, #236]	; (8002114 <HAL_RCC_ClockConfig+0x1bc>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f003 0302 	and.w	r3, r3, #2
 800202e:	2b00      	cmp	r3, #0
 8002030:	d101      	bne.n	8002036 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002032:	2301      	movs	r3, #1
 8002034:	e067      	b.n	8002106 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002036:	4b37      	ldr	r3, [pc, #220]	; (8002114 <HAL_RCC_ClockConfig+0x1bc>)
 8002038:	689b      	ldr	r3, [r3, #8]
 800203a:	f023 0203 	bic.w	r2, r3, #3
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	4934      	ldr	r1, [pc, #208]	; (8002114 <HAL_RCC_ClockConfig+0x1bc>)
 8002044:	4313      	orrs	r3, r2
 8002046:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002048:	f7ff fa52 	bl	80014f0 <HAL_GetTick>
 800204c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800204e:	e00a      	b.n	8002066 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002050:	f7ff fa4e 	bl	80014f0 <HAL_GetTick>
 8002054:	4602      	mov	r2, r0
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	1ad3      	subs	r3, r2, r3
 800205a:	f241 3288 	movw	r2, #5000	; 0x1388
 800205e:	4293      	cmp	r3, r2
 8002060:	d901      	bls.n	8002066 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002062:	2303      	movs	r3, #3
 8002064:	e04f      	b.n	8002106 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002066:	4b2b      	ldr	r3, [pc, #172]	; (8002114 <HAL_RCC_ClockConfig+0x1bc>)
 8002068:	689b      	ldr	r3, [r3, #8]
 800206a:	f003 020c 	and.w	r2, r3, #12
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	009b      	lsls	r3, r3, #2
 8002074:	429a      	cmp	r2, r3
 8002076:	d1eb      	bne.n	8002050 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002078:	4b25      	ldr	r3, [pc, #148]	; (8002110 <HAL_RCC_ClockConfig+0x1b8>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f003 0307 	and.w	r3, r3, #7
 8002080:	683a      	ldr	r2, [r7, #0]
 8002082:	429a      	cmp	r2, r3
 8002084:	d20c      	bcs.n	80020a0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002086:	4b22      	ldr	r3, [pc, #136]	; (8002110 <HAL_RCC_ClockConfig+0x1b8>)
 8002088:	683a      	ldr	r2, [r7, #0]
 800208a:	b2d2      	uxtb	r2, r2
 800208c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800208e:	4b20      	ldr	r3, [pc, #128]	; (8002110 <HAL_RCC_ClockConfig+0x1b8>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f003 0307 	and.w	r3, r3, #7
 8002096:	683a      	ldr	r2, [r7, #0]
 8002098:	429a      	cmp	r2, r3
 800209a:	d001      	beq.n	80020a0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800209c:	2301      	movs	r3, #1
 800209e:	e032      	b.n	8002106 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f003 0304 	and.w	r3, r3, #4
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d008      	beq.n	80020be <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020ac:	4b19      	ldr	r3, [pc, #100]	; (8002114 <HAL_RCC_ClockConfig+0x1bc>)
 80020ae:	689b      	ldr	r3, [r3, #8]
 80020b0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	68db      	ldr	r3, [r3, #12]
 80020b8:	4916      	ldr	r1, [pc, #88]	; (8002114 <HAL_RCC_ClockConfig+0x1bc>)
 80020ba:	4313      	orrs	r3, r2
 80020bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f003 0308 	and.w	r3, r3, #8
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d009      	beq.n	80020de <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80020ca:	4b12      	ldr	r3, [pc, #72]	; (8002114 <HAL_RCC_ClockConfig+0x1bc>)
 80020cc:	689b      	ldr	r3, [r3, #8]
 80020ce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	691b      	ldr	r3, [r3, #16]
 80020d6:	00db      	lsls	r3, r3, #3
 80020d8:	490e      	ldr	r1, [pc, #56]	; (8002114 <HAL_RCC_ClockConfig+0x1bc>)
 80020da:	4313      	orrs	r3, r2
 80020dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80020de:	f000 f821 	bl	8002124 <HAL_RCC_GetSysClockFreq>
 80020e2:	4602      	mov	r2, r0
 80020e4:	4b0b      	ldr	r3, [pc, #44]	; (8002114 <HAL_RCC_ClockConfig+0x1bc>)
 80020e6:	689b      	ldr	r3, [r3, #8]
 80020e8:	091b      	lsrs	r3, r3, #4
 80020ea:	f003 030f 	and.w	r3, r3, #15
 80020ee:	490a      	ldr	r1, [pc, #40]	; (8002118 <HAL_RCC_ClockConfig+0x1c0>)
 80020f0:	5ccb      	ldrb	r3, [r1, r3]
 80020f2:	fa22 f303 	lsr.w	r3, r2, r3
 80020f6:	4a09      	ldr	r2, [pc, #36]	; (800211c <HAL_RCC_ClockConfig+0x1c4>)
 80020f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80020fa:	4b09      	ldr	r3, [pc, #36]	; (8002120 <HAL_RCC_ClockConfig+0x1c8>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4618      	mov	r0, r3
 8002100:	f7ff f9b2 	bl	8001468 <HAL_InitTick>

  return HAL_OK;
 8002104:	2300      	movs	r3, #0
}
 8002106:	4618      	mov	r0, r3
 8002108:	3710      	adds	r7, #16
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}
 800210e:	bf00      	nop
 8002110:	40023c00 	.word	0x40023c00
 8002114:	40023800 	.word	0x40023800
 8002118:	0800442c 	.word	0x0800442c
 800211c:	20000004 	.word	0x20000004
 8002120:	20000008 	.word	0x20000008

08002124 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002124:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002128:	b094      	sub	sp, #80	; 0x50
 800212a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800212c:	2300      	movs	r3, #0
 800212e:	647b      	str	r3, [r7, #68]	; 0x44
 8002130:	2300      	movs	r3, #0
 8002132:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002134:	2300      	movs	r3, #0
 8002136:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002138:	2300      	movs	r3, #0
 800213a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800213c:	4b79      	ldr	r3, [pc, #484]	; (8002324 <HAL_RCC_GetSysClockFreq+0x200>)
 800213e:	689b      	ldr	r3, [r3, #8]
 8002140:	f003 030c 	and.w	r3, r3, #12
 8002144:	2b08      	cmp	r3, #8
 8002146:	d00d      	beq.n	8002164 <HAL_RCC_GetSysClockFreq+0x40>
 8002148:	2b08      	cmp	r3, #8
 800214a:	f200 80e1 	bhi.w	8002310 <HAL_RCC_GetSysClockFreq+0x1ec>
 800214e:	2b00      	cmp	r3, #0
 8002150:	d002      	beq.n	8002158 <HAL_RCC_GetSysClockFreq+0x34>
 8002152:	2b04      	cmp	r3, #4
 8002154:	d003      	beq.n	800215e <HAL_RCC_GetSysClockFreq+0x3a>
 8002156:	e0db      	b.n	8002310 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002158:	4b73      	ldr	r3, [pc, #460]	; (8002328 <HAL_RCC_GetSysClockFreq+0x204>)
 800215a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800215c:	e0db      	b.n	8002316 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800215e:	4b73      	ldr	r3, [pc, #460]	; (800232c <HAL_RCC_GetSysClockFreq+0x208>)
 8002160:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002162:	e0d8      	b.n	8002316 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002164:	4b6f      	ldr	r3, [pc, #444]	; (8002324 <HAL_RCC_GetSysClockFreq+0x200>)
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800216c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800216e:	4b6d      	ldr	r3, [pc, #436]	; (8002324 <HAL_RCC_GetSysClockFreq+0x200>)
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002176:	2b00      	cmp	r3, #0
 8002178:	d063      	beq.n	8002242 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800217a:	4b6a      	ldr	r3, [pc, #424]	; (8002324 <HAL_RCC_GetSysClockFreq+0x200>)
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	099b      	lsrs	r3, r3, #6
 8002180:	2200      	movs	r2, #0
 8002182:	63bb      	str	r3, [r7, #56]	; 0x38
 8002184:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002186:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002188:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800218c:	633b      	str	r3, [r7, #48]	; 0x30
 800218e:	2300      	movs	r3, #0
 8002190:	637b      	str	r3, [r7, #52]	; 0x34
 8002192:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002196:	4622      	mov	r2, r4
 8002198:	462b      	mov	r3, r5
 800219a:	f04f 0000 	mov.w	r0, #0
 800219e:	f04f 0100 	mov.w	r1, #0
 80021a2:	0159      	lsls	r1, r3, #5
 80021a4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80021a8:	0150      	lsls	r0, r2, #5
 80021aa:	4602      	mov	r2, r0
 80021ac:	460b      	mov	r3, r1
 80021ae:	4621      	mov	r1, r4
 80021b0:	1a51      	subs	r1, r2, r1
 80021b2:	6139      	str	r1, [r7, #16]
 80021b4:	4629      	mov	r1, r5
 80021b6:	eb63 0301 	sbc.w	r3, r3, r1
 80021ba:	617b      	str	r3, [r7, #20]
 80021bc:	f04f 0200 	mov.w	r2, #0
 80021c0:	f04f 0300 	mov.w	r3, #0
 80021c4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80021c8:	4659      	mov	r1, fp
 80021ca:	018b      	lsls	r3, r1, #6
 80021cc:	4651      	mov	r1, sl
 80021ce:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80021d2:	4651      	mov	r1, sl
 80021d4:	018a      	lsls	r2, r1, #6
 80021d6:	4651      	mov	r1, sl
 80021d8:	ebb2 0801 	subs.w	r8, r2, r1
 80021dc:	4659      	mov	r1, fp
 80021de:	eb63 0901 	sbc.w	r9, r3, r1
 80021e2:	f04f 0200 	mov.w	r2, #0
 80021e6:	f04f 0300 	mov.w	r3, #0
 80021ea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80021ee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80021f2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80021f6:	4690      	mov	r8, r2
 80021f8:	4699      	mov	r9, r3
 80021fa:	4623      	mov	r3, r4
 80021fc:	eb18 0303 	adds.w	r3, r8, r3
 8002200:	60bb      	str	r3, [r7, #8]
 8002202:	462b      	mov	r3, r5
 8002204:	eb49 0303 	adc.w	r3, r9, r3
 8002208:	60fb      	str	r3, [r7, #12]
 800220a:	f04f 0200 	mov.w	r2, #0
 800220e:	f04f 0300 	mov.w	r3, #0
 8002212:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002216:	4629      	mov	r1, r5
 8002218:	024b      	lsls	r3, r1, #9
 800221a:	4621      	mov	r1, r4
 800221c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002220:	4621      	mov	r1, r4
 8002222:	024a      	lsls	r2, r1, #9
 8002224:	4610      	mov	r0, r2
 8002226:	4619      	mov	r1, r3
 8002228:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800222a:	2200      	movs	r2, #0
 800222c:	62bb      	str	r3, [r7, #40]	; 0x28
 800222e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002230:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002234:	f7fe fb06 	bl	8000844 <__aeabi_uldivmod>
 8002238:	4602      	mov	r2, r0
 800223a:	460b      	mov	r3, r1
 800223c:	4613      	mov	r3, r2
 800223e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002240:	e058      	b.n	80022f4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002242:	4b38      	ldr	r3, [pc, #224]	; (8002324 <HAL_RCC_GetSysClockFreq+0x200>)
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	099b      	lsrs	r3, r3, #6
 8002248:	2200      	movs	r2, #0
 800224a:	4618      	mov	r0, r3
 800224c:	4611      	mov	r1, r2
 800224e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002252:	623b      	str	r3, [r7, #32]
 8002254:	2300      	movs	r3, #0
 8002256:	627b      	str	r3, [r7, #36]	; 0x24
 8002258:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800225c:	4642      	mov	r2, r8
 800225e:	464b      	mov	r3, r9
 8002260:	f04f 0000 	mov.w	r0, #0
 8002264:	f04f 0100 	mov.w	r1, #0
 8002268:	0159      	lsls	r1, r3, #5
 800226a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800226e:	0150      	lsls	r0, r2, #5
 8002270:	4602      	mov	r2, r0
 8002272:	460b      	mov	r3, r1
 8002274:	4641      	mov	r1, r8
 8002276:	ebb2 0a01 	subs.w	sl, r2, r1
 800227a:	4649      	mov	r1, r9
 800227c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002280:	f04f 0200 	mov.w	r2, #0
 8002284:	f04f 0300 	mov.w	r3, #0
 8002288:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800228c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002290:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002294:	ebb2 040a 	subs.w	r4, r2, sl
 8002298:	eb63 050b 	sbc.w	r5, r3, fp
 800229c:	f04f 0200 	mov.w	r2, #0
 80022a0:	f04f 0300 	mov.w	r3, #0
 80022a4:	00eb      	lsls	r3, r5, #3
 80022a6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80022aa:	00e2      	lsls	r2, r4, #3
 80022ac:	4614      	mov	r4, r2
 80022ae:	461d      	mov	r5, r3
 80022b0:	4643      	mov	r3, r8
 80022b2:	18e3      	adds	r3, r4, r3
 80022b4:	603b      	str	r3, [r7, #0]
 80022b6:	464b      	mov	r3, r9
 80022b8:	eb45 0303 	adc.w	r3, r5, r3
 80022bc:	607b      	str	r3, [r7, #4]
 80022be:	f04f 0200 	mov.w	r2, #0
 80022c2:	f04f 0300 	mov.w	r3, #0
 80022c6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80022ca:	4629      	mov	r1, r5
 80022cc:	028b      	lsls	r3, r1, #10
 80022ce:	4621      	mov	r1, r4
 80022d0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80022d4:	4621      	mov	r1, r4
 80022d6:	028a      	lsls	r2, r1, #10
 80022d8:	4610      	mov	r0, r2
 80022da:	4619      	mov	r1, r3
 80022dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80022de:	2200      	movs	r2, #0
 80022e0:	61bb      	str	r3, [r7, #24]
 80022e2:	61fa      	str	r2, [r7, #28]
 80022e4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80022e8:	f7fe faac 	bl	8000844 <__aeabi_uldivmod>
 80022ec:	4602      	mov	r2, r0
 80022ee:	460b      	mov	r3, r1
 80022f0:	4613      	mov	r3, r2
 80022f2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80022f4:	4b0b      	ldr	r3, [pc, #44]	; (8002324 <HAL_RCC_GetSysClockFreq+0x200>)
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	0c1b      	lsrs	r3, r3, #16
 80022fa:	f003 0303 	and.w	r3, r3, #3
 80022fe:	3301      	adds	r3, #1
 8002300:	005b      	lsls	r3, r3, #1
 8002302:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002304:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002306:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002308:	fbb2 f3f3 	udiv	r3, r2, r3
 800230c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800230e:	e002      	b.n	8002316 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002310:	4b05      	ldr	r3, [pc, #20]	; (8002328 <HAL_RCC_GetSysClockFreq+0x204>)
 8002312:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002314:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002316:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002318:	4618      	mov	r0, r3
 800231a:	3750      	adds	r7, #80	; 0x50
 800231c:	46bd      	mov	sp, r7
 800231e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002322:	bf00      	nop
 8002324:	40023800 	.word	0x40023800
 8002328:	00f42400 	.word	0x00f42400
 800232c:	007a1200 	.word	0x007a1200

08002330 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002330:	b480      	push	{r7}
 8002332:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002334:	4b03      	ldr	r3, [pc, #12]	; (8002344 <HAL_RCC_GetHCLKFreq+0x14>)
 8002336:	681b      	ldr	r3, [r3, #0]
}
 8002338:	4618      	mov	r0, r3
 800233a:	46bd      	mov	sp, r7
 800233c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002340:	4770      	bx	lr
 8002342:	bf00      	nop
 8002344:	20000004 	.word	0x20000004

08002348 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800234c:	f7ff fff0 	bl	8002330 <HAL_RCC_GetHCLKFreq>
 8002350:	4602      	mov	r2, r0
 8002352:	4b05      	ldr	r3, [pc, #20]	; (8002368 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002354:	689b      	ldr	r3, [r3, #8]
 8002356:	0a9b      	lsrs	r3, r3, #10
 8002358:	f003 0307 	and.w	r3, r3, #7
 800235c:	4903      	ldr	r1, [pc, #12]	; (800236c <HAL_RCC_GetPCLK1Freq+0x24>)
 800235e:	5ccb      	ldrb	r3, [r1, r3]
 8002360:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002364:	4618      	mov	r0, r3
 8002366:	bd80      	pop	{r7, pc}
 8002368:	40023800 	.word	0x40023800
 800236c:	0800443c 	.word	0x0800443c

08002370 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002374:	f7ff ffdc 	bl	8002330 <HAL_RCC_GetHCLKFreq>
 8002378:	4602      	mov	r2, r0
 800237a:	4b05      	ldr	r3, [pc, #20]	; (8002390 <HAL_RCC_GetPCLK2Freq+0x20>)
 800237c:	689b      	ldr	r3, [r3, #8]
 800237e:	0b5b      	lsrs	r3, r3, #13
 8002380:	f003 0307 	and.w	r3, r3, #7
 8002384:	4903      	ldr	r1, [pc, #12]	; (8002394 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002386:	5ccb      	ldrb	r3, [r1, r3]
 8002388:	fa22 f303 	lsr.w	r3, r2, r3
}
 800238c:	4618      	mov	r0, r3
 800238e:	bd80      	pop	{r7, pc}
 8002390:	40023800 	.word	0x40023800
 8002394:	0800443c 	.word	0x0800443c

08002398 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b082      	sub	sp, #8
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d101      	bne.n	80023aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80023a6:	2301      	movs	r3, #1
 80023a8:	e041      	b.n	800242e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023b0:	b2db      	uxtb	r3, r3
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d106      	bne.n	80023c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2200      	movs	r2, #0
 80023ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80023be:	6878      	ldr	r0, [r7, #4]
 80023c0:	f7fe ff16 	bl	80011f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2202      	movs	r2, #2
 80023c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681a      	ldr	r2, [r3, #0]
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	3304      	adds	r3, #4
 80023d4:	4619      	mov	r1, r3
 80023d6:	4610      	mov	r0, r2
 80023d8:	f000 fc54 	bl	8002c84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2201      	movs	r2, #1
 80023e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2201      	movs	r2, #1
 80023e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2201      	movs	r2, #1
 80023f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2201      	movs	r2, #1
 80023f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2201      	movs	r2, #1
 8002400:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2201      	movs	r2, #1
 8002408:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2201      	movs	r2, #1
 8002410:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2201      	movs	r2, #1
 8002418:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2201      	movs	r2, #1
 8002420:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2201      	movs	r2, #1
 8002428:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800242c:	2300      	movs	r3, #0
}
 800242e:	4618      	mov	r0, r3
 8002430:	3708      	adds	r7, #8
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}
	...

08002438 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002438:	b480      	push	{r7}
 800243a:	b085      	sub	sp, #20
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002446:	b2db      	uxtb	r3, r3
 8002448:	2b01      	cmp	r3, #1
 800244a:	d001      	beq.n	8002450 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800244c:	2301      	movs	r3, #1
 800244e:	e044      	b.n	80024da <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2202      	movs	r2, #2
 8002454:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	68da      	ldr	r2, [r3, #12]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f042 0201 	orr.w	r2, r2, #1
 8002466:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a1e      	ldr	r2, [pc, #120]	; (80024e8 <HAL_TIM_Base_Start_IT+0xb0>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d018      	beq.n	80024a4 <HAL_TIM_Base_Start_IT+0x6c>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800247a:	d013      	beq.n	80024a4 <HAL_TIM_Base_Start_IT+0x6c>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a1a      	ldr	r2, [pc, #104]	; (80024ec <HAL_TIM_Base_Start_IT+0xb4>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d00e      	beq.n	80024a4 <HAL_TIM_Base_Start_IT+0x6c>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a19      	ldr	r2, [pc, #100]	; (80024f0 <HAL_TIM_Base_Start_IT+0xb8>)
 800248c:	4293      	cmp	r3, r2
 800248e:	d009      	beq.n	80024a4 <HAL_TIM_Base_Start_IT+0x6c>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a17      	ldr	r2, [pc, #92]	; (80024f4 <HAL_TIM_Base_Start_IT+0xbc>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d004      	beq.n	80024a4 <HAL_TIM_Base_Start_IT+0x6c>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4a16      	ldr	r2, [pc, #88]	; (80024f8 <HAL_TIM_Base_Start_IT+0xc0>)
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d111      	bne.n	80024c8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	689b      	ldr	r3, [r3, #8]
 80024aa:	f003 0307 	and.w	r3, r3, #7
 80024ae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	2b06      	cmp	r3, #6
 80024b4:	d010      	beq.n	80024d8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	681a      	ldr	r2, [r3, #0]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f042 0201 	orr.w	r2, r2, #1
 80024c4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024c6:	e007      	b.n	80024d8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	681a      	ldr	r2, [r3, #0]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f042 0201 	orr.w	r2, r2, #1
 80024d6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80024d8:	2300      	movs	r3, #0
}
 80024da:	4618      	mov	r0, r3
 80024dc:	3714      	adds	r7, #20
 80024de:	46bd      	mov	sp, r7
 80024e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e4:	4770      	bx	lr
 80024e6:	bf00      	nop
 80024e8:	40010000 	.word	0x40010000
 80024ec:	40000400 	.word	0x40000400
 80024f0:	40000800 	.word	0x40000800
 80024f4:	40000c00 	.word	0x40000c00
 80024f8:	40014000 	.word	0x40014000

080024fc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b082      	sub	sp, #8
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d101      	bne.n	800250e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800250a:	2301      	movs	r3, #1
 800250c:	e041      	b.n	8002592 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002514:	b2db      	uxtb	r3, r3
 8002516:	2b00      	cmp	r3, #0
 8002518:	d106      	bne.n	8002528 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2200      	movs	r2, #0
 800251e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002522:	6878      	ldr	r0, [r7, #4]
 8002524:	f000 f839 	bl	800259a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2202      	movs	r2, #2
 800252c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681a      	ldr	r2, [r3, #0]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	3304      	adds	r3, #4
 8002538:	4619      	mov	r1, r3
 800253a:	4610      	mov	r0, r2
 800253c:	f000 fba2 	bl	8002c84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2201      	movs	r2, #1
 8002544:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2201      	movs	r2, #1
 800254c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2201      	movs	r2, #1
 8002554:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2201      	movs	r2, #1
 800255c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2201      	movs	r2, #1
 8002564:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2201      	movs	r2, #1
 800256c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2201      	movs	r2, #1
 8002574:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2201      	movs	r2, #1
 800257c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2201      	movs	r2, #1
 8002584:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2201      	movs	r2, #1
 800258c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002590:	2300      	movs	r3, #0
}
 8002592:	4618      	mov	r0, r3
 8002594:	3708      	adds	r7, #8
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}

0800259a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800259a:	b480      	push	{r7}
 800259c:	b083      	sub	sp, #12
 800259e:	af00      	add	r7, sp, #0
 80025a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80025a2:	bf00      	nop
 80025a4:	370c      	adds	r7, #12
 80025a6:	46bd      	mov	sp, r7
 80025a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ac:	4770      	bx	lr
	...

080025b0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b084      	sub	sp, #16
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
 80025b8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d109      	bne.n	80025d4 <HAL_TIM_PWM_Start+0x24>
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80025c6:	b2db      	uxtb	r3, r3
 80025c8:	2b01      	cmp	r3, #1
 80025ca:	bf14      	ite	ne
 80025cc:	2301      	movne	r3, #1
 80025ce:	2300      	moveq	r3, #0
 80025d0:	b2db      	uxtb	r3, r3
 80025d2:	e022      	b.n	800261a <HAL_TIM_PWM_Start+0x6a>
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	2b04      	cmp	r3, #4
 80025d8:	d109      	bne.n	80025ee <HAL_TIM_PWM_Start+0x3e>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80025e0:	b2db      	uxtb	r3, r3
 80025e2:	2b01      	cmp	r3, #1
 80025e4:	bf14      	ite	ne
 80025e6:	2301      	movne	r3, #1
 80025e8:	2300      	moveq	r3, #0
 80025ea:	b2db      	uxtb	r3, r3
 80025ec:	e015      	b.n	800261a <HAL_TIM_PWM_Start+0x6a>
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	2b08      	cmp	r3, #8
 80025f2:	d109      	bne.n	8002608 <HAL_TIM_PWM_Start+0x58>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80025fa:	b2db      	uxtb	r3, r3
 80025fc:	2b01      	cmp	r3, #1
 80025fe:	bf14      	ite	ne
 8002600:	2301      	movne	r3, #1
 8002602:	2300      	moveq	r3, #0
 8002604:	b2db      	uxtb	r3, r3
 8002606:	e008      	b.n	800261a <HAL_TIM_PWM_Start+0x6a>
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800260e:	b2db      	uxtb	r3, r3
 8002610:	2b01      	cmp	r3, #1
 8002612:	bf14      	ite	ne
 8002614:	2301      	movne	r3, #1
 8002616:	2300      	moveq	r3, #0
 8002618:	b2db      	uxtb	r3, r3
 800261a:	2b00      	cmp	r3, #0
 800261c:	d001      	beq.n	8002622 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800261e:	2301      	movs	r3, #1
 8002620:	e068      	b.n	80026f4 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d104      	bne.n	8002632 <HAL_TIM_PWM_Start+0x82>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2202      	movs	r2, #2
 800262c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002630:	e013      	b.n	800265a <HAL_TIM_PWM_Start+0xaa>
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	2b04      	cmp	r3, #4
 8002636:	d104      	bne.n	8002642 <HAL_TIM_PWM_Start+0x92>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2202      	movs	r2, #2
 800263c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002640:	e00b      	b.n	800265a <HAL_TIM_PWM_Start+0xaa>
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	2b08      	cmp	r3, #8
 8002646:	d104      	bne.n	8002652 <HAL_TIM_PWM_Start+0xa2>
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2202      	movs	r2, #2
 800264c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002650:	e003      	b.n	800265a <HAL_TIM_PWM_Start+0xaa>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2202      	movs	r2, #2
 8002656:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	2201      	movs	r2, #1
 8002660:	6839      	ldr	r1, [r7, #0]
 8002662:	4618      	mov	r0, r3
 8002664:	f000 fdb4 	bl	80031d0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a23      	ldr	r2, [pc, #140]	; (80026fc <HAL_TIM_PWM_Start+0x14c>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d107      	bne.n	8002682 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002680:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4a1d      	ldr	r2, [pc, #116]	; (80026fc <HAL_TIM_PWM_Start+0x14c>)
 8002688:	4293      	cmp	r3, r2
 800268a:	d018      	beq.n	80026be <HAL_TIM_PWM_Start+0x10e>
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002694:	d013      	beq.n	80026be <HAL_TIM_PWM_Start+0x10e>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4a19      	ldr	r2, [pc, #100]	; (8002700 <HAL_TIM_PWM_Start+0x150>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d00e      	beq.n	80026be <HAL_TIM_PWM_Start+0x10e>
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a17      	ldr	r2, [pc, #92]	; (8002704 <HAL_TIM_PWM_Start+0x154>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d009      	beq.n	80026be <HAL_TIM_PWM_Start+0x10e>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4a16      	ldr	r2, [pc, #88]	; (8002708 <HAL_TIM_PWM_Start+0x158>)
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d004      	beq.n	80026be <HAL_TIM_PWM_Start+0x10e>
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a14      	ldr	r2, [pc, #80]	; (800270c <HAL_TIM_PWM_Start+0x15c>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d111      	bne.n	80026e2 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	689b      	ldr	r3, [r3, #8]
 80026c4:	f003 0307 	and.w	r3, r3, #7
 80026c8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	2b06      	cmp	r3, #6
 80026ce:	d010      	beq.n	80026f2 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	681a      	ldr	r2, [r3, #0]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f042 0201 	orr.w	r2, r2, #1
 80026de:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026e0:	e007      	b.n	80026f2 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	681a      	ldr	r2, [r3, #0]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f042 0201 	orr.w	r2, r2, #1
 80026f0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80026f2:	2300      	movs	r3, #0
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	3710      	adds	r7, #16
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bd80      	pop	{r7, pc}
 80026fc:	40010000 	.word	0x40010000
 8002700:	40000400 	.word	0x40000400
 8002704:	40000800 	.word	0x40000800
 8002708:	40000c00 	.word	0x40000c00
 800270c:	40014000 	.word	0x40014000

08002710 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b082      	sub	sp, #8
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	691b      	ldr	r3, [r3, #16]
 800271e:	f003 0302 	and.w	r3, r3, #2
 8002722:	2b02      	cmp	r3, #2
 8002724:	d122      	bne.n	800276c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	68db      	ldr	r3, [r3, #12]
 800272c:	f003 0302 	and.w	r3, r3, #2
 8002730:	2b02      	cmp	r3, #2
 8002732:	d11b      	bne.n	800276c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f06f 0202 	mvn.w	r2, #2
 800273c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2201      	movs	r2, #1
 8002742:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	699b      	ldr	r3, [r3, #24]
 800274a:	f003 0303 	and.w	r3, r3, #3
 800274e:	2b00      	cmp	r3, #0
 8002750:	d003      	beq.n	800275a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002752:	6878      	ldr	r0, [r7, #4]
 8002754:	f000 fa77 	bl	8002c46 <HAL_TIM_IC_CaptureCallback>
 8002758:	e005      	b.n	8002766 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800275a:	6878      	ldr	r0, [r7, #4]
 800275c:	f000 fa69 	bl	8002c32 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002760:	6878      	ldr	r0, [r7, #4]
 8002762:	f000 fa7a 	bl	8002c5a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2200      	movs	r2, #0
 800276a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	691b      	ldr	r3, [r3, #16]
 8002772:	f003 0304 	and.w	r3, r3, #4
 8002776:	2b04      	cmp	r3, #4
 8002778:	d122      	bne.n	80027c0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	68db      	ldr	r3, [r3, #12]
 8002780:	f003 0304 	and.w	r3, r3, #4
 8002784:	2b04      	cmp	r3, #4
 8002786:	d11b      	bne.n	80027c0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f06f 0204 	mvn.w	r2, #4
 8002790:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2202      	movs	r2, #2
 8002796:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	699b      	ldr	r3, [r3, #24]
 800279e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d003      	beq.n	80027ae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027a6:	6878      	ldr	r0, [r7, #4]
 80027a8:	f000 fa4d 	bl	8002c46 <HAL_TIM_IC_CaptureCallback>
 80027ac:	e005      	b.n	80027ba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027ae:	6878      	ldr	r0, [r7, #4]
 80027b0:	f000 fa3f 	bl	8002c32 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027b4:	6878      	ldr	r0, [r7, #4]
 80027b6:	f000 fa50 	bl	8002c5a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2200      	movs	r2, #0
 80027be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	691b      	ldr	r3, [r3, #16]
 80027c6:	f003 0308 	and.w	r3, r3, #8
 80027ca:	2b08      	cmp	r3, #8
 80027cc:	d122      	bne.n	8002814 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	68db      	ldr	r3, [r3, #12]
 80027d4:	f003 0308 	and.w	r3, r3, #8
 80027d8:	2b08      	cmp	r3, #8
 80027da:	d11b      	bne.n	8002814 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f06f 0208 	mvn.w	r2, #8
 80027e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2204      	movs	r2, #4
 80027ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	69db      	ldr	r3, [r3, #28]
 80027f2:	f003 0303 	and.w	r3, r3, #3
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d003      	beq.n	8002802 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027fa:	6878      	ldr	r0, [r7, #4]
 80027fc:	f000 fa23 	bl	8002c46 <HAL_TIM_IC_CaptureCallback>
 8002800:	e005      	b.n	800280e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002802:	6878      	ldr	r0, [r7, #4]
 8002804:	f000 fa15 	bl	8002c32 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002808:	6878      	ldr	r0, [r7, #4]
 800280a:	f000 fa26 	bl	8002c5a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2200      	movs	r2, #0
 8002812:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	691b      	ldr	r3, [r3, #16]
 800281a:	f003 0310 	and.w	r3, r3, #16
 800281e:	2b10      	cmp	r3, #16
 8002820:	d122      	bne.n	8002868 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	68db      	ldr	r3, [r3, #12]
 8002828:	f003 0310 	and.w	r3, r3, #16
 800282c:	2b10      	cmp	r3, #16
 800282e:	d11b      	bne.n	8002868 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f06f 0210 	mvn.w	r2, #16
 8002838:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2208      	movs	r2, #8
 800283e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	69db      	ldr	r3, [r3, #28]
 8002846:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800284a:	2b00      	cmp	r3, #0
 800284c:	d003      	beq.n	8002856 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800284e:	6878      	ldr	r0, [r7, #4]
 8002850:	f000 f9f9 	bl	8002c46 <HAL_TIM_IC_CaptureCallback>
 8002854:	e005      	b.n	8002862 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002856:	6878      	ldr	r0, [r7, #4]
 8002858:	f000 f9eb 	bl	8002c32 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800285c:	6878      	ldr	r0, [r7, #4]
 800285e:	f000 f9fc 	bl	8002c5a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2200      	movs	r2, #0
 8002866:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	691b      	ldr	r3, [r3, #16]
 800286e:	f003 0301 	and.w	r3, r3, #1
 8002872:	2b01      	cmp	r3, #1
 8002874:	d10e      	bne.n	8002894 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	68db      	ldr	r3, [r3, #12]
 800287c:	f003 0301 	and.w	r3, r3, #1
 8002880:	2b01      	cmp	r3, #1
 8002882:	d107      	bne.n	8002894 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f06f 0201 	mvn.w	r2, #1
 800288c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800288e:	6878      	ldr	r0, [r7, #4]
 8002890:	f7fe f956 	bl	8000b40 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	691b      	ldr	r3, [r3, #16]
 800289a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800289e:	2b80      	cmp	r3, #128	; 0x80
 80028a0:	d10e      	bne.n	80028c0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	68db      	ldr	r3, [r3, #12]
 80028a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028ac:	2b80      	cmp	r3, #128	; 0x80
 80028ae:	d107      	bne.n	80028c0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80028b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80028ba:	6878      	ldr	r0, [r7, #4]
 80028bc:	f000 fd78 	bl	80033b0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	691b      	ldr	r3, [r3, #16]
 80028c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028ca:	2b40      	cmp	r3, #64	; 0x40
 80028cc:	d10e      	bne.n	80028ec <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	68db      	ldr	r3, [r3, #12]
 80028d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028d8:	2b40      	cmp	r3, #64	; 0x40
 80028da:	d107      	bne.n	80028ec <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80028e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80028e6:	6878      	ldr	r0, [r7, #4]
 80028e8:	f000 f9c1 	bl	8002c6e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	691b      	ldr	r3, [r3, #16]
 80028f2:	f003 0320 	and.w	r3, r3, #32
 80028f6:	2b20      	cmp	r3, #32
 80028f8:	d10e      	bne.n	8002918 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	68db      	ldr	r3, [r3, #12]
 8002900:	f003 0320 	and.w	r3, r3, #32
 8002904:	2b20      	cmp	r3, #32
 8002906:	d107      	bne.n	8002918 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f06f 0220 	mvn.w	r2, #32
 8002910:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002912:	6878      	ldr	r0, [r7, #4]
 8002914:	f000 fd42 	bl	800339c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002918:	bf00      	nop
 800291a:	3708      	adds	r7, #8
 800291c:	46bd      	mov	sp, r7
 800291e:	bd80      	pop	{r7, pc}

08002920 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b086      	sub	sp, #24
 8002924:	af00      	add	r7, sp, #0
 8002926:	60f8      	str	r0, [r7, #12]
 8002928:	60b9      	str	r1, [r7, #8]
 800292a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800292c:	2300      	movs	r3, #0
 800292e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002936:	2b01      	cmp	r3, #1
 8002938:	d101      	bne.n	800293e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800293a:	2302      	movs	r3, #2
 800293c:	e0ae      	b.n	8002a9c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	2201      	movs	r2, #1
 8002942:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2b0c      	cmp	r3, #12
 800294a:	f200 809f 	bhi.w	8002a8c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800294e:	a201      	add	r2, pc, #4	; (adr r2, 8002954 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002950:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002954:	08002989 	.word	0x08002989
 8002958:	08002a8d 	.word	0x08002a8d
 800295c:	08002a8d 	.word	0x08002a8d
 8002960:	08002a8d 	.word	0x08002a8d
 8002964:	080029c9 	.word	0x080029c9
 8002968:	08002a8d 	.word	0x08002a8d
 800296c:	08002a8d 	.word	0x08002a8d
 8002970:	08002a8d 	.word	0x08002a8d
 8002974:	08002a0b 	.word	0x08002a0b
 8002978:	08002a8d 	.word	0x08002a8d
 800297c:	08002a8d 	.word	0x08002a8d
 8002980:	08002a8d 	.word	0x08002a8d
 8002984:	08002a4b 	.word	0x08002a4b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	68b9      	ldr	r1, [r7, #8]
 800298e:	4618      	mov	r0, r3
 8002990:	f000 f9f8 	bl	8002d84 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	699a      	ldr	r2, [r3, #24]
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f042 0208 	orr.w	r2, r2, #8
 80029a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	699a      	ldr	r2, [r3, #24]
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f022 0204 	bic.w	r2, r2, #4
 80029b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	6999      	ldr	r1, [r3, #24]
 80029ba:	68bb      	ldr	r3, [r7, #8]
 80029bc:	691a      	ldr	r2, [r3, #16]
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	430a      	orrs	r2, r1
 80029c4:	619a      	str	r2, [r3, #24]
      break;
 80029c6:	e064      	b.n	8002a92 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	68b9      	ldr	r1, [r7, #8]
 80029ce:	4618      	mov	r0, r3
 80029d0:	f000 fa3e 	bl	8002e50 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	699a      	ldr	r2, [r3, #24]
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80029e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	699a      	ldr	r2, [r3, #24]
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	6999      	ldr	r1, [r3, #24]
 80029fa:	68bb      	ldr	r3, [r7, #8]
 80029fc:	691b      	ldr	r3, [r3, #16]
 80029fe:	021a      	lsls	r2, r3, #8
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	430a      	orrs	r2, r1
 8002a06:	619a      	str	r2, [r3, #24]
      break;
 8002a08:	e043      	b.n	8002a92 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	68b9      	ldr	r1, [r7, #8]
 8002a10:	4618      	mov	r0, r3
 8002a12:	f000 fa89 	bl	8002f28 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	69da      	ldr	r2, [r3, #28]
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f042 0208 	orr.w	r2, r2, #8
 8002a24:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	69da      	ldr	r2, [r3, #28]
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f022 0204 	bic.w	r2, r2, #4
 8002a34:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	69d9      	ldr	r1, [r3, #28]
 8002a3c:	68bb      	ldr	r3, [r7, #8]
 8002a3e:	691a      	ldr	r2, [r3, #16]
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	430a      	orrs	r2, r1
 8002a46:	61da      	str	r2, [r3, #28]
      break;
 8002a48:	e023      	b.n	8002a92 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	68b9      	ldr	r1, [r7, #8]
 8002a50:	4618      	mov	r0, r3
 8002a52:	f000 fad3 	bl	8002ffc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	69da      	ldr	r2, [r3, #28]
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a64:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	69da      	ldr	r2, [r3, #28]
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a74:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	69d9      	ldr	r1, [r3, #28]
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	691b      	ldr	r3, [r3, #16]
 8002a80:	021a      	lsls	r2, r3, #8
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	430a      	orrs	r2, r1
 8002a88:	61da      	str	r2, [r3, #28]
      break;
 8002a8a:	e002      	b.n	8002a92 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	75fb      	strb	r3, [r7, #23]
      break;
 8002a90:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	2200      	movs	r2, #0
 8002a96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002a9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	3718      	adds	r7, #24
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bd80      	pop	{r7, pc}

08002aa4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b084      	sub	sp, #16
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
 8002aac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ab8:	2b01      	cmp	r3, #1
 8002aba:	d101      	bne.n	8002ac0 <HAL_TIM_ConfigClockSource+0x1c>
 8002abc:	2302      	movs	r3, #2
 8002abe:	e0b4      	b.n	8002c2a <HAL_TIM_ConfigClockSource+0x186>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2201      	movs	r2, #1
 8002ac4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2202      	movs	r2, #2
 8002acc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	689b      	ldr	r3, [r3, #8]
 8002ad6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002ad8:	68bb      	ldr	r3, [r7, #8]
 8002ada:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002ade:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ae0:	68bb      	ldr	r3, [r7, #8]
 8002ae2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002ae6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	68ba      	ldr	r2, [r7, #8]
 8002aee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002af8:	d03e      	beq.n	8002b78 <HAL_TIM_ConfigClockSource+0xd4>
 8002afa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002afe:	f200 8087 	bhi.w	8002c10 <HAL_TIM_ConfigClockSource+0x16c>
 8002b02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b06:	f000 8086 	beq.w	8002c16 <HAL_TIM_ConfigClockSource+0x172>
 8002b0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b0e:	d87f      	bhi.n	8002c10 <HAL_TIM_ConfigClockSource+0x16c>
 8002b10:	2b70      	cmp	r3, #112	; 0x70
 8002b12:	d01a      	beq.n	8002b4a <HAL_TIM_ConfigClockSource+0xa6>
 8002b14:	2b70      	cmp	r3, #112	; 0x70
 8002b16:	d87b      	bhi.n	8002c10 <HAL_TIM_ConfigClockSource+0x16c>
 8002b18:	2b60      	cmp	r3, #96	; 0x60
 8002b1a:	d050      	beq.n	8002bbe <HAL_TIM_ConfigClockSource+0x11a>
 8002b1c:	2b60      	cmp	r3, #96	; 0x60
 8002b1e:	d877      	bhi.n	8002c10 <HAL_TIM_ConfigClockSource+0x16c>
 8002b20:	2b50      	cmp	r3, #80	; 0x50
 8002b22:	d03c      	beq.n	8002b9e <HAL_TIM_ConfigClockSource+0xfa>
 8002b24:	2b50      	cmp	r3, #80	; 0x50
 8002b26:	d873      	bhi.n	8002c10 <HAL_TIM_ConfigClockSource+0x16c>
 8002b28:	2b40      	cmp	r3, #64	; 0x40
 8002b2a:	d058      	beq.n	8002bde <HAL_TIM_ConfigClockSource+0x13a>
 8002b2c:	2b40      	cmp	r3, #64	; 0x40
 8002b2e:	d86f      	bhi.n	8002c10 <HAL_TIM_ConfigClockSource+0x16c>
 8002b30:	2b30      	cmp	r3, #48	; 0x30
 8002b32:	d064      	beq.n	8002bfe <HAL_TIM_ConfigClockSource+0x15a>
 8002b34:	2b30      	cmp	r3, #48	; 0x30
 8002b36:	d86b      	bhi.n	8002c10 <HAL_TIM_ConfigClockSource+0x16c>
 8002b38:	2b20      	cmp	r3, #32
 8002b3a:	d060      	beq.n	8002bfe <HAL_TIM_ConfigClockSource+0x15a>
 8002b3c:	2b20      	cmp	r3, #32
 8002b3e:	d867      	bhi.n	8002c10 <HAL_TIM_ConfigClockSource+0x16c>
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d05c      	beq.n	8002bfe <HAL_TIM_ConfigClockSource+0x15a>
 8002b44:	2b10      	cmp	r3, #16
 8002b46:	d05a      	beq.n	8002bfe <HAL_TIM_ConfigClockSource+0x15a>
 8002b48:	e062      	b.n	8002c10 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6818      	ldr	r0, [r3, #0]
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	6899      	ldr	r1, [r3, #8]
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	685a      	ldr	r2, [r3, #4]
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	68db      	ldr	r3, [r3, #12]
 8002b5a:	f000 fb19 	bl	8003190 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002b66:	68bb      	ldr	r3, [r7, #8]
 8002b68:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002b6c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	68ba      	ldr	r2, [r7, #8]
 8002b74:	609a      	str	r2, [r3, #8]
      break;
 8002b76:	e04f      	b.n	8002c18 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6818      	ldr	r0, [r3, #0]
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	6899      	ldr	r1, [r3, #8]
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	685a      	ldr	r2, [r3, #4]
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	68db      	ldr	r3, [r3, #12]
 8002b88:	f000 fb02 	bl	8003190 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	689a      	ldr	r2, [r3, #8]
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002b9a:	609a      	str	r2, [r3, #8]
      break;
 8002b9c:	e03c      	b.n	8002c18 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6818      	ldr	r0, [r3, #0]
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	6859      	ldr	r1, [r3, #4]
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	68db      	ldr	r3, [r3, #12]
 8002baa:	461a      	mov	r2, r3
 8002bac:	f000 fa76 	bl	800309c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	2150      	movs	r1, #80	; 0x50
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f000 facf 	bl	800315a <TIM_ITRx_SetConfig>
      break;
 8002bbc:	e02c      	b.n	8002c18 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6818      	ldr	r0, [r3, #0]
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	6859      	ldr	r1, [r3, #4]
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	68db      	ldr	r3, [r3, #12]
 8002bca:	461a      	mov	r2, r3
 8002bcc:	f000 fa95 	bl	80030fa <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	2160      	movs	r1, #96	; 0x60
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	f000 fabf 	bl	800315a <TIM_ITRx_SetConfig>
      break;
 8002bdc:	e01c      	b.n	8002c18 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6818      	ldr	r0, [r3, #0]
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	6859      	ldr	r1, [r3, #4]
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	68db      	ldr	r3, [r3, #12]
 8002bea:	461a      	mov	r2, r3
 8002bec:	f000 fa56 	bl	800309c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	2140      	movs	r1, #64	; 0x40
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f000 faaf 	bl	800315a <TIM_ITRx_SetConfig>
      break;
 8002bfc:	e00c      	b.n	8002c18 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681a      	ldr	r2, [r3, #0]
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4619      	mov	r1, r3
 8002c08:	4610      	mov	r0, r2
 8002c0a:	f000 faa6 	bl	800315a <TIM_ITRx_SetConfig>
      break;
 8002c0e:	e003      	b.n	8002c18 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002c10:	2301      	movs	r3, #1
 8002c12:	73fb      	strb	r3, [r7, #15]
      break;
 8002c14:	e000      	b.n	8002c18 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002c16:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2201      	movs	r2, #1
 8002c1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2200      	movs	r2, #0
 8002c24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002c28:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	3710      	adds	r7, #16
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}

08002c32 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c32:	b480      	push	{r7}
 8002c34:	b083      	sub	sp, #12
 8002c36:	af00      	add	r7, sp, #0
 8002c38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002c3a:	bf00      	nop
 8002c3c:	370c      	adds	r7, #12
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c44:	4770      	bx	lr

08002c46 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002c46:	b480      	push	{r7}
 8002c48:	b083      	sub	sp, #12
 8002c4a:	af00      	add	r7, sp, #0
 8002c4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002c4e:	bf00      	nop
 8002c50:	370c      	adds	r7, #12
 8002c52:	46bd      	mov	sp, r7
 8002c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c58:	4770      	bx	lr

08002c5a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002c5a:	b480      	push	{r7}
 8002c5c:	b083      	sub	sp, #12
 8002c5e:	af00      	add	r7, sp, #0
 8002c60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002c62:	bf00      	nop
 8002c64:	370c      	adds	r7, #12
 8002c66:	46bd      	mov	sp, r7
 8002c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6c:	4770      	bx	lr

08002c6e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002c6e:	b480      	push	{r7}
 8002c70:	b083      	sub	sp, #12
 8002c72:	af00      	add	r7, sp, #0
 8002c74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002c76:	bf00      	nop
 8002c78:	370c      	adds	r7, #12
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c80:	4770      	bx	lr
	...

08002c84 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002c84:	b480      	push	{r7}
 8002c86:	b085      	sub	sp, #20
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
 8002c8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	4a34      	ldr	r2, [pc, #208]	; (8002d68 <TIM_Base_SetConfig+0xe4>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d00f      	beq.n	8002cbc <TIM_Base_SetConfig+0x38>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ca2:	d00b      	beq.n	8002cbc <TIM_Base_SetConfig+0x38>
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	4a31      	ldr	r2, [pc, #196]	; (8002d6c <TIM_Base_SetConfig+0xe8>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d007      	beq.n	8002cbc <TIM_Base_SetConfig+0x38>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	4a30      	ldr	r2, [pc, #192]	; (8002d70 <TIM_Base_SetConfig+0xec>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d003      	beq.n	8002cbc <TIM_Base_SetConfig+0x38>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	4a2f      	ldr	r2, [pc, #188]	; (8002d74 <TIM_Base_SetConfig+0xf0>)
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d108      	bne.n	8002cce <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cc2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	68fa      	ldr	r2, [r7, #12]
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	4a25      	ldr	r2, [pc, #148]	; (8002d68 <TIM_Base_SetConfig+0xe4>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d01b      	beq.n	8002d0e <TIM_Base_SetConfig+0x8a>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cdc:	d017      	beq.n	8002d0e <TIM_Base_SetConfig+0x8a>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	4a22      	ldr	r2, [pc, #136]	; (8002d6c <TIM_Base_SetConfig+0xe8>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d013      	beq.n	8002d0e <TIM_Base_SetConfig+0x8a>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	4a21      	ldr	r2, [pc, #132]	; (8002d70 <TIM_Base_SetConfig+0xec>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d00f      	beq.n	8002d0e <TIM_Base_SetConfig+0x8a>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	4a20      	ldr	r2, [pc, #128]	; (8002d74 <TIM_Base_SetConfig+0xf0>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d00b      	beq.n	8002d0e <TIM_Base_SetConfig+0x8a>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	4a1f      	ldr	r2, [pc, #124]	; (8002d78 <TIM_Base_SetConfig+0xf4>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d007      	beq.n	8002d0e <TIM_Base_SetConfig+0x8a>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	4a1e      	ldr	r2, [pc, #120]	; (8002d7c <TIM_Base_SetConfig+0xf8>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d003      	beq.n	8002d0e <TIM_Base_SetConfig+0x8a>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	4a1d      	ldr	r2, [pc, #116]	; (8002d80 <TIM_Base_SetConfig+0xfc>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d108      	bne.n	8002d20 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d14:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	68db      	ldr	r3, [r3, #12]
 8002d1a:	68fa      	ldr	r2, [r7, #12]
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	695b      	ldr	r3, [r3, #20]
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	68fa      	ldr	r2, [r7, #12]
 8002d32:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	689a      	ldr	r2, [r3, #8]
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	681a      	ldr	r2, [r3, #0]
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	4a08      	ldr	r2, [pc, #32]	; (8002d68 <TIM_Base_SetConfig+0xe4>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d103      	bne.n	8002d54 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	691a      	ldr	r2, [r3, #16]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2201      	movs	r2, #1
 8002d58:	615a      	str	r2, [r3, #20]
}
 8002d5a:	bf00      	nop
 8002d5c:	3714      	adds	r7, #20
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d64:	4770      	bx	lr
 8002d66:	bf00      	nop
 8002d68:	40010000 	.word	0x40010000
 8002d6c:	40000400 	.word	0x40000400
 8002d70:	40000800 	.word	0x40000800
 8002d74:	40000c00 	.word	0x40000c00
 8002d78:	40014000 	.word	0x40014000
 8002d7c:	40014400 	.word	0x40014400
 8002d80:	40014800 	.word	0x40014800

08002d84 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002d84:	b480      	push	{r7}
 8002d86:	b087      	sub	sp, #28
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
 8002d8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6a1b      	ldr	r3, [r3, #32]
 8002d92:	f023 0201 	bic.w	r2, r3, #1
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6a1b      	ldr	r3, [r3, #32]
 8002d9e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	699b      	ldr	r3, [r3, #24]
 8002daa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002db2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	f023 0303 	bic.w	r3, r3, #3
 8002dba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	68fa      	ldr	r2, [r7, #12]
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002dc6:	697b      	ldr	r3, [r7, #20]
 8002dc8:	f023 0302 	bic.w	r3, r3, #2
 8002dcc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	689b      	ldr	r3, [r3, #8]
 8002dd2:	697a      	ldr	r2, [r7, #20]
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	4a1c      	ldr	r2, [pc, #112]	; (8002e4c <TIM_OC1_SetConfig+0xc8>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d10c      	bne.n	8002dfa <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002de0:	697b      	ldr	r3, [r7, #20]
 8002de2:	f023 0308 	bic.w	r3, r3, #8
 8002de6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	68db      	ldr	r3, [r3, #12]
 8002dec:	697a      	ldr	r2, [r7, #20]
 8002dee:	4313      	orrs	r3, r2
 8002df0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002df2:	697b      	ldr	r3, [r7, #20]
 8002df4:	f023 0304 	bic.w	r3, r3, #4
 8002df8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	4a13      	ldr	r2, [pc, #76]	; (8002e4c <TIM_OC1_SetConfig+0xc8>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d111      	bne.n	8002e26 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002e02:	693b      	ldr	r3, [r7, #16]
 8002e04:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002e08:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002e0a:	693b      	ldr	r3, [r7, #16]
 8002e0c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002e10:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	695b      	ldr	r3, [r3, #20]
 8002e16:	693a      	ldr	r2, [r7, #16]
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	699b      	ldr	r3, [r3, #24]
 8002e20:	693a      	ldr	r2, [r7, #16]
 8002e22:	4313      	orrs	r3, r2
 8002e24:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	693a      	ldr	r2, [r7, #16]
 8002e2a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	68fa      	ldr	r2, [r7, #12]
 8002e30:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	685a      	ldr	r2, [r3, #4]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	697a      	ldr	r2, [r7, #20]
 8002e3e:	621a      	str	r2, [r3, #32]
}
 8002e40:	bf00      	nop
 8002e42:	371c      	adds	r7, #28
 8002e44:	46bd      	mov	sp, r7
 8002e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4a:	4770      	bx	lr
 8002e4c:	40010000 	.word	0x40010000

08002e50 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002e50:	b480      	push	{r7}
 8002e52:	b087      	sub	sp, #28
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
 8002e58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6a1b      	ldr	r3, [r3, #32]
 8002e5e:	f023 0210 	bic.w	r2, r3, #16
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6a1b      	ldr	r3, [r3, #32]
 8002e6a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	699b      	ldr	r3, [r3, #24]
 8002e76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e86:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	021b      	lsls	r3, r3, #8
 8002e8e:	68fa      	ldr	r2, [r7, #12]
 8002e90:	4313      	orrs	r3, r2
 8002e92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002e94:	697b      	ldr	r3, [r7, #20]
 8002e96:	f023 0320 	bic.w	r3, r3, #32
 8002e9a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	689b      	ldr	r3, [r3, #8]
 8002ea0:	011b      	lsls	r3, r3, #4
 8002ea2:	697a      	ldr	r2, [r7, #20]
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	4a1e      	ldr	r2, [pc, #120]	; (8002f24 <TIM_OC2_SetConfig+0xd4>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d10d      	bne.n	8002ecc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002eb0:	697b      	ldr	r3, [r7, #20]
 8002eb2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002eb6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	68db      	ldr	r3, [r3, #12]
 8002ebc:	011b      	lsls	r3, r3, #4
 8002ebe:	697a      	ldr	r2, [r7, #20]
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002ec4:	697b      	ldr	r3, [r7, #20]
 8002ec6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002eca:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	4a15      	ldr	r2, [pc, #84]	; (8002f24 <TIM_OC2_SetConfig+0xd4>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d113      	bne.n	8002efc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002ed4:	693b      	ldr	r3, [r7, #16]
 8002ed6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002eda:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002edc:	693b      	ldr	r3, [r7, #16]
 8002ede:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002ee2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	695b      	ldr	r3, [r3, #20]
 8002ee8:	009b      	lsls	r3, r3, #2
 8002eea:	693a      	ldr	r2, [r7, #16]
 8002eec:	4313      	orrs	r3, r2
 8002eee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	699b      	ldr	r3, [r3, #24]
 8002ef4:	009b      	lsls	r3, r3, #2
 8002ef6:	693a      	ldr	r2, [r7, #16]
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	693a      	ldr	r2, [r7, #16]
 8002f00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	68fa      	ldr	r2, [r7, #12]
 8002f06:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	685a      	ldr	r2, [r3, #4]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	697a      	ldr	r2, [r7, #20]
 8002f14:	621a      	str	r2, [r3, #32]
}
 8002f16:	bf00      	nop
 8002f18:	371c      	adds	r7, #28
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f20:	4770      	bx	lr
 8002f22:	bf00      	nop
 8002f24:	40010000 	.word	0x40010000

08002f28 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b087      	sub	sp, #28
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
 8002f30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6a1b      	ldr	r3, [r3, #32]
 8002f36:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6a1b      	ldr	r3, [r3, #32]
 8002f42:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	69db      	ldr	r3, [r3, #28]
 8002f4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	f023 0303 	bic.w	r3, r3, #3
 8002f5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	68fa      	ldr	r2, [r7, #12]
 8002f66:	4313      	orrs	r3, r2
 8002f68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002f6a:	697b      	ldr	r3, [r7, #20]
 8002f6c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002f70:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	689b      	ldr	r3, [r3, #8]
 8002f76:	021b      	lsls	r3, r3, #8
 8002f78:	697a      	ldr	r2, [r7, #20]
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	4a1d      	ldr	r2, [pc, #116]	; (8002ff8 <TIM_OC3_SetConfig+0xd0>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d10d      	bne.n	8002fa2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002f86:	697b      	ldr	r3, [r7, #20]
 8002f88:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002f8c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	68db      	ldr	r3, [r3, #12]
 8002f92:	021b      	lsls	r3, r3, #8
 8002f94:	697a      	ldr	r2, [r7, #20]
 8002f96:	4313      	orrs	r3, r2
 8002f98:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002f9a:	697b      	ldr	r3, [r7, #20]
 8002f9c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002fa0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	4a14      	ldr	r2, [pc, #80]	; (8002ff8 <TIM_OC3_SetConfig+0xd0>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d113      	bne.n	8002fd2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002faa:	693b      	ldr	r3, [r7, #16]
 8002fac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002fb0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002fb2:	693b      	ldr	r3, [r7, #16]
 8002fb4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002fb8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	695b      	ldr	r3, [r3, #20]
 8002fbe:	011b      	lsls	r3, r3, #4
 8002fc0:	693a      	ldr	r2, [r7, #16]
 8002fc2:	4313      	orrs	r3, r2
 8002fc4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	699b      	ldr	r3, [r3, #24]
 8002fca:	011b      	lsls	r3, r3, #4
 8002fcc:	693a      	ldr	r2, [r7, #16]
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	693a      	ldr	r2, [r7, #16]
 8002fd6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	68fa      	ldr	r2, [r7, #12]
 8002fdc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	685a      	ldr	r2, [r3, #4]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	697a      	ldr	r2, [r7, #20]
 8002fea:	621a      	str	r2, [r3, #32]
}
 8002fec:	bf00      	nop
 8002fee:	371c      	adds	r7, #28
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff6:	4770      	bx	lr
 8002ff8:	40010000 	.word	0x40010000

08002ffc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	b087      	sub	sp, #28
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
 8003004:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6a1b      	ldr	r3, [r3, #32]
 800300a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6a1b      	ldr	r3, [r3, #32]
 8003016:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	69db      	ldr	r3, [r3, #28]
 8003022:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800302a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003032:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	021b      	lsls	r3, r3, #8
 800303a:	68fa      	ldr	r2, [r7, #12]
 800303c:	4313      	orrs	r3, r2
 800303e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003040:	693b      	ldr	r3, [r7, #16]
 8003042:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003046:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	689b      	ldr	r3, [r3, #8]
 800304c:	031b      	lsls	r3, r3, #12
 800304e:	693a      	ldr	r2, [r7, #16]
 8003050:	4313      	orrs	r3, r2
 8003052:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	4a10      	ldr	r2, [pc, #64]	; (8003098 <TIM_OC4_SetConfig+0x9c>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d109      	bne.n	8003070 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800305c:	697b      	ldr	r3, [r7, #20]
 800305e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003062:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	695b      	ldr	r3, [r3, #20]
 8003068:	019b      	lsls	r3, r3, #6
 800306a:	697a      	ldr	r2, [r7, #20]
 800306c:	4313      	orrs	r3, r2
 800306e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	697a      	ldr	r2, [r7, #20]
 8003074:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	68fa      	ldr	r2, [r7, #12]
 800307a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	685a      	ldr	r2, [r3, #4]
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	693a      	ldr	r2, [r7, #16]
 8003088:	621a      	str	r2, [r3, #32]
}
 800308a:	bf00      	nop
 800308c:	371c      	adds	r7, #28
 800308e:	46bd      	mov	sp, r7
 8003090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003094:	4770      	bx	lr
 8003096:	bf00      	nop
 8003098:	40010000 	.word	0x40010000

0800309c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800309c:	b480      	push	{r7}
 800309e:	b087      	sub	sp, #28
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	60f8      	str	r0, [r7, #12]
 80030a4:	60b9      	str	r1, [r7, #8]
 80030a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	6a1b      	ldr	r3, [r3, #32]
 80030ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	6a1b      	ldr	r3, [r3, #32]
 80030b2:	f023 0201 	bic.w	r2, r3, #1
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	699b      	ldr	r3, [r3, #24]
 80030be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80030c0:	693b      	ldr	r3, [r7, #16]
 80030c2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80030c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	011b      	lsls	r3, r3, #4
 80030cc:	693a      	ldr	r2, [r7, #16]
 80030ce:	4313      	orrs	r3, r2
 80030d0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80030d2:	697b      	ldr	r3, [r7, #20]
 80030d4:	f023 030a 	bic.w	r3, r3, #10
 80030d8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80030da:	697a      	ldr	r2, [r7, #20]
 80030dc:	68bb      	ldr	r3, [r7, #8]
 80030de:	4313      	orrs	r3, r2
 80030e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	693a      	ldr	r2, [r7, #16]
 80030e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	697a      	ldr	r2, [r7, #20]
 80030ec:	621a      	str	r2, [r3, #32]
}
 80030ee:	bf00      	nop
 80030f0:	371c      	adds	r7, #28
 80030f2:	46bd      	mov	sp, r7
 80030f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f8:	4770      	bx	lr

080030fa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80030fa:	b480      	push	{r7}
 80030fc:	b087      	sub	sp, #28
 80030fe:	af00      	add	r7, sp, #0
 8003100:	60f8      	str	r0, [r7, #12]
 8003102:	60b9      	str	r1, [r7, #8]
 8003104:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	6a1b      	ldr	r3, [r3, #32]
 800310a:	f023 0210 	bic.w	r2, r3, #16
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	699b      	ldr	r3, [r3, #24]
 8003116:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	6a1b      	ldr	r3, [r3, #32]
 800311c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003124:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	031b      	lsls	r3, r3, #12
 800312a:	697a      	ldr	r2, [r7, #20]
 800312c:	4313      	orrs	r3, r2
 800312e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003130:	693b      	ldr	r3, [r7, #16]
 8003132:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003136:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	011b      	lsls	r3, r3, #4
 800313c:	693a      	ldr	r2, [r7, #16]
 800313e:	4313      	orrs	r3, r2
 8003140:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	697a      	ldr	r2, [r7, #20]
 8003146:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	693a      	ldr	r2, [r7, #16]
 800314c:	621a      	str	r2, [r3, #32]
}
 800314e:	bf00      	nop
 8003150:	371c      	adds	r7, #28
 8003152:	46bd      	mov	sp, r7
 8003154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003158:	4770      	bx	lr

0800315a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800315a:	b480      	push	{r7}
 800315c:	b085      	sub	sp, #20
 800315e:	af00      	add	r7, sp, #0
 8003160:	6078      	str	r0, [r7, #4]
 8003162:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	689b      	ldr	r3, [r3, #8]
 8003168:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003170:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003172:	683a      	ldr	r2, [r7, #0]
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	4313      	orrs	r3, r2
 8003178:	f043 0307 	orr.w	r3, r3, #7
 800317c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	68fa      	ldr	r2, [r7, #12]
 8003182:	609a      	str	r2, [r3, #8]
}
 8003184:	bf00      	nop
 8003186:	3714      	adds	r7, #20
 8003188:	46bd      	mov	sp, r7
 800318a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318e:	4770      	bx	lr

08003190 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003190:	b480      	push	{r7}
 8003192:	b087      	sub	sp, #28
 8003194:	af00      	add	r7, sp, #0
 8003196:	60f8      	str	r0, [r7, #12]
 8003198:	60b9      	str	r1, [r7, #8]
 800319a:	607a      	str	r2, [r7, #4]
 800319c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	689b      	ldr	r3, [r3, #8]
 80031a2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80031a4:	697b      	ldr	r3, [r7, #20]
 80031a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80031aa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	021a      	lsls	r2, r3, #8
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	431a      	orrs	r2, r3
 80031b4:	68bb      	ldr	r3, [r7, #8]
 80031b6:	4313      	orrs	r3, r2
 80031b8:	697a      	ldr	r2, [r7, #20]
 80031ba:	4313      	orrs	r3, r2
 80031bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	697a      	ldr	r2, [r7, #20]
 80031c2:	609a      	str	r2, [r3, #8]
}
 80031c4:	bf00      	nop
 80031c6:	371c      	adds	r7, #28
 80031c8:	46bd      	mov	sp, r7
 80031ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ce:	4770      	bx	lr

080031d0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80031d0:	b480      	push	{r7}
 80031d2:	b087      	sub	sp, #28
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	60f8      	str	r0, [r7, #12]
 80031d8:	60b9      	str	r1, [r7, #8]
 80031da:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80031dc:	68bb      	ldr	r3, [r7, #8]
 80031de:	f003 031f 	and.w	r3, r3, #31
 80031e2:	2201      	movs	r2, #1
 80031e4:	fa02 f303 	lsl.w	r3, r2, r3
 80031e8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	6a1a      	ldr	r2, [r3, #32]
 80031ee:	697b      	ldr	r3, [r7, #20]
 80031f0:	43db      	mvns	r3, r3
 80031f2:	401a      	ands	r2, r3
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	6a1a      	ldr	r2, [r3, #32]
 80031fc:	68bb      	ldr	r3, [r7, #8]
 80031fe:	f003 031f 	and.w	r3, r3, #31
 8003202:	6879      	ldr	r1, [r7, #4]
 8003204:	fa01 f303 	lsl.w	r3, r1, r3
 8003208:	431a      	orrs	r2, r3
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	621a      	str	r2, [r3, #32]
}
 800320e:	bf00      	nop
 8003210:	371c      	adds	r7, #28
 8003212:	46bd      	mov	sp, r7
 8003214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003218:	4770      	bx	lr
	...

0800321c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800321c:	b480      	push	{r7}
 800321e:	b085      	sub	sp, #20
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
 8003224:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800322c:	2b01      	cmp	r3, #1
 800322e:	d101      	bne.n	8003234 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003230:	2302      	movs	r3, #2
 8003232:	e050      	b.n	80032d6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2201      	movs	r2, #1
 8003238:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2202      	movs	r2, #2
 8003240:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	689b      	ldr	r3, [r3, #8]
 8003252:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800325a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	68fa      	ldr	r2, [r7, #12]
 8003262:	4313      	orrs	r3, r2
 8003264:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	68fa      	ldr	r2, [r7, #12]
 800326c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4a1c      	ldr	r2, [pc, #112]	; (80032e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d018      	beq.n	80032aa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003280:	d013      	beq.n	80032aa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4a18      	ldr	r2, [pc, #96]	; (80032e8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d00e      	beq.n	80032aa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a16      	ldr	r2, [pc, #88]	; (80032ec <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d009      	beq.n	80032aa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a15      	ldr	r2, [pc, #84]	; (80032f0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d004      	beq.n	80032aa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a13      	ldr	r2, [pc, #76]	; (80032f4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d10c      	bne.n	80032c4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80032aa:	68bb      	ldr	r3, [r7, #8]
 80032ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80032b0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	68ba      	ldr	r2, [r7, #8]
 80032b8:	4313      	orrs	r3, r2
 80032ba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	68ba      	ldr	r2, [r7, #8]
 80032c2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2201      	movs	r2, #1
 80032c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2200      	movs	r2, #0
 80032d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80032d4:	2300      	movs	r3, #0
}
 80032d6:	4618      	mov	r0, r3
 80032d8:	3714      	adds	r7, #20
 80032da:	46bd      	mov	sp, r7
 80032dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e0:	4770      	bx	lr
 80032e2:	bf00      	nop
 80032e4:	40010000 	.word	0x40010000
 80032e8:	40000400 	.word	0x40000400
 80032ec:	40000800 	.word	0x40000800
 80032f0:	40000c00 	.word	0x40000c00
 80032f4:	40014000 	.word	0x40014000

080032f8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80032f8:	b480      	push	{r7}
 80032fa:	b085      	sub	sp, #20
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
 8003300:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003302:	2300      	movs	r3, #0
 8003304:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800330c:	2b01      	cmp	r3, #1
 800330e:	d101      	bne.n	8003314 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003310:	2302      	movs	r3, #2
 8003312:	e03d      	b.n	8003390 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2201      	movs	r2, #1
 8003318:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	68db      	ldr	r3, [r3, #12]
 8003326:	4313      	orrs	r3, r2
 8003328:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	689b      	ldr	r3, [r3, #8]
 8003334:	4313      	orrs	r3, r2
 8003336:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	4313      	orrs	r3, r2
 8003344:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4313      	orrs	r3, r2
 8003352:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	691b      	ldr	r3, [r3, #16]
 800335e:	4313      	orrs	r3, r2
 8003360:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	695b      	ldr	r3, [r3, #20]
 800336c:	4313      	orrs	r3, r2
 800336e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	69db      	ldr	r3, [r3, #28]
 800337a:	4313      	orrs	r3, r2
 800337c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	68fa      	ldr	r2, [r7, #12]
 8003384:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2200      	movs	r2, #0
 800338a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800338e:	2300      	movs	r3, #0
}
 8003390:	4618      	mov	r0, r3
 8003392:	3714      	adds	r7, #20
 8003394:	46bd      	mov	sp, r7
 8003396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339a:	4770      	bx	lr

0800339c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800339c:	b480      	push	{r7}
 800339e:	b083      	sub	sp, #12
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80033a4:	bf00      	nop
 80033a6:	370c      	adds	r7, #12
 80033a8:	46bd      	mov	sp, r7
 80033aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ae:	4770      	bx	lr

080033b0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80033b0:	b480      	push	{r7}
 80033b2:	b083      	sub	sp, #12
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80033b8:	bf00      	nop
 80033ba:	370c      	adds	r7, #12
 80033bc:	46bd      	mov	sp, r7
 80033be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c2:	4770      	bx	lr

080033c4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b082      	sub	sp, #8
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d101      	bne.n	80033d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80033d2:	2301      	movs	r3, #1
 80033d4:	e03f      	b.n	8003456 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033dc:	b2db      	uxtb	r3, r3
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d106      	bne.n	80033f0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2200      	movs	r2, #0
 80033e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80033ea:	6878      	ldr	r0, [r7, #4]
 80033ec:	f7fd ff62 	bl	80012b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2224      	movs	r2, #36	; 0x24
 80033f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	68da      	ldr	r2, [r3, #12]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003406:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003408:	6878      	ldr	r0, [r7, #4]
 800340a:	f000 f829 	bl	8003460 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	691a      	ldr	r2, [r3, #16]
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800341c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	695a      	ldr	r2, [r3, #20]
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800342c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	68da      	ldr	r2, [r3, #12]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800343c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2200      	movs	r2, #0
 8003442:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2220      	movs	r2, #32
 8003448:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2220      	movs	r2, #32
 8003450:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003454:	2300      	movs	r3, #0
}
 8003456:	4618      	mov	r0, r3
 8003458:	3708      	adds	r7, #8
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}
	...

08003460 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003460:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003464:	b0c0      	sub	sp, #256	; 0x100
 8003466:	af00      	add	r7, sp, #0
 8003468:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800346c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	691b      	ldr	r3, [r3, #16]
 8003474:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003478:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800347c:	68d9      	ldr	r1, [r3, #12]
 800347e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003482:	681a      	ldr	r2, [r3, #0]
 8003484:	ea40 0301 	orr.w	r3, r0, r1
 8003488:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800348a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800348e:	689a      	ldr	r2, [r3, #8]
 8003490:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003494:	691b      	ldr	r3, [r3, #16]
 8003496:	431a      	orrs	r2, r3
 8003498:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800349c:	695b      	ldr	r3, [r3, #20]
 800349e:	431a      	orrs	r2, r3
 80034a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034a4:	69db      	ldr	r3, [r3, #28]
 80034a6:	4313      	orrs	r3, r2
 80034a8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80034ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	68db      	ldr	r3, [r3, #12]
 80034b4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80034b8:	f021 010c 	bic.w	r1, r1, #12
 80034bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034c0:	681a      	ldr	r2, [r3, #0]
 80034c2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80034c6:	430b      	orrs	r3, r1
 80034c8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80034ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	695b      	ldr	r3, [r3, #20]
 80034d2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80034d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034da:	6999      	ldr	r1, [r3, #24]
 80034dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034e0:	681a      	ldr	r2, [r3, #0]
 80034e2:	ea40 0301 	orr.w	r3, r0, r1
 80034e6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80034e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034ec:	681a      	ldr	r2, [r3, #0]
 80034ee:	4b8f      	ldr	r3, [pc, #572]	; (800372c <UART_SetConfig+0x2cc>)
 80034f0:	429a      	cmp	r2, r3
 80034f2:	d005      	beq.n	8003500 <UART_SetConfig+0xa0>
 80034f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034f8:	681a      	ldr	r2, [r3, #0]
 80034fa:	4b8d      	ldr	r3, [pc, #564]	; (8003730 <UART_SetConfig+0x2d0>)
 80034fc:	429a      	cmp	r2, r3
 80034fe:	d104      	bne.n	800350a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003500:	f7fe ff36 	bl	8002370 <HAL_RCC_GetPCLK2Freq>
 8003504:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003508:	e003      	b.n	8003512 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800350a:	f7fe ff1d 	bl	8002348 <HAL_RCC_GetPCLK1Freq>
 800350e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003512:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003516:	69db      	ldr	r3, [r3, #28]
 8003518:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800351c:	f040 810c 	bne.w	8003738 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003520:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003524:	2200      	movs	r2, #0
 8003526:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800352a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800352e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003532:	4622      	mov	r2, r4
 8003534:	462b      	mov	r3, r5
 8003536:	1891      	adds	r1, r2, r2
 8003538:	65b9      	str	r1, [r7, #88]	; 0x58
 800353a:	415b      	adcs	r3, r3
 800353c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800353e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003542:	4621      	mov	r1, r4
 8003544:	eb12 0801 	adds.w	r8, r2, r1
 8003548:	4629      	mov	r1, r5
 800354a:	eb43 0901 	adc.w	r9, r3, r1
 800354e:	f04f 0200 	mov.w	r2, #0
 8003552:	f04f 0300 	mov.w	r3, #0
 8003556:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800355a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800355e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003562:	4690      	mov	r8, r2
 8003564:	4699      	mov	r9, r3
 8003566:	4623      	mov	r3, r4
 8003568:	eb18 0303 	adds.w	r3, r8, r3
 800356c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003570:	462b      	mov	r3, r5
 8003572:	eb49 0303 	adc.w	r3, r9, r3
 8003576:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800357a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	2200      	movs	r2, #0
 8003582:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003586:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800358a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800358e:	460b      	mov	r3, r1
 8003590:	18db      	adds	r3, r3, r3
 8003592:	653b      	str	r3, [r7, #80]	; 0x50
 8003594:	4613      	mov	r3, r2
 8003596:	eb42 0303 	adc.w	r3, r2, r3
 800359a:	657b      	str	r3, [r7, #84]	; 0x54
 800359c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80035a0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80035a4:	f7fd f94e 	bl	8000844 <__aeabi_uldivmod>
 80035a8:	4602      	mov	r2, r0
 80035aa:	460b      	mov	r3, r1
 80035ac:	4b61      	ldr	r3, [pc, #388]	; (8003734 <UART_SetConfig+0x2d4>)
 80035ae:	fba3 2302 	umull	r2, r3, r3, r2
 80035b2:	095b      	lsrs	r3, r3, #5
 80035b4:	011c      	lsls	r4, r3, #4
 80035b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80035ba:	2200      	movs	r2, #0
 80035bc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80035c0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80035c4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80035c8:	4642      	mov	r2, r8
 80035ca:	464b      	mov	r3, r9
 80035cc:	1891      	adds	r1, r2, r2
 80035ce:	64b9      	str	r1, [r7, #72]	; 0x48
 80035d0:	415b      	adcs	r3, r3
 80035d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80035d4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80035d8:	4641      	mov	r1, r8
 80035da:	eb12 0a01 	adds.w	sl, r2, r1
 80035de:	4649      	mov	r1, r9
 80035e0:	eb43 0b01 	adc.w	fp, r3, r1
 80035e4:	f04f 0200 	mov.w	r2, #0
 80035e8:	f04f 0300 	mov.w	r3, #0
 80035ec:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80035f0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80035f4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80035f8:	4692      	mov	sl, r2
 80035fa:	469b      	mov	fp, r3
 80035fc:	4643      	mov	r3, r8
 80035fe:	eb1a 0303 	adds.w	r3, sl, r3
 8003602:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003606:	464b      	mov	r3, r9
 8003608:	eb4b 0303 	adc.w	r3, fp, r3
 800360c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003610:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	2200      	movs	r2, #0
 8003618:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800361c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003620:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003624:	460b      	mov	r3, r1
 8003626:	18db      	adds	r3, r3, r3
 8003628:	643b      	str	r3, [r7, #64]	; 0x40
 800362a:	4613      	mov	r3, r2
 800362c:	eb42 0303 	adc.w	r3, r2, r3
 8003630:	647b      	str	r3, [r7, #68]	; 0x44
 8003632:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003636:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800363a:	f7fd f903 	bl	8000844 <__aeabi_uldivmod>
 800363e:	4602      	mov	r2, r0
 8003640:	460b      	mov	r3, r1
 8003642:	4611      	mov	r1, r2
 8003644:	4b3b      	ldr	r3, [pc, #236]	; (8003734 <UART_SetConfig+0x2d4>)
 8003646:	fba3 2301 	umull	r2, r3, r3, r1
 800364a:	095b      	lsrs	r3, r3, #5
 800364c:	2264      	movs	r2, #100	; 0x64
 800364e:	fb02 f303 	mul.w	r3, r2, r3
 8003652:	1acb      	subs	r3, r1, r3
 8003654:	00db      	lsls	r3, r3, #3
 8003656:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800365a:	4b36      	ldr	r3, [pc, #216]	; (8003734 <UART_SetConfig+0x2d4>)
 800365c:	fba3 2302 	umull	r2, r3, r3, r2
 8003660:	095b      	lsrs	r3, r3, #5
 8003662:	005b      	lsls	r3, r3, #1
 8003664:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003668:	441c      	add	r4, r3
 800366a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800366e:	2200      	movs	r2, #0
 8003670:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003674:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003678:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800367c:	4642      	mov	r2, r8
 800367e:	464b      	mov	r3, r9
 8003680:	1891      	adds	r1, r2, r2
 8003682:	63b9      	str	r1, [r7, #56]	; 0x38
 8003684:	415b      	adcs	r3, r3
 8003686:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003688:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800368c:	4641      	mov	r1, r8
 800368e:	1851      	adds	r1, r2, r1
 8003690:	6339      	str	r1, [r7, #48]	; 0x30
 8003692:	4649      	mov	r1, r9
 8003694:	414b      	adcs	r3, r1
 8003696:	637b      	str	r3, [r7, #52]	; 0x34
 8003698:	f04f 0200 	mov.w	r2, #0
 800369c:	f04f 0300 	mov.w	r3, #0
 80036a0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80036a4:	4659      	mov	r1, fp
 80036a6:	00cb      	lsls	r3, r1, #3
 80036a8:	4651      	mov	r1, sl
 80036aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80036ae:	4651      	mov	r1, sl
 80036b0:	00ca      	lsls	r2, r1, #3
 80036b2:	4610      	mov	r0, r2
 80036b4:	4619      	mov	r1, r3
 80036b6:	4603      	mov	r3, r0
 80036b8:	4642      	mov	r2, r8
 80036ba:	189b      	adds	r3, r3, r2
 80036bc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80036c0:	464b      	mov	r3, r9
 80036c2:	460a      	mov	r2, r1
 80036c4:	eb42 0303 	adc.w	r3, r2, r3
 80036c8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80036cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	2200      	movs	r2, #0
 80036d4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80036d8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80036dc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80036e0:	460b      	mov	r3, r1
 80036e2:	18db      	adds	r3, r3, r3
 80036e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80036e6:	4613      	mov	r3, r2
 80036e8:	eb42 0303 	adc.w	r3, r2, r3
 80036ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80036ee:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80036f2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80036f6:	f7fd f8a5 	bl	8000844 <__aeabi_uldivmod>
 80036fa:	4602      	mov	r2, r0
 80036fc:	460b      	mov	r3, r1
 80036fe:	4b0d      	ldr	r3, [pc, #52]	; (8003734 <UART_SetConfig+0x2d4>)
 8003700:	fba3 1302 	umull	r1, r3, r3, r2
 8003704:	095b      	lsrs	r3, r3, #5
 8003706:	2164      	movs	r1, #100	; 0x64
 8003708:	fb01 f303 	mul.w	r3, r1, r3
 800370c:	1ad3      	subs	r3, r2, r3
 800370e:	00db      	lsls	r3, r3, #3
 8003710:	3332      	adds	r3, #50	; 0x32
 8003712:	4a08      	ldr	r2, [pc, #32]	; (8003734 <UART_SetConfig+0x2d4>)
 8003714:	fba2 2303 	umull	r2, r3, r2, r3
 8003718:	095b      	lsrs	r3, r3, #5
 800371a:	f003 0207 	and.w	r2, r3, #7
 800371e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4422      	add	r2, r4
 8003726:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003728:	e106      	b.n	8003938 <UART_SetConfig+0x4d8>
 800372a:	bf00      	nop
 800372c:	40011000 	.word	0x40011000
 8003730:	40011400 	.word	0x40011400
 8003734:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003738:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800373c:	2200      	movs	r2, #0
 800373e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003742:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003746:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800374a:	4642      	mov	r2, r8
 800374c:	464b      	mov	r3, r9
 800374e:	1891      	adds	r1, r2, r2
 8003750:	6239      	str	r1, [r7, #32]
 8003752:	415b      	adcs	r3, r3
 8003754:	627b      	str	r3, [r7, #36]	; 0x24
 8003756:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800375a:	4641      	mov	r1, r8
 800375c:	1854      	adds	r4, r2, r1
 800375e:	4649      	mov	r1, r9
 8003760:	eb43 0501 	adc.w	r5, r3, r1
 8003764:	f04f 0200 	mov.w	r2, #0
 8003768:	f04f 0300 	mov.w	r3, #0
 800376c:	00eb      	lsls	r3, r5, #3
 800376e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003772:	00e2      	lsls	r2, r4, #3
 8003774:	4614      	mov	r4, r2
 8003776:	461d      	mov	r5, r3
 8003778:	4643      	mov	r3, r8
 800377a:	18e3      	adds	r3, r4, r3
 800377c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003780:	464b      	mov	r3, r9
 8003782:	eb45 0303 	adc.w	r3, r5, r3
 8003786:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800378a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	2200      	movs	r2, #0
 8003792:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003796:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800379a:	f04f 0200 	mov.w	r2, #0
 800379e:	f04f 0300 	mov.w	r3, #0
 80037a2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80037a6:	4629      	mov	r1, r5
 80037a8:	008b      	lsls	r3, r1, #2
 80037aa:	4621      	mov	r1, r4
 80037ac:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80037b0:	4621      	mov	r1, r4
 80037b2:	008a      	lsls	r2, r1, #2
 80037b4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80037b8:	f7fd f844 	bl	8000844 <__aeabi_uldivmod>
 80037bc:	4602      	mov	r2, r0
 80037be:	460b      	mov	r3, r1
 80037c0:	4b60      	ldr	r3, [pc, #384]	; (8003944 <UART_SetConfig+0x4e4>)
 80037c2:	fba3 2302 	umull	r2, r3, r3, r2
 80037c6:	095b      	lsrs	r3, r3, #5
 80037c8:	011c      	lsls	r4, r3, #4
 80037ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80037ce:	2200      	movs	r2, #0
 80037d0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80037d4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80037d8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80037dc:	4642      	mov	r2, r8
 80037de:	464b      	mov	r3, r9
 80037e0:	1891      	adds	r1, r2, r2
 80037e2:	61b9      	str	r1, [r7, #24]
 80037e4:	415b      	adcs	r3, r3
 80037e6:	61fb      	str	r3, [r7, #28]
 80037e8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80037ec:	4641      	mov	r1, r8
 80037ee:	1851      	adds	r1, r2, r1
 80037f0:	6139      	str	r1, [r7, #16]
 80037f2:	4649      	mov	r1, r9
 80037f4:	414b      	adcs	r3, r1
 80037f6:	617b      	str	r3, [r7, #20]
 80037f8:	f04f 0200 	mov.w	r2, #0
 80037fc:	f04f 0300 	mov.w	r3, #0
 8003800:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003804:	4659      	mov	r1, fp
 8003806:	00cb      	lsls	r3, r1, #3
 8003808:	4651      	mov	r1, sl
 800380a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800380e:	4651      	mov	r1, sl
 8003810:	00ca      	lsls	r2, r1, #3
 8003812:	4610      	mov	r0, r2
 8003814:	4619      	mov	r1, r3
 8003816:	4603      	mov	r3, r0
 8003818:	4642      	mov	r2, r8
 800381a:	189b      	adds	r3, r3, r2
 800381c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003820:	464b      	mov	r3, r9
 8003822:	460a      	mov	r2, r1
 8003824:	eb42 0303 	adc.w	r3, r2, r3
 8003828:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800382c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	2200      	movs	r2, #0
 8003834:	67bb      	str	r3, [r7, #120]	; 0x78
 8003836:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003838:	f04f 0200 	mov.w	r2, #0
 800383c:	f04f 0300 	mov.w	r3, #0
 8003840:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003844:	4649      	mov	r1, r9
 8003846:	008b      	lsls	r3, r1, #2
 8003848:	4641      	mov	r1, r8
 800384a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800384e:	4641      	mov	r1, r8
 8003850:	008a      	lsls	r2, r1, #2
 8003852:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003856:	f7fc fff5 	bl	8000844 <__aeabi_uldivmod>
 800385a:	4602      	mov	r2, r0
 800385c:	460b      	mov	r3, r1
 800385e:	4611      	mov	r1, r2
 8003860:	4b38      	ldr	r3, [pc, #224]	; (8003944 <UART_SetConfig+0x4e4>)
 8003862:	fba3 2301 	umull	r2, r3, r3, r1
 8003866:	095b      	lsrs	r3, r3, #5
 8003868:	2264      	movs	r2, #100	; 0x64
 800386a:	fb02 f303 	mul.w	r3, r2, r3
 800386e:	1acb      	subs	r3, r1, r3
 8003870:	011b      	lsls	r3, r3, #4
 8003872:	3332      	adds	r3, #50	; 0x32
 8003874:	4a33      	ldr	r2, [pc, #204]	; (8003944 <UART_SetConfig+0x4e4>)
 8003876:	fba2 2303 	umull	r2, r3, r2, r3
 800387a:	095b      	lsrs	r3, r3, #5
 800387c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003880:	441c      	add	r4, r3
 8003882:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003886:	2200      	movs	r2, #0
 8003888:	673b      	str	r3, [r7, #112]	; 0x70
 800388a:	677a      	str	r2, [r7, #116]	; 0x74
 800388c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003890:	4642      	mov	r2, r8
 8003892:	464b      	mov	r3, r9
 8003894:	1891      	adds	r1, r2, r2
 8003896:	60b9      	str	r1, [r7, #8]
 8003898:	415b      	adcs	r3, r3
 800389a:	60fb      	str	r3, [r7, #12]
 800389c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80038a0:	4641      	mov	r1, r8
 80038a2:	1851      	adds	r1, r2, r1
 80038a4:	6039      	str	r1, [r7, #0]
 80038a6:	4649      	mov	r1, r9
 80038a8:	414b      	adcs	r3, r1
 80038aa:	607b      	str	r3, [r7, #4]
 80038ac:	f04f 0200 	mov.w	r2, #0
 80038b0:	f04f 0300 	mov.w	r3, #0
 80038b4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80038b8:	4659      	mov	r1, fp
 80038ba:	00cb      	lsls	r3, r1, #3
 80038bc:	4651      	mov	r1, sl
 80038be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80038c2:	4651      	mov	r1, sl
 80038c4:	00ca      	lsls	r2, r1, #3
 80038c6:	4610      	mov	r0, r2
 80038c8:	4619      	mov	r1, r3
 80038ca:	4603      	mov	r3, r0
 80038cc:	4642      	mov	r2, r8
 80038ce:	189b      	adds	r3, r3, r2
 80038d0:	66bb      	str	r3, [r7, #104]	; 0x68
 80038d2:	464b      	mov	r3, r9
 80038d4:	460a      	mov	r2, r1
 80038d6:	eb42 0303 	adc.w	r3, r2, r3
 80038da:	66fb      	str	r3, [r7, #108]	; 0x6c
 80038dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	2200      	movs	r2, #0
 80038e4:	663b      	str	r3, [r7, #96]	; 0x60
 80038e6:	667a      	str	r2, [r7, #100]	; 0x64
 80038e8:	f04f 0200 	mov.w	r2, #0
 80038ec:	f04f 0300 	mov.w	r3, #0
 80038f0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80038f4:	4649      	mov	r1, r9
 80038f6:	008b      	lsls	r3, r1, #2
 80038f8:	4641      	mov	r1, r8
 80038fa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80038fe:	4641      	mov	r1, r8
 8003900:	008a      	lsls	r2, r1, #2
 8003902:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003906:	f7fc ff9d 	bl	8000844 <__aeabi_uldivmod>
 800390a:	4602      	mov	r2, r0
 800390c:	460b      	mov	r3, r1
 800390e:	4b0d      	ldr	r3, [pc, #52]	; (8003944 <UART_SetConfig+0x4e4>)
 8003910:	fba3 1302 	umull	r1, r3, r3, r2
 8003914:	095b      	lsrs	r3, r3, #5
 8003916:	2164      	movs	r1, #100	; 0x64
 8003918:	fb01 f303 	mul.w	r3, r1, r3
 800391c:	1ad3      	subs	r3, r2, r3
 800391e:	011b      	lsls	r3, r3, #4
 8003920:	3332      	adds	r3, #50	; 0x32
 8003922:	4a08      	ldr	r2, [pc, #32]	; (8003944 <UART_SetConfig+0x4e4>)
 8003924:	fba2 2303 	umull	r2, r3, r2, r3
 8003928:	095b      	lsrs	r3, r3, #5
 800392a:	f003 020f 	and.w	r2, r3, #15
 800392e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4422      	add	r2, r4
 8003936:	609a      	str	r2, [r3, #8]
}
 8003938:	bf00      	nop
 800393a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800393e:	46bd      	mov	sp, r7
 8003940:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003944:	51eb851f 	.word	0x51eb851f

08003948 <memset>:
 8003948:	4402      	add	r2, r0
 800394a:	4603      	mov	r3, r0
 800394c:	4293      	cmp	r3, r2
 800394e:	d100      	bne.n	8003952 <memset+0xa>
 8003950:	4770      	bx	lr
 8003952:	f803 1b01 	strb.w	r1, [r3], #1
 8003956:	e7f9      	b.n	800394c <memset+0x4>

08003958 <__libc_init_array>:
 8003958:	b570      	push	{r4, r5, r6, lr}
 800395a:	4d0d      	ldr	r5, [pc, #52]	; (8003990 <__libc_init_array+0x38>)
 800395c:	4c0d      	ldr	r4, [pc, #52]	; (8003994 <__libc_init_array+0x3c>)
 800395e:	1b64      	subs	r4, r4, r5
 8003960:	10a4      	asrs	r4, r4, #2
 8003962:	2600      	movs	r6, #0
 8003964:	42a6      	cmp	r6, r4
 8003966:	d109      	bne.n	800397c <__libc_init_array+0x24>
 8003968:	4d0b      	ldr	r5, [pc, #44]	; (8003998 <__libc_init_array+0x40>)
 800396a:	4c0c      	ldr	r4, [pc, #48]	; (800399c <__libc_init_array+0x44>)
 800396c:	f000 fd52 	bl	8004414 <_init>
 8003970:	1b64      	subs	r4, r4, r5
 8003972:	10a4      	asrs	r4, r4, #2
 8003974:	2600      	movs	r6, #0
 8003976:	42a6      	cmp	r6, r4
 8003978:	d105      	bne.n	8003986 <__libc_init_array+0x2e>
 800397a:	bd70      	pop	{r4, r5, r6, pc}
 800397c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003980:	4798      	blx	r3
 8003982:	3601      	adds	r6, #1
 8003984:	e7ee      	b.n	8003964 <__libc_init_array+0xc>
 8003986:	f855 3b04 	ldr.w	r3, [r5], #4
 800398a:	4798      	blx	r3
 800398c:	3601      	adds	r6, #1
 800398e:	e7f2      	b.n	8003976 <__libc_init_array+0x1e>
 8003990:	0800481c 	.word	0x0800481c
 8003994:	0800481c 	.word	0x0800481c
 8003998:	0800481c 	.word	0x0800481c
 800399c:	08004820 	.word	0x08004820

080039a0 <sinf>:
 80039a0:	ee10 3a10 	vmov	r3, s0
 80039a4:	b507      	push	{r0, r1, r2, lr}
 80039a6:	4a1f      	ldr	r2, [pc, #124]	; (8003a24 <sinf+0x84>)
 80039a8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80039ac:	4293      	cmp	r3, r2
 80039ae:	dc07      	bgt.n	80039c0 <sinf+0x20>
 80039b0:	eddf 0a1d 	vldr	s1, [pc, #116]	; 8003a28 <sinf+0x88>
 80039b4:	2000      	movs	r0, #0
 80039b6:	b003      	add	sp, #12
 80039b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80039bc:	f000 b894 	b.w	8003ae8 <__kernel_sinf>
 80039c0:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80039c4:	db04      	blt.n	80039d0 <sinf+0x30>
 80039c6:	ee30 0a40 	vsub.f32	s0, s0, s0
 80039ca:	b003      	add	sp, #12
 80039cc:	f85d fb04 	ldr.w	pc, [sp], #4
 80039d0:	4668      	mov	r0, sp
 80039d2:	f000 f8d1 	bl	8003b78 <__ieee754_rem_pio2f>
 80039d6:	f000 0003 	and.w	r0, r0, #3
 80039da:	2801      	cmp	r0, #1
 80039dc:	d00a      	beq.n	80039f4 <sinf+0x54>
 80039de:	2802      	cmp	r0, #2
 80039e0:	d00f      	beq.n	8003a02 <sinf+0x62>
 80039e2:	b9c0      	cbnz	r0, 8003a16 <sinf+0x76>
 80039e4:	eddd 0a01 	vldr	s1, [sp, #4]
 80039e8:	ed9d 0a00 	vldr	s0, [sp]
 80039ec:	2001      	movs	r0, #1
 80039ee:	f000 f87b 	bl	8003ae8 <__kernel_sinf>
 80039f2:	e7ea      	b.n	80039ca <sinf+0x2a>
 80039f4:	eddd 0a01 	vldr	s1, [sp, #4]
 80039f8:	ed9d 0a00 	vldr	s0, [sp]
 80039fc:	f000 f816 	bl	8003a2c <__kernel_cosf>
 8003a00:	e7e3      	b.n	80039ca <sinf+0x2a>
 8003a02:	eddd 0a01 	vldr	s1, [sp, #4]
 8003a06:	ed9d 0a00 	vldr	s0, [sp]
 8003a0a:	2001      	movs	r0, #1
 8003a0c:	f000 f86c 	bl	8003ae8 <__kernel_sinf>
 8003a10:	eeb1 0a40 	vneg.f32	s0, s0
 8003a14:	e7d9      	b.n	80039ca <sinf+0x2a>
 8003a16:	eddd 0a01 	vldr	s1, [sp, #4]
 8003a1a:	ed9d 0a00 	vldr	s0, [sp]
 8003a1e:	f000 f805 	bl	8003a2c <__kernel_cosf>
 8003a22:	e7f5      	b.n	8003a10 <sinf+0x70>
 8003a24:	3f490fd8 	.word	0x3f490fd8
 8003a28:	00000000 	.word	0x00000000

08003a2c <__kernel_cosf>:
 8003a2c:	ee10 3a10 	vmov	r3, s0
 8003a30:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003a34:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8003a38:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003a3c:	da05      	bge.n	8003a4a <__kernel_cosf+0x1e>
 8003a3e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8003a42:	ee17 2a90 	vmov	r2, s15
 8003a46:	2a00      	cmp	r2, #0
 8003a48:	d03b      	beq.n	8003ac2 <__kernel_cosf+0x96>
 8003a4a:	ee20 7a00 	vmul.f32	s14, s0, s0
 8003a4e:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8003ac8 <__kernel_cosf+0x9c>
 8003a52:	ed9f 6a1e 	vldr	s12, [pc, #120]	; 8003acc <__kernel_cosf+0xa0>
 8003a56:	4a1e      	ldr	r2, [pc, #120]	; (8003ad0 <__kernel_cosf+0xa4>)
 8003a58:	eea7 6a27 	vfma.f32	s12, s14, s15
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	eddf 7a1d 	vldr	s15, [pc, #116]	; 8003ad4 <__kernel_cosf+0xa8>
 8003a62:	eee6 7a07 	vfma.f32	s15, s12, s14
 8003a66:	ed9f 6a1c 	vldr	s12, [pc, #112]	; 8003ad8 <__kernel_cosf+0xac>
 8003a6a:	eea7 6a87 	vfma.f32	s12, s15, s14
 8003a6e:	eddf 7a1b 	vldr	s15, [pc, #108]	; 8003adc <__kernel_cosf+0xb0>
 8003a72:	eee6 7a07 	vfma.f32	s15, s12, s14
 8003a76:	ed9f 6a1a 	vldr	s12, [pc, #104]	; 8003ae0 <__kernel_cosf+0xb4>
 8003a7a:	eea7 6a87 	vfma.f32	s12, s15, s14
 8003a7e:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 8003a82:	ee26 6a07 	vmul.f32	s12, s12, s14
 8003a86:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8003a8a:	eee7 0a06 	vfma.f32	s1, s14, s12
 8003a8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a92:	dc04      	bgt.n	8003a9e <__kernel_cosf+0x72>
 8003a94:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8003a98:	ee36 0ae7 	vsub.f32	s0, s13, s15
 8003a9c:	4770      	bx	lr
 8003a9e:	4a11      	ldr	r2, [pc, #68]	; (8003ae4 <__kernel_cosf+0xb8>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	bfda      	itte	le
 8003aa4:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 8003aa8:	ee07 3a10 	vmovle	s14, r3
 8003aac:	eeb5 7a02 	vmovgt.f32	s14, #82	; 0x3e900000  0.2812500
 8003ab0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003ab4:	ee36 0ac7 	vsub.f32	s0, s13, s14
 8003ab8:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8003abc:	ee30 0a67 	vsub.f32	s0, s0, s15
 8003ac0:	4770      	bx	lr
 8003ac2:	eeb0 0a66 	vmov.f32	s0, s13
 8003ac6:	4770      	bx	lr
 8003ac8:	ad47d74e 	.word	0xad47d74e
 8003acc:	310f74f6 	.word	0x310f74f6
 8003ad0:	3e999999 	.word	0x3e999999
 8003ad4:	b493f27c 	.word	0xb493f27c
 8003ad8:	37d00d01 	.word	0x37d00d01
 8003adc:	bab60b61 	.word	0xbab60b61
 8003ae0:	3d2aaaab 	.word	0x3d2aaaab
 8003ae4:	3f480000 	.word	0x3f480000

08003ae8 <__kernel_sinf>:
 8003ae8:	ee10 3a10 	vmov	r3, s0
 8003aec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003af0:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8003af4:	da04      	bge.n	8003b00 <__kernel_sinf+0x18>
 8003af6:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8003afa:	ee17 3a90 	vmov	r3, s15
 8003afe:	b35b      	cbz	r3, 8003b58 <__kernel_sinf+0x70>
 8003b00:	ee20 7a00 	vmul.f32	s14, s0, s0
 8003b04:	eddf 7a15 	vldr	s15, [pc, #84]	; 8003b5c <__kernel_sinf+0x74>
 8003b08:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8003b60 <__kernel_sinf+0x78>
 8003b0c:	eea7 6a27 	vfma.f32	s12, s14, s15
 8003b10:	eddf 7a14 	vldr	s15, [pc, #80]	; 8003b64 <__kernel_sinf+0x7c>
 8003b14:	eee6 7a07 	vfma.f32	s15, s12, s14
 8003b18:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8003b68 <__kernel_sinf+0x80>
 8003b1c:	eea7 6a87 	vfma.f32	s12, s15, s14
 8003b20:	eddf 7a12 	vldr	s15, [pc, #72]	; 8003b6c <__kernel_sinf+0x84>
 8003b24:	ee60 6a07 	vmul.f32	s13, s0, s14
 8003b28:	eee6 7a07 	vfma.f32	s15, s12, s14
 8003b2c:	b930      	cbnz	r0, 8003b3c <__kernel_sinf+0x54>
 8003b2e:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8003b70 <__kernel_sinf+0x88>
 8003b32:	eea7 6a27 	vfma.f32	s12, s14, s15
 8003b36:	eea6 0a26 	vfma.f32	s0, s12, s13
 8003b3a:	4770      	bx	lr
 8003b3c:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8003b40:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8003b44:	eee0 7a86 	vfma.f32	s15, s1, s12
 8003b48:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8003b4c:	eddf 7a09 	vldr	s15, [pc, #36]	; 8003b74 <__kernel_sinf+0x8c>
 8003b50:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8003b54:	ee30 0a60 	vsub.f32	s0, s0, s1
 8003b58:	4770      	bx	lr
 8003b5a:	bf00      	nop
 8003b5c:	2f2ec9d3 	.word	0x2f2ec9d3
 8003b60:	b2d72f34 	.word	0xb2d72f34
 8003b64:	3638ef1b 	.word	0x3638ef1b
 8003b68:	b9500d01 	.word	0xb9500d01
 8003b6c:	3c088889 	.word	0x3c088889
 8003b70:	be2aaaab 	.word	0xbe2aaaab
 8003b74:	3e2aaaab 	.word	0x3e2aaaab

08003b78 <__ieee754_rem_pio2f>:
 8003b78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b7a:	ee10 6a10 	vmov	r6, s0
 8003b7e:	4b86      	ldr	r3, [pc, #536]	; (8003d98 <__ieee754_rem_pio2f+0x220>)
 8003b80:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8003b84:	429d      	cmp	r5, r3
 8003b86:	b087      	sub	sp, #28
 8003b88:	4604      	mov	r4, r0
 8003b8a:	dc05      	bgt.n	8003b98 <__ieee754_rem_pio2f+0x20>
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	ed80 0a00 	vstr	s0, [r0]
 8003b92:	6043      	str	r3, [r0, #4]
 8003b94:	2000      	movs	r0, #0
 8003b96:	e020      	b.n	8003bda <__ieee754_rem_pio2f+0x62>
 8003b98:	4b80      	ldr	r3, [pc, #512]	; (8003d9c <__ieee754_rem_pio2f+0x224>)
 8003b9a:	429d      	cmp	r5, r3
 8003b9c:	dc38      	bgt.n	8003c10 <__ieee754_rem_pio2f+0x98>
 8003b9e:	2e00      	cmp	r6, #0
 8003ba0:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 8003da0 <__ieee754_rem_pio2f+0x228>
 8003ba4:	4b7f      	ldr	r3, [pc, #508]	; (8003da4 <__ieee754_rem_pio2f+0x22c>)
 8003ba6:	f025 050f 	bic.w	r5, r5, #15
 8003baa:	dd18      	ble.n	8003bde <__ieee754_rem_pio2f+0x66>
 8003bac:	429d      	cmp	r5, r3
 8003bae:	ee70 7a47 	vsub.f32	s15, s0, s14
 8003bb2:	bf09      	itett	eq
 8003bb4:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 8003da8 <__ieee754_rem_pio2f+0x230>
 8003bb8:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 8003dac <__ieee754_rem_pio2f+0x234>
 8003bbc:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8003bc0:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 8003db0 <__ieee754_rem_pio2f+0x238>
 8003bc4:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8003bc8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003bcc:	edc0 6a00 	vstr	s13, [r0]
 8003bd0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003bd4:	edc0 7a01 	vstr	s15, [r0, #4]
 8003bd8:	2001      	movs	r0, #1
 8003bda:	b007      	add	sp, #28
 8003bdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003bde:	429d      	cmp	r5, r3
 8003be0:	ee70 7a07 	vadd.f32	s15, s0, s14
 8003be4:	bf09      	itett	eq
 8003be6:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 8003da8 <__ieee754_rem_pio2f+0x230>
 8003bea:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 8003dac <__ieee754_rem_pio2f+0x234>
 8003bee:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 8003bf2:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 8003db0 <__ieee754_rem_pio2f+0x238>
 8003bf6:	ee77 6a87 	vadd.f32	s13, s15, s14
 8003bfa:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003bfe:	edc0 6a00 	vstr	s13, [r0]
 8003c02:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003c06:	edc0 7a01 	vstr	s15, [r0, #4]
 8003c0a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003c0e:	e7e4      	b.n	8003bda <__ieee754_rem_pio2f+0x62>
 8003c10:	4b68      	ldr	r3, [pc, #416]	; (8003db4 <__ieee754_rem_pio2f+0x23c>)
 8003c12:	429d      	cmp	r5, r3
 8003c14:	dc71      	bgt.n	8003cfa <__ieee754_rem_pio2f+0x182>
 8003c16:	f000 f8db 	bl	8003dd0 <fabsf>
 8003c1a:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8003db8 <__ieee754_rem_pio2f+0x240>
 8003c1e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8003c22:	eee0 7a07 	vfma.f32	s15, s0, s14
 8003c26:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003c2a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003c2e:	ee17 0a90 	vmov	r0, s15
 8003c32:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8003da0 <__ieee754_rem_pio2f+0x228>
 8003c36:	eea7 0a67 	vfms.f32	s0, s14, s15
 8003c3a:	281f      	cmp	r0, #31
 8003c3c:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8003dac <__ieee754_rem_pio2f+0x234>
 8003c40:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c44:	eeb1 6a47 	vneg.f32	s12, s14
 8003c48:	ee70 6a67 	vsub.f32	s13, s0, s15
 8003c4c:	ee16 2a90 	vmov	r2, s13
 8003c50:	dc1c      	bgt.n	8003c8c <__ieee754_rem_pio2f+0x114>
 8003c52:	495a      	ldr	r1, [pc, #360]	; (8003dbc <__ieee754_rem_pio2f+0x244>)
 8003c54:	1e47      	subs	r7, r0, #1
 8003c56:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 8003c5a:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8003c5e:	428b      	cmp	r3, r1
 8003c60:	d014      	beq.n	8003c8c <__ieee754_rem_pio2f+0x114>
 8003c62:	6022      	str	r2, [r4, #0]
 8003c64:	ed94 7a00 	vldr	s14, [r4]
 8003c68:	ee30 0a47 	vsub.f32	s0, s0, s14
 8003c6c:	2e00      	cmp	r6, #0
 8003c6e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8003c72:	ed84 0a01 	vstr	s0, [r4, #4]
 8003c76:	dab0      	bge.n	8003bda <__ieee754_rem_pio2f+0x62>
 8003c78:	eeb1 7a47 	vneg.f32	s14, s14
 8003c7c:	eeb1 0a40 	vneg.f32	s0, s0
 8003c80:	ed84 7a00 	vstr	s14, [r4]
 8003c84:	ed84 0a01 	vstr	s0, [r4, #4]
 8003c88:	4240      	negs	r0, r0
 8003c8a:	e7a6      	b.n	8003bda <__ieee754_rem_pio2f+0x62>
 8003c8c:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8003c90:	ebc1 51d5 	rsb	r1, r1, r5, lsr #23
 8003c94:	2908      	cmp	r1, #8
 8003c96:	ea4f 53e5 	mov.w	r3, r5, asr #23
 8003c9a:	dde2      	ble.n	8003c62 <__ieee754_rem_pio2f+0xea>
 8003c9c:	eddf 5a42 	vldr	s11, [pc, #264]	; 8003da8 <__ieee754_rem_pio2f+0x230>
 8003ca0:	eef0 6a40 	vmov.f32	s13, s0
 8003ca4:	eee6 6a25 	vfma.f32	s13, s12, s11
 8003ca8:	ee70 7a66 	vsub.f32	s15, s0, s13
 8003cac:	eee6 7a25 	vfma.f32	s15, s12, s11
 8003cb0:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003db0 <__ieee754_rem_pio2f+0x238>
 8003cb4:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8003cb8:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8003cbc:	ee15 2a90 	vmov	r2, s11
 8003cc0:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8003cc4:	1a5b      	subs	r3, r3, r1
 8003cc6:	2b19      	cmp	r3, #25
 8003cc8:	dc04      	bgt.n	8003cd4 <__ieee754_rem_pio2f+0x15c>
 8003cca:	edc4 5a00 	vstr	s11, [r4]
 8003cce:	eeb0 0a66 	vmov.f32	s0, s13
 8003cd2:	e7c7      	b.n	8003c64 <__ieee754_rem_pio2f+0xec>
 8003cd4:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8003dc0 <__ieee754_rem_pio2f+0x248>
 8003cd8:	eeb0 0a66 	vmov.f32	s0, s13
 8003cdc:	eea6 0a25 	vfma.f32	s0, s12, s11
 8003ce0:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8003ce4:	eddf 6a37 	vldr	s13, [pc, #220]	; 8003dc4 <__ieee754_rem_pio2f+0x24c>
 8003ce8:	eee6 7a25 	vfma.f32	s15, s12, s11
 8003cec:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8003cf0:	ee30 7a67 	vsub.f32	s14, s0, s15
 8003cf4:	ed84 7a00 	vstr	s14, [r4]
 8003cf8:	e7b4      	b.n	8003c64 <__ieee754_rem_pio2f+0xec>
 8003cfa:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8003cfe:	db06      	blt.n	8003d0e <__ieee754_rem_pio2f+0x196>
 8003d00:	ee70 7a40 	vsub.f32	s15, s0, s0
 8003d04:	edc0 7a01 	vstr	s15, [r0, #4]
 8003d08:	edc0 7a00 	vstr	s15, [r0]
 8003d0c:	e742      	b.n	8003b94 <__ieee754_rem_pio2f+0x1c>
 8003d0e:	15ea      	asrs	r2, r5, #23
 8003d10:	3a86      	subs	r2, #134	; 0x86
 8003d12:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8003d16:	ee07 3a90 	vmov	s15, r3
 8003d1a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8003d1e:	eddf 6a2a 	vldr	s13, [pc, #168]	; 8003dc8 <__ieee754_rem_pio2f+0x250>
 8003d22:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8003d26:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003d2a:	ed8d 7a03 	vstr	s14, [sp, #12]
 8003d2e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003d32:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8003d36:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8003d3a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003d3e:	ed8d 7a04 	vstr	s14, [sp, #16]
 8003d42:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003d46:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003d4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d4e:	edcd 7a05 	vstr	s15, [sp, #20]
 8003d52:	d11e      	bne.n	8003d92 <__ieee754_rem_pio2f+0x21a>
 8003d54:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8003d58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d5c:	bf14      	ite	ne
 8003d5e:	2302      	movne	r3, #2
 8003d60:	2301      	moveq	r3, #1
 8003d62:	491a      	ldr	r1, [pc, #104]	; (8003dcc <__ieee754_rem_pio2f+0x254>)
 8003d64:	9101      	str	r1, [sp, #4]
 8003d66:	2102      	movs	r1, #2
 8003d68:	9100      	str	r1, [sp, #0]
 8003d6a:	a803      	add	r0, sp, #12
 8003d6c:	4621      	mov	r1, r4
 8003d6e:	f000 f837 	bl	8003de0 <__kernel_rem_pio2f>
 8003d72:	2e00      	cmp	r6, #0
 8003d74:	f6bf af31 	bge.w	8003bda <__ieee754_rem_pio2f+0x62>
 8003d78:	edd4 7a00 	vldr	s15, [r4]
 8003d7c:	eef1 7a67 	vneg.f32	s15, s15
 8003d80:	edc4 7a00 	vstr	s15, [r4]
 8003d84:	edd4 7a01 	vldr	s15, [r4, #4]
 8003d88:	eef1 7a67 	vneg.f32	s15, s15
 8003d8c:	edc4 7a01 	vstr	s15, [r4, #4]
 8003d90:	e77a      	b.n	8003c88 <__ieee754_rem_pio2f+0x110>
 8003d92:	2303      	movs	r3, #3
 8003d94:	e7e5      	b.n	8003d62 <__ieee754_rem_pio2f+0x1ea>
 8003d96:	bf00      	nop
 8003d98:	3f490fd8 	.word	0x3f490fd8
 8003d9c:	4016cbe3 	.word	0x4016cbe3
 8003da0:	3fc90f80 	.word	0x3fc90f80
 8003da4:	3fc90fd0 	.word	0x3fc90fd0
 8003da8:	37354400 	.word	0x37354400
 8003dac:	37354443 	.word	0x37354443
 8003db0:	2e85a308 	.word	0x2e85a308
 8003db4:	43490f80 	.word	0x43490f80
 8003db8:	3f22f984 	.word	0x3f22f984
 8003dbc:	08004444 	.word	0x08004444
 8003dc0:	2e85a300 	.word	0x2e85a300
 8003dc4:	248d3132 	.word	0x248d3132
 8003dc8:	43800000 	.word	0x43800000
 8003dcc:	080044c4 	.word	0x080044c4

08003dd0 <fabsf>:
 8003dd0:	ee10 3a10 	vmov	r3, s0
 8003dd4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003dd8:	ee00 3a10 	vmov	s0, r3
 8003ddc:	4770      	bx	lr
	...

08003de0 <__kernel_rem_pio2f>:
 8003de0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003de4:	ed2d 8b04 	vpush	{d8-d9}
 8003de8:	b0d9      	sub	sp, #356	; 0x164
 8003dea:	4688      	mov	r8, r1
 8003dec:	9002      	str	r0, [sp, #8]
 8003dee:	49b8      	ldr	r1, [pc, #736]	; (80040d0 <__kernel_rem_pio2f+0x2f0>)
 8003df0:	9866      	ldr	r0, [sp, #408]	; 0x198
 8003df2:	9301      	str	r3, [sp, #4]
 8003df4:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 8003df8:	9901      	ldr	r1, [sp, #4]
 8003dfa:	9b67      	ldr	r3, [sp, #412]	; 0x19c
 8003dfc:	f101 3bff 	add.w	fp, r1, #4294967295	; 0xffffffff
 8003e00:	1d11      	adds	r1, r2, #4
 8003e02:	db25      	blt.n	8003e50 <__kernel_rem_pio2f+0x70>
 8003e04:	1ed0      	subs	r0, r2, #3
 8003e06:	bf48      	it	mi
 8003e08:	1d10      	addmi	r0, r2, #4
 8003e0a:	10c0      	asrs	r0, r0, #3
 8003e0c:	1c45      	adds	r5, r0, #1
 8003e0e:	00e9      	lsls	r1, r5, #3
 8003e10:	eba0 070b 	sub.w	r7, r0, fp
 8003e14:	ed9f 7ab2 	vldr	s14, [pc, #712]	; 80040e0 <__kernel_rem_pio2f+0x300>
 8003e18:	9103      	str	r1, [sp, #12]
 8003e1a:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 8003e1e:	eb0a 0c0b 	add.w	ip, sl, fp
 8003e22:	ae1c      	add	r6, sp, #112	; 0x70
 8003e24:	eb03 0e87 	add.w	lr, r3, r7, lsl #2
 8003e28:	2400      	movs	r4, #0
 8003e2a:	4564      	cmp	r4, ip
 8003e2c:	dd12      	ble.n	8003e54 <__kernel_rem_pio2f+0x74>
 8003e2e:	9901      	ldr	r1, [sp, #4]
 8003e30:	ac1c      	add	r4, sp, #112	; 0x70
 8003e32:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8003e36:	f50d 7988 	add.w	r9, sp, #272	; 0x110
 8003e3a:	f04f 0c00 	mov.w	ip, #0
 8003e3e:	45d4      	cmp	ip, sl
 8003e40:	dc27      	bgt.n	8003e92 <__kernel_rem_pio2f+0xb2>
 8003e42:	f8dd e008 	ldr.w	lr, [sp, #8]
 8003e46:	eddf 7aa6 	vldr	s15, [pc, #664]	; 80040e0 <__kernel_rem_pio2f+0x300>
 8003e4a:	4627      	mov	r7, r4
 8003e4c:	2600      	movs	r6, #0
 8003e4e:	e016      	b.n	8003e7e <__kernel_rem_pio2f+0x9e>
 8003e50:	2000      	movs	r0, #0
 8003e52:	e7db      	b.n	8003e0c <__kernel_rem_pio2f+0x2c>
 8003e54:	42e7      	cmn	r7, r4
 8003e56:	bf5d      	ittte	pl
 8003e58:	f85e 1024 	ldrpl.w	r1, [lr, r4, lsl #2]
 8003e5c:	ee07 1a90 	vmovpl	s15, r1
 8003e60:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8003e64:	eef0 7a47 	vmovmi.f32	s15, s14
 8003e68:	ece6 7a01 	vstmia	r6!, {s15}
 8003e6c:	3401      	adds	r4, #1
 8003e6e:	e7dc      	b.n	8003e2a <__kernel_rem_pio2f+0x4a>
 8003e70:	ecfe 6a01 	vldmia	lr!, {s13}
 8003e74:	ed97 7a00 	vldr	s14, [r7]
 8003e78:	eee6 7a87 	vfma.f32	s15, s13, s14
 8003e7c:	3601      	adds	r6, #1
 8003e7e:	455e      	cmp	r6, fp
 8003e80:	f1a7 0704 	sub.w	r7, r7, #4
 8003e84:	ddf4      	ble.n	8003e70 <__kernel_rem_pio2f+0x90>
 8003e86:	ece9 7a01 	vstmia	r9!, {s15}
 8003e8a:	f10c 0c01 	add.w	ip, ip, #1
 8003e8e:	3404      	adds	r4, #4
 8003e90:	e7d5      	b.n	8003e3e <__kernel_rem_pio2f+0x5e>
 8003e92:	a908      	add	r1, sp, #32
 8003e94:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8003e98:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8003e9c:	eddf 8a8f 	vldr	s17, [pc, #572]	; 80040dc <__kernel_rem_pio2f+0x2fc>
 8003ea0:	ed9f 9a8d 	vldr	s18, [pc, #564]	; 80040d8 <__kernel_rem_pio2f+0x2f8>
 8003ea4:	9105      	str	r1, [sp, #20]
 8003ea6:	9304      	str	r3, [sp, #16]
 8003ea8:	4656      	mov	r6, sl
 8003eaa:	00b3      	lsls	r3, r6, #2
 8003eac:	9306      	str	r3, [sp, #24]
 8003eae:	ab58      	add	r3, sp, #352	; 0x160
 8003eb0:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 8003eb4:	ac08      	add	r4, sp, #32
 8003eb6:	ab44      	add	r3, sp, #272	; 0x110
 8003eb8:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 8003ebc:	46a4      	mov	ip, r4
 8003ebe:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 8003ec2:	4637      	mov	r7, r6
 8003ec4:	2f00      	cmp	r7, #0
 8003ec6:	f1a0 0004 	sub.w	r0, r0, #4
 8003eca:	dc4a      	bgt.n	8003f62 <__kernel_rem_pio2f+0x182>
 8003ecc:	4628      	mov	r0, r5
 8003ece:	9207      	str	r2, [sp, #28]
 8003ed0:	f000 fa3a 	bl	8004348 <scalbnf>
 8003ed4:	eeb0 8a40 	vmov.f32	s16, s0
 8003ed8:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 8003edc:	ee28 0a00 	vmul.f32	s0, s16, s0
 8003ee0:	f000 f9f0 	bl	80042c4 <floorf>
 8003ee4:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 8003ee8:	eea0 8a67 	vfms.f32	s16, s0, s15
 8003eec:	2d00      	cmp	r5, #0
 8003eee:	9a07      	ldr	r2, [sp, #28]
 8003ef0:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8003ef4:	ee17 9a90 	vmov	r9, s15
 8003ef8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003efc:	ee38 8a67 	vsub.f32	s16, s16, s15
 8003f00:	dd41      	ble.n	8003f86 <__kernel_rem_pio2f+0x1a6>
 8003f02:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8003f06:	ab08      	add	r3, sp, #32
 8003f08:	f1c5 0e08 	rsb	lr, r5, #8
 8003f0c:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 8003f10:	fa47 f00e 	asr.w	r0, r7, lr
 8003f14:	4481      	add	r9, r0
 8003f16:	fa00 f00e 	lsl.w	r0, r0, lr
 8003f1a:	1a3f      	subs	r7, r7, r0
 8003f1c:	f1c5 0007 	rsb	r0, r5, #7
 8003f20:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 8003f24:	4107      	asrs	r7, r0
 8003f26:	2f00      	cmp	r7, #0
 8003f28:	dd3c      	ble.n	8003fa4 <__kernel_rem_pio2f+0x1c4>
 8003f2a:	f04f 0e00 	mov.w	lr, #0
 8003f2e:	f109 0901 	add.w	r9, r9, #1
 8003f32:	4671      	mov	r1, lr
 8003f34:	4576      	cmp	r6, lr
 8003f36:	dc67      	bgt.n	8004008 <__kernel_rem_pio2f+0x228>
 8003f38:	2d00      	cmp	r5, #0
 8003f3a:	dd03      	ble.n	8003f44 <__kernel_rem_pio2f+0x164>
 8003f3c:	2d01      	cmp	r5, #1
 8003f3e:	d074      	beq.n	800402a <__kernel_rem_pio2f+0x24a>
 8003f40:	2d02      	cmp	r5, #2
 8003f42:	d07b      	beq.n	800403c <__kernel_rem_pio2f+0x25c>
 8003f44:	2f02      	cmp	r7, #2
 8003f46:	d12d      	bne.n	8003fa4 <__kernel_rem_pio2f+0x1c4>
 8003f48:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8003f4c:	ee30 8a48 	vsub.f32	s16, s0, s16
 8003f50:	b341      	cbz	r1, 8003fa4 <__kernel_rem_pio2f+0x1c4>
 8003f52:	4628      	mov	r0, r5
 8003f54:	9207      	str	r2, [sp, #28]
 8003f56:	f000 f9f7 	bl	8004348 <scalbnf>
 8003f5a:	9a07      	ldr	r2, [sp, #28]
 8003f5c:	ee38 8a40 	vsub.f32	s16, s16, s0
 8003f60:	e020      	b.n	8003fa4 <__kernel_rem_pio2f+0x1c4>
 8003f62:	ee60 7a28 	vmul.f32	s15, s0, s17
 8003f66:	3f01      	subs	r7, #1
 8003f68:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003f6c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003f70:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8003f74:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8003f78:	ecac 0a01 	vstmia	ip!, {s0}
 8003f7c:	ed90 0a00 	vldr	s0, [r0]
 8003f80:	ee37 0a80 	vadd.f32	s0, s15, s0
 8003f84:	e79e      	b.n	8003ec4 <__kernel_rem_pio2f+0xe4>
 8003f86:	d105      	bne.n	8003f94 <__kernel_rem_pio2f+0x1b4>
 8003f88:	1e70      	subs	r0, r6, #1
 8003f8a:	ab08      	add	r3, sp, #32
 8003f8c:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 8003f90:	11ff      	asrs	r7, r7, #7
 8003f92:	e7c8      	b.n	8003f26 <__kernel_rem_pio2f+0x146>
 8003f94:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8003f98:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8003f9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fa0:	da30      	bge.n	8004004 <__kernel_rem_pio2f+0x224>
 8003fa2:	2700      	movs	r7, #0
 8003fa4:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8003fa8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fac:	f040 809a 	bne.w	80040e4 <__kernel_rem_pio2f+0x304>
 8003fb0:	1e74      	subs	r4, r6, #1
 8003fb2:	46a4      	mov	ip, r4
 8003fb4:	2100      	movs	r1, #0
 8003fb6:	45d4      	cmp	ip, sl
 8003fb8:	da47      	bge.n	800404a <__kernel_rem_pio2f+0x26a>
 8003fba:	2900      	cmp	r1, #0
 8003fbc:	d063      	beq.n	8004086 <__kernel_rem_pio2f+0x2a6>
 8003fbe:	ab08      	add	r3, sp, #32
 8003fc0:	3d08      	subs	r5, #8
 8003fc2:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d07f      	beq.n	80040ca <__kernel_rem_pio2f+0x2ea>
 8003fca:	4628      	mov	r0, r5
 8003fcc:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8003fd0:	f000 f9ba 	bl	8004348 <scalbnf>
 8003fd4:	1c63      	adds	r3, r4, #1
 8003fd6:	aa44      	add	r2, sp, #272	; 0x110
 8003fd8:	ed9f 7a40 	vldr	s14, [pc, #256]	; 80040dc <__kernel_rem_pio2f+0x2fc>
 8003fdc:	0099      	lsls	r1, r3, #2
 8003fde:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8003fe2:	4623      	mov	r3, r4
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	f280 80ad 	bge.w	8004144 <__kernel_rem_pio2f+0x364>
 8003fea:	4623      	mov	r3, r4
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	f2c0 80cb 	blt.w	8004188 <__kernel_rem_pio2f+0x3a8>
 8003ff2:	aa44      	add	r2, sp, #272	; 0x110
 8003ff4:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8003ff8:	4e36      	ldr	r6, [pc, #216]	; (80040d4 <__kernel_rem_pio2f+0x2f4>)
 8003ffa:	eddf 7a39 	vldr	s15, [pc, #228]	; 80040e0 <__kernel_rem_pio2f+0x300>
 8003ffe:	2000      	movs	r0, #0
 8004000:	1ae2      	subs	r2, r4, r3
 8004002:	e0b6      	b.n	8004172 <__kernel_rem_pio2f+0x392>
 8004004:	2702      	movs	r7, #2
 8004006:	e790      	b.n	8003f2a <__kernel_rem_pio2f+0x14a>
 8004008:	6820      	ldr	r0, [r4, #0]
 800400a:	b949      	cbnz	r1, 8004020 <__kernel_rem_pio2f+0x240>
 800400c:	b118      	cbz	r0, 8004016 <__kernel_rem_pio2f+0x236>
 800400e:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 8004012:	6020      	str	r0, [r4, #0]
 8004014:	2001      	movs	r0, #1
 8004016:	f10e 0e01 	add.w	lr, lr, #1
 800401a:	3404      	adds	r4, #4
 800401c:	4601      	mov	r1, r0
 800401e:	e789      	b.n	8003f34 <__kernel_rem_pio2f+0x154>
 8004020:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 8004024:	6020      	str	r0, [r4, #0]
 8004026:	4608      	mov	r0, r1
 8004028:	e7f5      	b.n	8004016 <__kernel_rem_pio2f+0x236>
 800402a:	1e74      	subs	r4, r6, #1
 800402c:	ab08      	add	r3, sp, #32
 800402e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8004032:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8004036:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800403a:	e783      	b.n	8003f44 <__kernel_rem_pio2f+0x164>
 800403c:	1e74      	subs	r4, r6, #1
 800403e:	ab08      	add	r3, sp, #32
 8004040:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8004044:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8004048:	e7f5      	b.n	8004036 <__kernel_rem_pio2f+0x256>
 800404a:	ab08      	add	r3, sp, #32
 800404c:	f853 002c 	ldr.w	r0, [r3, ip, lsl #2]
 8004050:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 8004054:	4301      	orrs	r1, r0
 8004056:	e7ae      	b.n	8003fb6 <__kernel_rem_pio2f+0x1d6>
 8004058:	3001      	adds	r0, #1
 800405a:	f854 7d04 	ldr.w	r7, [r4, #-4]!
 800405e:	2f00      	cmp	r7, #0
 8004060:	d0fa      	beq.n	8004058 <__kernel_rem_pio2f+0x278>
 8004062:	9b06      	ldr	r3, [sp, #24]
 8004064:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8004068:	eb0d 0403 	add.w	r4, sp, r3
 800406c:	9b01      	ldr	r3, [sp, #4]
 800406e:	18f7      	adds	r7, r6, r3
 8004070:	ab1c      	add	r3, sp, #112	; 0x70
 8004072:	f106 0c01 	add.w	ip, r6, #1
 8004076:	3c4c      	subs	r4, #76	; 0x4c
 8004078:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800407c:	4430      	add	r0, r6
 800407e:	4560      	cmp	r0, ip
 8004080:	da04      	bge.n	800408c <__kernel_rem_pio2f+0x2ac>
 8004082:	4606      	mov	r6, r0
 8004084:	e711      	b.n	8003eaa <__kernel_rem_pio2f+0xca>
 8004086:	9c05      	ldr	r4, [sp, #20]
 8004088:	2001      	movs	r0, #1
 800408a:	e7e6      	b.n	800405a <__kernel_rem_pio2f+0x27a>
 800408c:	9b04      	ldr	r3, [sp, #16]
 800408e:	f8dd e008 	ldr.w	lr, [sp, #8]
 8004092:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8004096:	9306      	str	r3, [sp, #24]
 8004098:	ee07 3a90 	vmov	s15, r3
 800409c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80040a0:	2600      	movs	r6, #0
 80040a2:	ece7 7a01 	vstmia	r7!, {s15}
 80040a6:	eddf 7a0e 	vldr	s15, [pc, #56]	; 80040e0 <__kernel_rem_pio2f+0x300>
 80040aa:	46b9      	mov	r9, r7
 80040ac:	455e      	cmp	r6, fp
 80040ae:	dd04      	ble.n	80040ba <__kernel_rem_pio2f+0x2da>
 80040b0:	ece4 7a01 	vstmia	r4!, {s15}
 80040b4:	f10c 0c01 	add.w	ip, ip, #1
 80040b8:	e7e1      	b.n	800407e <__kernel_rem_pio2f+0x29e>
 80040ba:	ecfe 6a01 	vldmia	lr!, {s13}
 80040be:	ed39 7a01 	vldmdb	r9!, {s14}
 80040c2:	3601      	adds	r6, #1
 80040c4:	eee6 7a87 	vfma.f32	s15, s13, s14
 80040c8:	e7f0      	b.n	80040ac <__kernel_rem_pio2f+0x2cc>
 80040ca:	3c01      	subs	r4, #1
 80040cc:	e777      	b.n	8003fbe <__kernel_rem_pio2f+0x1de>
 80040ce:	bf00      	nop
 80040d0:	08004808 	.word	0x08004808
 80040d4:	080047dc 	.word	0x080047dc
 80040d8:	43800000 	.word	0x43800000
 80040dc:	3b800000 	.word	0x3b800000
 80040e0:	00000000 	.word	0x00000000
 80040e4:	9b03      	ldr	r3, [sp, #12]
 80040e6:	eeb0 0a48 	vmov.f32	s0, s16
 80040ea:	1a98      	subs	r0, r3, r2
 80040ec:	f000 f92c 	bl	8004348 <scalbnf>
 80040f0:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 80040d8 <__kernel_rem_pio2f+0x2f8>
 80040f4:	eeb4 0ac7 	vcmpe.f32	s0, s14
 80040f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040fc:	db19      	blt.n	8004132 <__kernel_rem_pio2f+0x352>
 80040fe:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 80040dc <__kernel_rem_pio2f+0x2fc>
 8004102:	ee60 7a27 	vmul.f32	s15, s0, s15
 8004106:	aa08      	add	r2, sp, #32
 8004108:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800410c:	1c74      	adds	r4, r6, #1
 800410e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004112:	3508      	adds	r5, #8
 8004114:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8004118:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800411c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8004120:	ee10 3a10 	vmov	r3, s0
 8004124:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8004128:	ee17 3a90 	vmov	r3, s15
 800412c:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8004130:	e74b      	b.n	8003fca <__kernel_rem_pio2f+0x1ea>
 8004132:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8004136:	aa08      	add	r2, sp, #32
 8004138:	ee10 3a10 	vmov	r3, s0
 800413c:	4634      	mov	r4, r6
 800413e:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8004142:	e742      	b.n	8003fca <__kernel_rem_pio2f+0x1ea>
 8004144:	a808      	add	r0, sp, #32
 8004146:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 800414a:	9001      	str	r0, [sp, #4]
 800414c:	ee07 0a90 	vmov	s15, r0
 8004150:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004154:	3b01      	subs	r3, #1
 8004156:	ee67 7a80 	vmul.f32	s15, s15, s0
 800415a:	ee20 0a07 	vmul.f32	s0, s0, s14
 800415e:	ed62 7a01 	vstmdb	r2!, {s15}
 8004162:	e73f      	b.n	8003fe4 <__kernel_rem_pio2f+0x204>
 8004164:	ecf6 6a01 	vldmia	r6!, {s13}
 8004168:	ecb5 7a01 	vldmia	r5!, {s14}
 800416c:	eee6 7a87 	vfma.f32	s15, s13, s14
 8004170:	3001      	adds	r0, #1
 8004172:	4550      	cmp	r0, sl
 8004174:	dc01      	bgt.n	800417a <__kernel_rem_pio2f+0x39a>
 8004176:	4290      	cmp	r0, r2
 8004178:	ddf4      	ble.n	8004164 <__kernel_rem_pio2f+0x384>
 800417a:	a858      	add	r0, sp, #352	; 0x160
 800417c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8004180:	ed42 7a28 	vstr	s15, [r2, #-160]	; 0xffffff60
 8004184:	3b01      	subs	r3, #1
 8004186:	e731      	b.n	8003fec <__kernel_rem_pio2f+0x20c>
 8004188:	9b66      	ldr	r3, [sp, #408]	; 0x198
 800418a:	2b02      	cmp	r3, #2
 800418c:	dc09      	bgt.n	80041a2 <__kernel_rem_pio2f+0x3c2>
 800418e:	2b00      	cmp	r3, #0
 8004190:	dc2b      	bgt.n	80041ea <__kernel_rem_pio2f+0x40a>
 8004192:	d044      	beq.n	800421e <__kernel_rem_pio2f+0x43e>
 8004194:	f009 0007 	and.w	r0, r9, #7
 8004198:	b059      	add	sp, #356	; 0x164
 800419a:	ecbd 8b04 	vpop	{d8-d9}
 800419e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80041a2:	9b66      	ldr	r3, [sp, #408]	; 0x198
 80041a4:	2b03      	cmp	r3, #3
 80041a6:	d1f5      	bne.n	8004194 <__kernel_rem_pio2f+0x3b4>
 80041a8:	aa30      	add	r2, sp, #192	; 0xc0
 80041aa:	1f0b      	subs	r3, r1, #4
 80041ac:	4413      	add	r3, r2
 80041ae:	461a      	mov	r2, r3
 80041b0:	4620      	mov	r0, r4
 80041b2:	2800      	cmp	r0, #0
 80041b4:	f1a2 0204 	sub.w	r2, r2, #4
 80041b8:	dc52      	bgt.n	8004260 <__kernel_rem_pio2f+0x480>
 80041ba:	4622      	mov	r2, r4
 80041bc:	2a01      	cmp	r2, #1
 80041be:	f1a3 0304 	sub.w	r3, r3, #4
 80041c2:	dc5d      	bgt.n	8004280 <__kernel_rem_pio2f+0x4a0>
 80041c4:	ab30      	add	r3, sp, #192	; 0xc0
 80041c6:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 80040e0 <__kernel_rem_pio2f+0x300>
 80041ca:	440b      	add	r3, r1
 80041cc:	2c01      	cmp	r4, #1
 80041ce:	dc67      	bgt.n	80042a0 <__kernel_rem_pio2f+0x4c0>
 80041d0:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 80041d4:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 80041d8:	2f00      	cmp	r7, #0
 80041da:	d167      	bne.n	80042ac <__kernel_rem_pio2f+0x4cc>
 80041dc:	edc8 6a00 	vstr	s13, [r8]
 80041e0:	ed88 7a01 	vstr	s14, [r8, #4]
 80041e4:	edc8 7a02 	vstr	s15, [r8, #8]
 80041e8:	e7d4      	b.n	8004194 <__kernel_rem_pio2f+0x3b4>
 80041ea:	ab30      	add	r3, sp, #192	; 0xc0
 80041ec:	ed1f 7a44 	vldr	s14, [pc, #-272]	; 80040e0 <__kernel_rem_pio2f+0x300>
 80041f0:	440b      	add	r3, r1
 80041f2:	4622      	mov	r2, r4
 80041f4:	2a00      	cmp	r2, #0
 80041f6:	da24      	bge.n	8004242 <__kernel_rem_pio2f+0x462>
 80041f8:	b34f      	cbz	r7, 800424e <__kernel_rem_pio2f+0x46e>
 80041fa:	eef1 7a47 	vneg.f32	s15, s14
 80041fe:	edc8 7a00 	vstr	s15, [r8]
 8004202:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 8004206:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800420a:	aa31      	add	r2, sp, #196	; 0xc4
 800420c:	2301      	movs	r3, #1
 800420e:	429c      	cmp	r4, r3
 8004210:	da20      	bge.n	8004254 <__kernel_rem_pio2f+0x474>
 8004212:	b10f      	cbz	r7, 8004218 <__kernel_rem_pio2f+0x438>
 8004214:	eef1 7a67 	vneg.f32	s15, s15
 8004218:	edc8 7a01 	vstr	s15, [r8, #4]
 800421c:	e7ba      	b.n	8004194 <__kernel_rem_pio2f+0x3b4>
 800421e:	ab30      	add	r3, sp, #192	; 0xc0
 8004220:	ed5f 7a51 	vldr	s15, [pc, #-324]	; 80040e0 <__kernel_rem_pio2f+0x300>
 8004224:	440b      	add	r3, r1
 8004226:	2c00      	cmp	r4, #0
 8004228:	da05      	bge.n	8004236 <__kernel_rem_pio2f+0x456>
 800422a:	b10f      	cbz	r7, 8004230 <__kernel_rem_pio2f+0x450>
 800422c:	eef1 7a67 	vneg.f32	s15, s15
 8004230:	edc8 7a00 	vstr	s15, [r8]
 8004234:	e7ae      	b.n	8004194 <__kernel_rem_pio2f+0x3b4>
 8004236:	ed33 7a01 	vldmdb	r3!, {s14}
 800423a:	3c01      	subs	r4, #1
 800423c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004240:	e7f1      	b.n	8004226 <__kernel_rem_pio2f+0x446>
 8004242:	ed73 7a01 	vldmdb	r3!, {s15}
 8004246:	3a01      	subs	r2, #1
 8004248:	ee37 7a27 	vadd.f32	s14, s14, s15
 800424c:	e7d2      	b.n	80041f4 <__kernel_rem_pio2f+0x414>
 800424e:	eef0 7a47 	vmov.f32	s15, s14
 8004252:	e7d4      	b.n	80041fe <__kernel_rem_pio2f+0x41e>
 8004254:	ecb2 7a01 	vldmia	r2!, {s14}
 8004258:	3301      	adds	r3, #1
 800425a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800425e:	e7d6      	b.n	800420e <__kernel_rem_pio2f+0x42e>
 8004260:	edd2 7a00 	vldr	s15, [r2]
 8004264:	edd2 6a01 	vldr	s13, [r2, #4]
 8004268:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800426c:	3801      	subs	r0, #1
 800426e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004272:	ed82 7a00 	vstr	s14, [r2]
 8004276:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800427a:	edc2 7a01 	vstr	s15, [r2, #4]
 800427e:	e798      	b.n	80041b2 <__kernel_rem_pio2f+0x3d2>
 8004280:	edd3 7a00 	vldr	s15, [r3]
 8004284:	edd3 6a01 	vldr	s13, [r3, #4]
 8004288:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800428c:	3a01      	subs	r2, #1
 800428e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004292:	ed83 7a00 	vstr	s14, [r3]
 8004296:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800429a:	edc3 7a01 	vstr	s15, [r3, #4]
 800429e:	e78d      	b.n	80041bc <__kernel_rem_pio2f+0x3dc>
 80042a0:	ed33 7a01 	vldmdb	r3!, {s14}
 80042a4:	3c01      	subs	r4, #1
 80042a6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80042aa:	e78f      	b.n	80041cc <__kernel_rem_pio2f+0x3ec>
 80042ac:	eef1 6a66 	vneg.f32	s13, s13
 80042b0:	eeb1 7a47 	vneg.f32	s14, s14
 80042b4:	edc8 6a00 	vstr	s13, [r8]
 80042b8:	ed88 7a01 	vstr	s14, [r8, #4]
 80042bc:	eef1 7a67 	vneg.f32	s15, s15
 80042c0:	e790      	b.n	80041e4 <__kernel_rem_pio2f+0x404>
 80042c2:	bf00      	nop

080042c4 <floorf>:
 80042c4:	ee10 3a10 	vmov	r3, s0
 80042c8:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80042cc:	3a7f      	subs	r2, #127	; 0x7f
 80042ce:	2a16      	cmp	r2, #22
 80042d0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80042d4:	dc2a      	bgt.n	800432c <floorf+0x68>
 80042d6:	2a00      	cmp	r2, #0
 80042d8:	da11      	bge.n	80042fe <floorf+0x3a>
 80042da:	eddf 7a18 	vldr	s15, [pc, #96]	; 800433c <floorf+0x78>
 80042de:	ee30 0a27 	vadd.f32	s0, s0, s15
 80042e2:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80042e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042ea:	dd05      	ble.n	80042f8 <floorf+0x34>
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	da23      	bge.n	8004338 <floorf+0x74>
 80042f0:	4a13      	ldr	r2, [pc, #76]	; (8004340 <floorf+0x7c>)
 80042f2:	2900      	cmp	r1, #0
 80042f4:	bf18      	it	ne
 80042f6:	4613      	movne	r3, r2
 80042f8:	ee00 3a10 	vmov	s0, r3
 80042fc:	4770      	bx	lr
 80042fe:	4911      	ldr	r1, [pc, #68]	; (8004344 <floorf+0x80>)
 8004300:	4111      	asrs	r1, r2
 8004302:	420b      	tst	r3, r1
 8004304:	d0fa      	beq.n	80042fc <floorf+0x38>
 8004306:	eddf 7a0d 	vldr	s15, [pc, #52]	; 800433c <floorf+0x78>
 800430a:	ee30 0a27 	vadd.f32	s0, s0, s15
 800430e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8004312:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004316:	ddef      	ble.n	80042f8 <floorf+0x34>
 8004318:	2b00      	cmp	r3, #0
 800431a:	bfbe      	ittt	lt
 800431c:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 8004320:	fa40 f202 	asrlt.w	r2, r0, r2
 8004324:	189b      	addlt	r3, r3, r2
 8004326:	ea23 0301 	bic.w	r3, r3, r1
 800432a:	e7e5      	b.n	80042f8 <floorf+0x34>
 800432c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8004330:	d3e4      	bcc.n	80042fc <floorf+0x38>
 8004332:	ee30 0a00 	vadd.f32	s0, s0, s0
 8004336:	4770      	bx	lr
 8004338:	2300      	movs	r3, #0
 800433a:	e7dd      	b.n	80042f8 <floorf+0x34>
 800433c:	7149f2ca 	.word	0x7149f2ca
 8004340:	bf800000 	.word	0xbf800000
 8004344:	007fffff 	.word	0x007fffff

08004348 <scalbnf>:
 8004348:	ee10 3a10 	vmov	r3, s0
 800434c:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8004350:	d02b      	beq.n	80043aa <scalbnf+0x62>
 8004352:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8004356:	d302      	bcc.n	800435e <scalbnf+0x16>
 8004358:	ee30 0a00 	vadd.f32	s0, s0, s0
 800435c:	4770      	bx	lr
 800435e:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8004362:	d123      	bne.n	80043ac <scalbnf+0x64>
 8004364:	4b24      	ldr	r3, [pc, #144]	; (80043f8 <scalbnf+0xb0>)
 8004366:	eddf 7a25 	vldr	s15, [pc, #148]	; 80043fc <scalbnf+0xb4>
 800436a:	4298      	cmp	r0, r3
 800436c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8004370:	db17      	blt.n	80043a2 <scalbnf+0x5a>
 8004372:	ee10 3a10 	vmov	r3, s0
 8004376:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800437a:	3a19      	subs	r2, #25
 800437c:	f24c 3150 	movw	r1, #50000	; 0xc350
 8004380:	4288      	cmp	r0, r1
 8004382:	dd15      	ble.n	80043b0 <scalbnf+0x68>
 8004384:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8004400 <scalbnf+0xb8>
 8004388:	eddf 6a1e 	vldr	s13, [pc, #120]	; 8004404 <scalbnf+0xbc>
 800438c:	ee10 3a10 	vmov	r3, s0
 8004390:	eeb0 7a67 	vmov.f32	s14, s15
 8004394:	2b00      	cmp	r3, #0
 8004396:	bfb8      	it	lt
 8004398:	eef0 7a66 	vmovlt.f32	s15, s13
 800439c:	ee27 0a87 	vmul.f32	s0, s15, s14
 80043a0:	4770      	bx	lr
 80043a2:	eddf 7a19 	vldr	s15, [pc, #100]	; 8004408 <scalbnf+0xc0>
 80043a6:	ee27 0a80 	vmul.f32	s0, s15, s0
 80043aa:	4770      	bx	lr
 80043ac:	0dd2      	lsrs	r2, r2, #23
 80043ae:	e7e5      	b.n	800437c <scalbnf+0x34>
 80043b0:	4410      	add	r0, r2
 80043b2:	28fe      	cmp	r0, #254	; 0xfe
 80043b4:	dce6      	bgt.n	8004384 <scalbnf+0x3c>
 80043b6:	2800      	cmp	r0, #0
 80043b8:	dd06      	ble.n	80043c8 <scalbnf+0x80>
 80043ba:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80043be:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 80043c2:	ee00 3a10 	vmov	s0, r3
 80043c6:	4770      	bx	lr
 80043c8:	f110 0f16 	cmn.w	r0, #22
 80043cc:	da09      	bge.n	80043e2 <scalbnf+0x9a>
 80043ce:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8004408 <scalbnf+0xc0>
 80043d2:	eddf 6a0e 	vldr	s13, [pc, #56]	; 800440c <scalbnf+0xc4>
 80043d6:	ee10 3a10 	vmov	r3, s0
 80043da:	eeb0 7a67 	vmov.f32	s14, s15
 80043de:	2b00      	cmp	r3, #0
 80043e0:	e7d9      	b.n	8004396 <scalbnf+0x4e>
 80043e2:	3019      	adds	r0, #25
 80043e4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80043e8:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 80043ec:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8004410 <scalbnf+0xc8>
 80043f0:	ee07 3a90 	vmov	s15, r3
 80043f4:	e7d7      	b.n	80043a6 <scalbnf+0x5e>
 80043f6:	bf00      	nop
 80043f8:	ffff3cb0 	.word	0xffff3cb0
 80043fc:	4c000000 	.word	0x4c000000
 8004400:	7149f2ca 	.word	0x7149f2ca
 8004404:	f149f2ca 	.word	0xf149f2ca
 8004408:	0da24260 	.word	0x0da24260
 800440c:	8da24260 	.word	0x8da24260
 8004410:	33000000 	.word	0x33000000

08004414 <_init>:
 8004414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004416:	bf00      	nop
 8004418:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800441a:	bc08      	pop	{r3}
 800441c:	469e      	mov	lr, r3
 800441e:	4770      	bx	lr

08004420 <_fini>:
 8004420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004422:	bf00      	nop
 8004424:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004426:	bc08      	pop	{r3}
 8004428:	469e      	mov	lr, r3
 800442a:	4770      	bx	lr
